{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-02-16T00:00:37.651428+00:00",
  "repo": "scionassociation/scion-dp_I-D",
  "labels": [
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "Prio 1",
      "description": "",
      "color": "B60205"
    },
    {
      "name": "Prio 2",
      "description": "",
      "color": "FBCA04"
    },
    {
      "name": "Prio 3",
      "description": "",
      "color": "0E8A16"
    },
    {
      "name": "needs-discussion",
      "description": "",
      "color": "fbca04"
    },
    {
      "name": "editorial",
      "description": "",
      "color": "9855E2"
    },
    {
      "name": "design",
      "description": "",
      "color": "1d76db"
    },
    {
      "name": "final-polish",
      "description": "",
      "color": "17D719"
    }
  ],
  "issues": [
    {
      "number": 3,
      "id": "I_kwDOKYa77857ZMR9",
      "title": "Language: MAC v.s. MAC",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/3",
      "state": "CLOSED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "jiceatscion"
      ],
      "labels": [
        "enhancement"
      ],
      "body": "We should only use MAC with one meaning, not with two at the same time\r\n\r\n(Moved from https://github.com/scionassociation/standards/issues/98)\r\n",
      "createdAt": "2024-01-08T10:54:38Z",
      "updatedAt": "2024-02-27T10:33:02Z",
      "closedAt": "2024-02-27T10:33:02Z",
      "comments": []
    },
    {
      "number": 4,
      "id": "I_kwDOKYa77857aD1Z",
      "title": "Write IANA Considerations Section",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/4",
      "state": "CLOSED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "nicorusti",
        "jiceatscion"
      ],
      "labels": [
        "Prio 1"
      ],
      "body": "See [RFC 8126](https://www.rfc-editor.org/rfc/rfc8126.html)\r\n\r\n(Copied from https://github.com/scionassociation/standards/issues/100)\r\n",
      "createdAt": "2024-01-08T13:10:11Z",
      "updatedAt": "2024-05-16T13:26:13Z",
      "closedAt": "2024-05-16T13:26:12Z",
      "comments": [
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For the data plane, I think we have the following IANA considerations to address:\r\n- Informational: The fact that we mirror the UDP port space into the SCION/UDP port space; so inherit all assignments and reservations; so no IANA action required to manage the SCION/UDP port space itself.\r\n- The dispatcher/shim SCION/UDP port at 30041, which by virtue of the mirroring needs that the UDP port 30041 be a reserved port.\r\n- The assignment of ISD and AS numbers.\r\n- The registration of Service Numbers (for Service addresses). --> #13 \r\n- The registration of Transport Protocols over SCION.\r\n\r\nAll other port numbers are supposedly configurable by peer-peer agreement or are AS internal concerns, so I think they do not need any IANA arbitration. However, I would prefer some IETF expert advice on that because I do not know how acceptable it is is to assume agreed-upon ports in the User range without reservation as part of an RFC published protocol.\r\n\r\nRegarding port 30041, it is a dependency of our UDP/IP underlay network. Technically that's not part of the dataplane spec, however, the spec does mention the underlay network and it is rather hypocritical to pretend that it is out of scope. There's no interoperability between two ASes without a common underlay implementation. Nico: should we not add a section to the spec that explicitly describes the current UDP/IP encapsulation as one standard link layer for SCION?\r\n\r\nRegarding the ISD/AS numbers, I am unsure how much IANA needs to be involved, given that we plan for the association to manage the registry. I found RFC 8126 quite obscure on that topic, so I would welcome some IETF input on that too before I start writing the section.\r\n\r\nRegarding a Service Number registry. I am not sure we should rush to define one as there are ongoing discussions to eliminate service resolution. Nevertheless, there would likely be some alternate mechanism to designate \"anycast\r\naddressed\" services so some kind of registry would be needed. Opinions?\r\n\r\nRegarding protocol numbers, we do mention that we attempt to mirror the assigned protocol numbers for IP. I think we must make a clearer statement: inherit and extend the IP assignments, and create our own registry. This would enable a seamless transition if we ever manage to deploy SCION as an IP alternative/extension. What that requires is that the 200-2003 protocols be registered in the IP protocol space as well, to ensure they remain available for such usage.\r\n\r\n",
          "createdAt": "2024-01-11T13:26:34Z",
          "updatedAt": "2024-05-16T13:25:39Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "There are no IANA actions, resolving this as the only open point is handled in #13 . ",
          "createdAt": "2024-05-16T13:26:13Z",
          "updatedAt": "2024-05-16T13:26:13Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOKYa77857aTh_",
      "title": "Unaddressed Feedback from Reviews",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/5",
      "state": "CLOSED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "jiceatscion"
      ],
      "labels": [
        "Prio 1"
      ],
      "body": "General feedback Eliot: \r\n- [x] Make sure the references are correct:\r\n       - Normative references: Needed for the specification; specification is based on it.\r\n       - Informative references: Provide background/additional information\r\n- [x] Make sure MUST/MAY/SHOULD are used correctly (see also [RFC 8174](https://datatracker.ietf.org/doc/html/rfc8174)):\r\n       (partially addressed in #6 )  \r\n       - MUST: Without this, the protocol will not work\r\n       - SHOULD: Should do this unless you have a very good reason not to\r\n       - MAY: Try to not use \"MAY\", Eliot is not a big fan of it\r\n- [x] What text can be removed? Be concise. Make sure every word that is there must be there. \r\n\r\nFeedback Juan: \r\n- [x] #14\r\n- [x] ~~Explain why any transport or other upper-layer protocol that includes addresses from the SCION header in the checksum computation should use a pseudo header.~~ --> Checked IPv6 RFC2460, it dies not explain why. Our section talking about this is very similar to IPv6, and we don't feel need to change this\r\n- [x] ~~Simplify the \"Life of a packet\" figure, e.g., by removing all the IP addresses and listing them in a table instead, and/or having just numbers/letters as interface IDs.~~ Over time we rewrote this section several times and I (@nicorusti ) don't feel this will make it more readable. \r\n",
      "createdAt": "2024-01-08T13:45:04Z",
      "updatedAt": "2024-06-03T14:18:30Z",
      "closedAt": "2024-05-16T13:40:49Z",
      "comments": []
    },
    {
      "number": 7,
      "id": "I_kwDOKYa7786BI0h8",
      "title": "Clarify MACs (truncation, path splicing), AES-CMAC as default algorithm",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/7",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "matzf"
      ],
      "labels": [
        "enhancement",
        "Prio 2"
      ],
      "body": "When dealing with security considerations #1  , we mention that chained MACs prevent path splicing attacks. This should be better explained, since in the draft we describe how chained MACs work, but not how they prevent path splicing. \r\n\r\n> From Joel Halpern\r\n> The use of only the lower two bytes of the cryptographic value for chaining seems odd.  If you need a 16 bit value, I would have assumed you would at least fold the entire 6 bit signature into thirds, so all the bits have an impact?\r\n\r\nRight, this depends on the MAC algorithm. Safely truncating requires certain MAC algorithms, e.g. ones that have properties of a pseudorandom function. We should clarify this.\r\n\r\n> Both the PCB authentication and the hop authentication use a mechanism that computes the signature over all previous hops.  This seems odd.  If each hop includes the previous hop, that seems to produce an immutable chain at lower cost.  At the very least, an explanation would seem called for.\r\n\r\nThis is to avoid certain path splicing attacks, we have a brief description in the data plane draft 5.1.3.  Path Splicing, but this can be extended. \r\n\r\n> <jmh>  A path splice would still make the following signature invalid.  But what I had missed is that it would not make the final signature invalid.  And you want validation at packet forwarding time to be fast.  Okay, I see why you are chaining them for the hop signature generation.  I guess for the PCB signature you either chain them at generation or you have to validate each one at PCB validation.  So again, I see why you are doing it this way.  A bit more explanation in the draft would be good.   Thanks.</jmh>\r\n\r\nIssue in CP:  https://github.com/scionassociation/scion-cp_I-D/issues/23 \r\n",
      "createdAt": "2024-03-04T11:06:10Z",
      "updatedAt": "2024-10-08T12:20:34Z",
      "closedAt": "2024-06-28T07:11:19Z",
      "comments": []
    },
    {
      "number": 8,
      "id": "I_kwDOKYa7786IuUkR",
      "title": "SCMP - Be careful about forward references",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/8",
      "state": "CLOSED",
      "author": "elear",
      "authorAssociation": "NONE",
      "assignees": [
        "jiceatscion"
      ],
      "labels": [
        "enhancement",
        "needs-discussion",
        "design"
      ],
      "body": ">  SCION also includes its own protocol to communicate failures to endpoints,\r\n   the SCION Control Message Protocol (SCMP).  This protocol will be\r\n   described in a separate document, which will follow later.\r\n\r\nText like this doesn't stand on its own.",
      "createdAt": "2024-05-13T21:05:25Z",
      "updatedAt": "2024-06-05T13:27:37Z",
      "closedAt": "2024-06-05T13:27:37Z",
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "The SCMP  specification is likely not be necessary for a self-contained data plane.  \r\n\r\nIn this draft, there are a few mentions of SCMP that are not necessary for the DP spec:  the text below is just an example and could be deleted: \r\n```\r\n   A similar mechanism is possible for on-path routers, for example to\r\n   send SCION Control Message Protocol (SCMP) messages to the sender of\r\n   the original packet.\r\n  ```\r\n  ```\r\n  The remaining protocols, which do not carry the\r\n      length information directly (e.g., the SCION Control Message\r\n      Protocol SCMP)\r\n  ```\r\n  \r\nThere are 4 mentions of using the SCMP `parameter problem` when MAC verification fails. This  can be useful for debugging. Ig MAC verification fails because of an attack, it does not make sense to send an error message back. This is an optional signal that routers can send, so this could be omitted.\r\n\r\nWe could then only leave the protocol number in table 10.\r\n",
          "createdAt": "2024-05-16T14:43:59Z",
          "updatedAt": "2024-05-16T14:43:59Z"
        },
        {
          "author": "elear",
          "authorAssociation": "NONE",
          "body": "If SCMP is not important to the work, you can still mention it informationally, but then you must properly reference it. ",
          "createdAt": "2024-05-16T17:09:06Z",
          "updatedAt": "2024-05-16T17:09:06Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Hi @elear , we removed forward references to SCMP, [see change diff](https://author-tools.ietf.org/api/iddiff?url_1=https://scionassociation.github.io/scion-dp_I-D/draft-dekater-scion-dataplane.txt&url_2=https://scionassociation.github.io/scion-dp_I-D/no_scmp_spec/draft-dekater-scion-dataplane.txt).  We now mention SCMP at the end of the draft, and we use our developer documentation as a reference: https://docs.scion.org/en/latest/protocols/scmp.html \r\n\r\nDoes that work? \r\n\r\nAn alternative reference would be the SCION book `[CHUAT22]`  section 4.7. \r\n\r\n",
          "createdAt": "2024-06-03T15:09:58Z",
          "updatedAt": "2024-06-03T15:10:20Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOKYa7786IuVaP",
      "title": "editorial: de-emphasisize text",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/9",
      "state": "CLOSED",
      "author": "elear",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "final-polish"
      ],
      "body": "No need for this in the abstract: \\*SCION data plane\\*",
      "createdAt": "2024-05-13T21:06:52Z",
      "updatedAt": "2024-12-17T10:23:02Z",
      "closedAt": "2024-12-17T10:23:02Z",
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "@elear may we leave emphasized/italic text in the text version? (e.g. ` _PKI_` or ` *Autonomous System (AS)*`\r\nOr is it something that we should remove everywhere?\r\n\r\n\r\nContext: bold/italic text can be used in HTML versions using the `<strong>`/`<em>` attributes (see [RFC7992](https://datatracker.ietf.org/doc/html/rfc7992#section-9.50)). The tool we use, is indeed using this attribute for the HTML version. However, in the text only version, the markdown syntax `*`/`_` gets left there  ",
          "createdAt": "2024-07-04T08:15:14Z",
          "updatedAt": "2024-07-04T09:57:22Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOKYa7786IuWFf",
      "title": "Extend introduction and remove/edit notes",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/10",
      "state": "CLOSED",
      "author": "elear",
      "authorAssociation": "NONE",
      "assignees": [
        "knmeynell"
      ],
      "labels": [
        "enhancement",
        "Prio 1",
        "editorial"
      ],
      "body": "The following text needs to be reworked as you are not publishing some of these:\r\n\r\n > \\*Note:\\* This is the very first version of the SCION Data Plane\r\n   document.  We are aware that the draft is far from perfect, and hope\r\n   to improve the content in later versions of the document.  To reach\r\n   this goal, any feedback is welcome and much appreciated.  Thanks!\r\n\r\n>  \\*Note:\\* It is assumed that readers of this draft are familiar with\r\n   the basic concepts of the SCION next-generation inter-domain network\r\n   architecture.  If not, please find more detailed information in the\r\n   IETF Internet Drafts [I-D.scion-overview], [I-D.scion-components],\r\n   [I-D.scion-cppki], and [I-D.scion-cp], as well as in [CHUAT22],\r\n   especially Chapter 2.  A short description of the SCION basic terms\r\n   and elements can be found in Section 1.1 below.\r\n\r\n\r\n\r\nAlso, \r\n> From: Ron Bonica\r\n> The problem statement is weak. Before describing forwarding plane details, you need to tell the readers why they should deploy SCION. You say that the design advantages are:\r\n>  - It provides control and transparency over forwarding paths the endpoints.  \u2002\u2002\u2002\u2002\u2002\u2002\u2002\r\n>  -  It simplifies the packet-processing at routers: Instead of having to perform longest-prefix matching on IP addresses, which requires expensive hardware and substantial amounts of energy, a router can simply access the next hop from the packet header, after having verified the authenticity of the hop field's MAC.\r\n\r\n> \u2002\u2002\u2002\u2002\u2002\u2002Is there any benefit in switching, as opposed to routing, at the AS boundary? Yes, routing is expensive. But the router is already there. There is no incremental cost. By contrast, you would have to add a SCION device.\r\n> Is the real motivation to support new settlement models?\r\n\r\n\r\nSame issue in other drafts: \r\n- CPPKI  https://github.com/scionassociation/scion-cppki_I-D/issues/29\r\n- CP        https://github.com/scionassociation/scion-cp_I-D/issues/14",
      "createdAt": "2024-05-13T21:08:42Z",
      "updatedAt": "2025-01-14T13:39:48Z",
      "closedAt": "2025-01-14T13:39:48Z",
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Regarding problem statement, we can reuse some text from the overview draft section 1.2, stressing aspects that mostly pertain tom the data plane: \r\n\r\n- Address needs of organizations or ecosystems exchanging sensitive information, such as financial  institutions, healthcare providers, universities, multinationals,  governments, critical and transportation infrastructure operators, which can not always be addressed by leveraging public Internet\r\n- Providing availability inter-domain (e.g. quick reaction to link failure)\r\n- Avoiding reflection attacks\r\n- Provide visibility to endpoints as a base for trust-enhanched networking\r\n- Simplified routing tables\r\n\r\netc. ",
          "createdAt": "2024-05-17T14:49:25Z",
          "updatedAt": "2024-05-17T14:49:25Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "\"allowed\" is also used in the CP draft: \r\n\r\n> - The `::` zero-compression feature of IPv6 is NOT allowed. The feature has very limited use in a 48-bit address space and would only add more complexity. ",
          "createdAt": "2024-06-03T09:34:23Z",
          "updatedAt": "2024-06-03T09:34:23Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "This has been addressed in #24 and in other PRs for the other drafts.",
          "createdAt": "2024-07-04T08:20:30Z",
          "updatedAt": "2024-07-04T08:20:30Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Following discussion with Eliot, Clarify: \r\n\r\n- Should this be IETF work instead of ISE? \u2192 Make it clear why these documents are being published. Two reasons: documenting existing implementation, discuss where it is implemented. Bring new concepts to industry that can be further improved with future versions of this work (or versions that can be valuable over time). Don\u2019t make it looks like a standard.\r\n",
          "createdAt": "2024-10-03T14:53:28Z",
          "updatedAt": "2024-10-03T14:53:28Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Resolved in #67 ",
          "createdAt": "2024-10-08T09:24:17Z",
          "updatedAt": "2024-10-08T09:24:17Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "I_kwDOKYa7786IwuHV",
      "title": "Allowed?",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/11",
      "state": "CLOSED",
      "author": "elear",
      "authorAssociation": "NONE",
      "assignees": [
        "knmeynell"
      ],
      "labels": [
        "editorial"
      ],
      "body": " >  \\*Note:\\* The current SCION implementation uses the UDP/IP protocol as\r\n   underlay.  However, the use of other underlay protocols is possible\r\n   and allowed.\r\n\r\nThis last sentence makes it seem like one might never run SCION on its own.  Also, \"allowed\" isn't a word we should see in RFCs.",
      "createdAt": "2024-05-14T05:54:10Z",
      "updatedAt": "2024-06-21T16:07:50Z",
      "closedAt": "2024-06-21T16:07:50Z",
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "- [ ] check for instances of allowed (on all three drafts) \r\n- [x] clarify that SCION may be run on L2 directly, so the  SCION spec is underlay-agnostic. Maybe we could use \"lower layer\", then define it in the terminology. \r\n\r\nAlso look at [IPv6 \"link\"](https://datatracker.ietf.org/doc/html/rfc2460#section-2) as inspiration \r\n",
          "createdAt": "2024-05-16T13:48:54Z",
          "updatedAt": "2024-06-13T16:06:08Z"
        },
        {
          "author": "knmeynell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is more complicated than at first sight at the remaining usage of 'allowed' relates to ISD voting rather directly to how the protocol is implemented. There are also numerous references to 'disallow' and 'disallowed' which would also need to be changed. ",
          "createdAt": "2024-06-13T16:17:49Z",
          "updatedAt": "2024-06-13T16:17:49Z"
        },
        {
          "author": "elear",
          "authorAssociation": "NONE",
          "body": "Other cases of allowed and disallowed absolutely should be addressed.  In this case we're talking about the nature of the data link.  Why is that the concern beyond even the router, much less the AS or ISD?",
          "createdAt": "2024-06-13T16:21:07Z",
          "updatedAt": "2024-06-13T16:21:07Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOKYa7786I_Qxa",
      "title": "Clarify implications of AS forwarding key compromise",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/12",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "matzf"
      ],
      "labels": [
        "enhancement",
        "question"
      ],
      "body": "> From:\tJoel Halpern\r\n> Before that, I would also ask them for the data plane document for an analysis of what the implications are if a key shared by all the SCION routers of an AS is compromised.  It is ahrd to tell if the design assumptions are workable without that. \r\n\r\n We should better clarify this, we don't say what an attacker can do if an attacker gets the AS forwarding key. \r\n Current text is: \r\n ```\r\n5.1.1.  Forwarding key compromise\r\n\r\n   For the current default MAC algorithm, AES-CMAC truncated to 48 bits,\r\n   key recovery attacks from (any number of) known plaintext/MAC\r\n   combinations is computationally infeasible, as far as publicly known.\r\n   In addition, the MAC algorithm can be freely chosen by each AS,\r\n   enabling algorithmic agility for MAC computations.  Should a MAC\r\n   algorithm be discovered to be weak or insecure, each AS can quickly\r\n   switch to a secure algorithm without the need for coordination with\r\n   other ASes.\r\n\r\n   A more realistic risk to the secrecy of the forwarding key is\r\n   exfiltration from a compromised router or control plane service.  An\r\n   AS can optionally rotate its forwarding key at regular intervals to\r\n   limit the exposure after a temporary device compromise.  However, as\r\n   is perhaps self-evident, such a key rotation scheme cannot mitigate\r\n   the impact of an undiscovered, permanent compromise of a device.\r\n   ``` ",
      "createdAt": "2024-05-15T15:53:08Z",
      "updatedAt": "2024-06-21T15:38:10Z",
      "closedAt": "2024-06-21T15:38:10Z",
      "comments": []
    },
    {
      "number": 13,
      "id": "I_kwDOKYa7786JF-Qo",
      "title": "Clarify service field",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/13",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "jiceatscion"
      ],
      "labels": [
        "enhancement",
        "needs-discussion",
        "design"
      ],
      "body": "We currently document type service 0b0100, but we don't further document possible values for it. We might need to add another table with potential values for the service field, as defined in [here](https://github.com/scionproto/scion/blob/master/pkg/addr/svc.go)\r\n```\r\n                      Table 2: Address length values\r\n\r\n    +================+======+=======================+================+\r\n    | Length (bytes) | Type |  Type/Length (binary) | Interpretation |\r\n    +================+======+=======================+================+\r\n    | 4              | 0    | 0b0000                | IPv4           |\r\n    +----------------+------+-----------------------+----------------+\r\n    | 4              | 1    | 0b0100                | Service        |\r\n    +----------------+------+-----------------------+----------------+\r\n    | 16             | 0    | 0b1100                | IPv6           |\r\n    +----------------+------+-----------------------+----------------+\r\n    | other          |      |                       | Unassigned     |\r\n    +----------------+------+-----------------------+----------------+\r\n   \r\n  ```\r\n\r\nRelates to https://github.com/scionassociation/scion-cp_I-D/issues/15 \r\n  ",
      "createdAt": "2024-05-16T10:40:42Z",
      "updatedAt": "2024-06-14T10:56:28Z",
      "closedAt": "2024-06-14T10:56:28Z",
      "comments": []
    },
    {
      "number": 14,
      "id": "I_kwDOKYa7786JHZbw",
      "title": "Clarify text on how to calculate the length in bytes of the `ExtLen` field",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/14",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "jiceatscion"
      ],
      "labels": [
        "editorial"
      ],
      "body": "Explain&nbsp;how to calculate the length in bytes of the ExtLen field in the SCION Hop-by-Hop/End-to-End Options header (extension&nbsp;header of a SCION path header).\r\n```\r\n   *  ExtLen: Unsigned 8-bit integer.  The value of this field is\r\n      computed as the length of the complete Hop-by-Hop/End-to-End\r\n      Options header in multiples of 4-bytes minus 1.\r\n  ```\r\n\r\nReference that this is similar to IPv6. ",
      "createdAt": "2024-05-16T13:29:46Z",
      "updatedAt": "2024-06-03T14:18:29Z",
      "closedAt": "2024-06-03T14:18:29Z",
      "comments": []
    },
    {
      "number": 20,
      "id": "I_kwDOKYa7786KXTYA",
      "title": "Add component overview",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/20",
      "state": "CLOSED",
      "author": "knmeynell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "knmeynell"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-28T15:24:57Z",
      "updatedAt": "2024-05-29T12:33:00Z",
      "closedAt": "2024-05-29T12:33:00Z",
      "comments": []
    },
    {
      "number": 22,
      "id": "I_kwDOKYa7786KeWtU",
      "title": "Add component overview",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/22",
      "state": "CLOSED",
      "author": "knmeynell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "knmeynell"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-29T12:33:56Z",
      "updatedAt": "2024-05-29T12:34:01Z",
      "closedAt": "2024-05-29T12:34:01Z",
      "comments": []
    },
    {
      "number": 23,
      "id": "I_kwDOKYa7786Kl1sF",
      "title": "intra-protocol? --> better wording ",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/23",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "knmeynell"
      ],
      "labels": [
        "Prio 1",
        "editorial"
      ],
      "body": "Some ideas:\r\n- intra-domain underlay\r\n\r\n\r\nSecond choice:\r\n- intra-domain network protocol\r\n\r\nIf we use a term, we may need to add it to the glossary too.",
      "createdAt": "2024-05-30T08:27:11Z",
      "updatedAt": "2024-07-08T08:30:35Z",
      "closedAt": "2024-07-08T08:30:35Z",
      "comments": []
    },
    {
      "number": 25,
      "id": "I_kwDOKYa7786K9vbc",
      "title": "Normative/informative references",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/25",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "jiceatscion"
      ],
      "labels": [
        "Prio 2",
        "editorial"
      ],
      "body": " Make sure the references are righttly placed according to [guidelines](https://datatracker.ietf.org/doc/statement-iesg-iesg-statement-normative-and-informative-references-20060419/#:~:text=Normative%20references%20specify%20documents%20that,it%20only%20provides%20additional%20information): \r\n- Normative references: Needed for the specification; specification is based on it.\r\n- Informative references: Provide background/additional information\r\n\r\n\r\nPotential changes: \r\n- [x] I-D.scion-cppki should be normative \r\n- [x] Several RFCs might be informative\r\n- [x] Check if other drafts affected\r\n\r\nRelated issues: \r\nCP https://github.com/scionassociation/scion-cp_I-D/issues/40\r\nPKI: https://github.com/scionassociation/scion-cppki_I-D/issues/32",
      "createdAt": "2024-06-03T15:21:40Z",
      "updatedAt": "2024-06-21T15:41:07Z",
      "closedAt": "2024-06-21T15:41:06Z",
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Regarding #28, \r\n\r\n- [x] RFC4493 \"AES-CMAC Algorithm\"  I think it should be normative (as we recently mentioned it must be supported in #26 )\r\n- [ ]  ~RFC9473\"A Vocabulary of Path  Properties\" should be normative as we use their definition for Endpoint~\r\n\r\nAlso, keeping open as this also needs to be resolved in other drafts\r\n\r\n\r\n",
          "createdAt": "2024-06-19T21:04:33Z",
          "updatedAt": "2024-06-20T08:11:20Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "I_kwDOKYa7786QGJPM",
      "title": "dataplane -> data plane",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/31",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "knmeynell"
      ],
      "labels": [
        "Prio 3",
        "editorial"
      ],
      "body": "Misspelling might have been reintroduced in some recent change ",
      "createdAt": "2024-07-18T22:45:15Z",
      "updatedAt": "2024-08-15T13:02:38Z",
      "closedAt": "2024-08-15T13:02:38Z",
      "comments": [
        {
          "author": "knmeynell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "All outstanding instances of 'dataplane' changed to 'data plane, with the exception of the filename (file name?).",
          "createdAt": "2024-08-15T13:02:38Z",
          "updatedAt": "2024-08-15T13:02:38Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "I_kwDOKYa7786QT8x9",
      "title": "Better explanation of ConsIngress,  ConsEgress,  ConsEgress Router Alert flag",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/32",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "- [ ] Clarify use of the  ConsEgress Router Alert flag\r\n- [ ] ConsIngress and ConsEgress are just instances of interfaces Identifiers, we should make this clearer (e.g. when we define interface IDs). \r\n\r\n\r\n> Eliot, 20.07.2024\r\n>   ConsIngress and ConsEgress require a lot more explanation if they're to be included.\r\n\r\n> Arald Alvestrand, 20.07\r\n>  There\u2019s a weakly described feature (which still gets 16 bits in the header!) called \u201cConsIngress\u201d and \u201cConsEgress\u201d, which says that \u201crouters will do L4 processing\u201d, without calling out what that is - Traceroute is briefly mentioned, but not to a degree that would allow implementation of whatever-it-is-supposed-to-be.\r\n\r\nNote: we use naming ConsIngress, ConsEgress because of https://github.com/scionproto/scion/issues/1479 \r\n",
      "createdAt": "2024-07-21T00:48:48Z",
      "updatedAt": "2024-07-30T09:52:04Z",
      "closedAt": "2024-07-30T09:52:04Z",
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Duplicate of #41",
          "createdAt": "2024-07-30T09:52:04Z",
          "updatedAt": "2024-07-30T09:52:04Z"
        }
      ]
    },
    {
      "number": 33,
      "id": "I_kwDOKYa7786QT8-y",
      "title": "Duplicate - Add discussion about fragmentation",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/33",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "enhancement"
      ],
      "body": "",
      "createdAt": "2024-07-21T00:50:53Z",
      "updatedAt": "2024-10-08T12:20:12Z",
      "closedAt": "2024-07-30T09:47:44Z",
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Duplicate of #39 ",
          "createdAt": "2024-07-30T09:47:45Z",
          "updatedAt": "2024-07-30T09:47:45Z"
        }
      ]
    },
    {
      "number": 35,
      "id": "I_kwDOKYa7786QVa58",
      "title": "Use auto-generated references",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/35",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "knmeynell"
      ],
      "labels": [
        "editorial"
      ],
      "body": "As in https://github.com/scionassociation/scion-cp_I-D/pull/54",
      "createdAt": "2024-07-21T17:33:12Z",
      "updatedAt": "2024-10-08T12:16:18Z",
      "closedAt": "2024-08-26T15:55:12Z",
      "comments": []
    },
    {
      "number": 36,
      "id": "I_kwDOKYa7786QfDAL",
      "title": "Clarify handling link failures",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/36",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "nicorusti",
        "jiceatscion"
      ],
      "labels": [
        "Prio 1",
        "needs-discussion"
      ],
      "body": "Path revocation in case of link failures is not clear. We only mention something in controlplane-02 section 2.4:\r\n``` \r\nOn link failures, endpoints route around the failed link by switching to\r\ndifferent paths in the data plane.\r\n```\r\nWe should make this clearer in -dataplane too. \r\n\r\n#### TODO: \r\n- [x] scionassociation/scion-dp_I-D#37\r\n- [x] Clarify that endpoints are expected to handle failures (and why)\r\n- [x] Clarify when a SCMP [Interface Down](https://scion.docs.anapaya.net/en/latest/protocols/scmp.html#external-interface-down) message is sent or not,  and why (it _should_ be sent)\r\n- [x] Clarify that SCMP interface down is currently unauthenticated, but it should be\r\n- [x] @nicorusti review https://github.com/scionassociation/scion-dp_I-D/pull/49/files \r\n- [x] @nicorusti  Send email to Eliot, Harald and ask if external reference to SCMP is enough (within the context of link down messages)\r\n\r\n#### Feedback details\r\n> Harald Alvestrand <harald@alvestrand.no> \r\n Once sent, a packet\u2019s path cannot be changed; path changes are handled by routers discovering that the path no longer exists and (I assume, this is likely documented in -controlplane) sending an alert back \u201cdon\u2019t use this path\u201d.\r\n \r\n >  Form my lunch with Harald at IETF120: \r\nPath revocation in case of link down should be clarified, the mechanism to signal  endpoints how to react quickly to failures should be described better.   Right now the draft only hints to this. This topic is very relevant also for webRTC. I mentioned SCMP  Interface Down  messages: This has been a topic of discussion within the SCION community for a long time. Currently, in the deployment routers send a non-authenticated SCMP message, while it should be. There are some proposals to leverage the PKI to authenticate this. Harald proposed to  say out loud that we don\u2019t have support for authentication in current deployment but that this should be authenticated, showing this is a known problem. We should avoid saying in the draft that a feature exists but then it is not specified. Ok to say some problems still need to be solved but not yet a concern in current deployment. (he shared story about irc and ICMP destination unreachable)\r\n \r\n \r\n \r\n Relates to https://github.com/scionassociation/scion-research_I-D/issues/25",
      "createdAt": "2024-07-22T21:00:37Z",
      "updatedAt": "2024-09-18T09:16:48Z",
      "closedAt": "2024-09-18T09:16:48Z",
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "In the current implementation, a SCMP interface down is sent if BFD is enabled for the interface.  ",
          "createdAt": "2024-07-23T12:27:44Z",
          "updatedAt": "2024-07-23T12:27:44Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looks like the last two remaining items have been addressed and that this can be closed, no?",
          "createdAt": "2024-09-17T10:32:16Z",
          "updatedAt": "2024-09-17T10:32:16Z"
        }
      ]
    },
    {
      "number": 37,
      "id": "I_kwDOKYa7786QfDE4",
      "title": "Clarify how routers use BFD",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/37",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "jiceatscion"
      ],
      "labels": [
        "enhancement",
        "needs-discussion"
      ],
      "body": "We currently mention BFD in [2.2.3.1. ](https://www.ietf.org/archive/id/draft-dekater-scion-dataplane-02.html#section-2.2.3.1)[Empty Path Type](https://www.ietf.org/archive/id/draft-dekater-scion-dataplane-02.html#name-empty-path-type): \r\n> One use case of the Empty path type lies in the context of link-failure detection. To this end, SCION uses the Bidirectional Forwarding Detection (BFD) protocol ([[RFC5880](https://www.ietf.org/archive/id/draft-dekater-scion-dataplane-02.html#RFC5880)] and [[RFC5881](https://www.ietf.org/archive/id/draft-dekater-scion-dataplane-02.html#RFC5881)]). BFD is a protocol intended to detect faults in the bidirectional path between two forwarding engines, with typically very low latency. It operates independently of media, data protocols, and routing protocols. SCION uses the Empty path type, together with OneHopPath path type, to bootstrap BFD within SCION. (For more information on the OneHopPath path type, see [Section 2.2.3.3](https://www.ietf.org/archive/id/draft-dekater-scion-dataplane-02.html#onehop).)\r\n\r\nHowever, we don't say much about how it works.\r\n- How much should be in the draft? (is it necessary to add details, or could we leave it open)?\r\n- Why do routers have to use something like BFD? What do they do with signals from BFD?\r\n- How is BFD on top of SCION working? (currently described in https://docs.scion.org/en/latest/protocols/bfd.html )\r\n",
      "createdAt": "2024-07-22T22:57:51Z",
      "updatedAt": "2024-08-26T11:44:24Z",
      "closedAt": "2024-08-26T11:44:24Z",
      "comments": []
    },
    {
      "number": 38,
      "id": "I_kwDOKYa7786Qf0PK",
      "title": "Anapaya review",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/38",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "oncilla"
      ],
      "labels": [],
      "body": "Following the first wave of ISE feedback, we did quite some work on the dataplane draft. \r\n\r\nCan you provide your feedback on: \r\n\r\n- #68 \r\n- 6.  Handling Link Failures\r\n- 5 SCMP (needed to describe handling link failures)\r\n- Added section on SCION IP Gateway \r\n-  7.  Security Considerations\r\n\r\n\r\n\r\n\r\n[Datatracker diff v03 (mar 2024) / latest](https://author-tools.ietf.org/api/iddiff?doc_1=draft-dekater-scion-controlplane-03&url_2=https://scionassociation.github.io/scion-cp_I-D/draft-dekater-scion-controlplane.txt). If needed, you can change the datatracker version in the diff URL.\r\n[Changelog in the draft](https://scionassociation.github.io/scion-dp_I-D/draft-dekater-scion-dataplane.html#name-change-log) manually updated, includes changes in the future version to be submitted to datatracker\r\n[Changelog github](https://github.com/scionassociation/scion-dp_I-D/releases) (covers up to the past submitted version)\r\n\r\n",
      "createdAt": "2024-07-23T04:59:27Z",
      "updatedAt": "2024-11-12T10:20:21Z",
      "closedAt": "2024-11-12T10:20:21Z",
      "comments": [
        {
          "author": "oncilla",
          "authorAssociation": "COLLABORATOR",
          "body": "could you add the changelog diff link?",
          "createdAt": "2024-10-07T16:57:23Z",
          "updatedAt": "2024-10-07T16:57:23Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Done, I updated the issue above. JFYI as requested by Eliot, we added a \"manual\" changelog to the draft itself in #67, linked above. Github release notes are a bit more detailed than that  ",
          "createdAt": "2024-10-08T07:41:37Z",
          "updatedAt": "2024-10-08T07:41:37Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Hi @oncilla @shitz do you have any further comments on the DP draft? We'll have to submit a new draft by this weekend. ",
          "createdAt": "2024-10-15T08:42:00Z",
          "updatedAt": "2024-10-15T08:42:00Z"
        }
      ]
    },
    {
      "number": 39,
      "id": "I_kwDOKYa7786QkTOn",
      "title": "Add discussion about MTU & fragmentation",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/39",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "knmeynell",
        "jiceatscion"
      ],
      "labels": [
        "enhancement",
        "Prio 1"
      ],
      "body": "> Feedback Harald Alvestrand\r\n> The description of SCION refers to using UDP/IP as the internal substrate inside an AS, and as a framing protocol on inter-AS links. This means that the Internet MTU of 1500 bytes (1200 for IPv6) will be in effect.\r\nPath hops take 12 bytes + a couple of \u201csegment headers\u201d of 16 bytes - which means that a 10-hop, 3-segment path will take 168 bytes for the routing information. This is enough to reduce the MTU significantly, and the MTU will be unpredictable and maybe variable, since the path for a given packet may change dynamically.\r\n(The packet format, like UDP\u2019s, permits 68K-byte packets. However, fragmentation is A Thing.)\r\n\r\nRelated issues: \r\n* CP draft: https://github.com/scionassociation/scion-cp_I-D/issues/57 \r\n* Implementations: https://github.com/scionproto/scion/issues/2608 \r\n\r\nAlso: \r\n- [x] Add discussion about fragmentation\r\n- [x] Adapt this text  in the Common Header  paragraph` The value of the traffic class bits in a received packet or fragment might differ from the value sent by the packet's source. `",
      "createdAt": "2024-07-23T14:58:19Z",
      "updatedAt": "2024-10-03T16:40:08Z",
      "closedAt": "2024-10-03T16:40:08Z",
      "comments": [
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Here's what I think we could say:\r\n\r\nFragmentation:\r\n* At the UDP/SCION layer: no fragmentation ever. Even less than IPV6 (i.e. even the sending host can't fragment); the application must comply with the paths MTU.\r\n* In the underlay network. SCION is agnostic to datagram fragmentation by the underlay UDP layer.  The open source implementation does not change the system defaults regarding fragmentation and MTU discovery (under Linux  MTU discovery is on, UDP fragmentation is off). For inter-AS links, changing this default is the joint decision (not recommended) of the administrators of the two ASes involved. The decision to change this default for intra-AS interfaces is the decision of that AS' administrator.\r\n\r\nMTU:\r\n* SCION assumes that its layer 2 has a minimum MTU of 1232 (1280 - 48, assuming UDP/IPV6 encapsulation as the worst case). SCMP relies on this minimum. UDP/SCION takes advantage on any larger MTU configured.\r\n* The MTU of an entire path is defined as the MIN of the MTUs of the links traversed by that path. The control plane makes those numbers available in segment records.\r\n* SCION assumes that the MTU of a path segment remains correct for the life time of that segment.\r\n* The MTU of each link may be discovered or administratively configured (current practice is for it to be configured). It must be less than or equal to the MTU of the underlying link-layer in either direction.\r\n* Intra-AS network MTUs are a result of the network configuration of each AS and therefore predictable.\r\n* Inter-AS links MTU are normally under the joint control of the administrators of the two ASes involved and therefore equally predictable.\r\n* Although that isn't a normal use case, SCION allows inter-AS links to be routed through multiple IP routers, not necessarily under the control of either AS' administrator. In that case, the link's MTU MUST be configured statically to a conservative value. 1280 is a safe value. The same approach applies to all cases where MTUs cannot be assumed to be stable.\r\n",
          "createdAt": "2024-09-05T10:00:41Z",
          "updatedAt": "2024-09-11T11:23:47Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let me know if the above proposal is reasonable enough to tentatively add it to the draft.",
          "createdAt": "2024-09-17T10:33:37Z",
          "updatedAt": "2024-09-17T10:33:37Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Looks good, thanks a lot for putting together a paragraph out of this! \r\nJust some minor comments: \r\n* SCION assumes that its ~layer 2~ --> underlay ?\r\n* On the last point (multiple ASes between two SCION routers): I'd say this is a special case and I'd not cover it in the draft\r\n\r\n ",
          "createdAt": "2024-09-18T16:56:28Z",
          "updatedAt": "2024-09-18T16:56:28Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Looks good, thanks a lot for putting together a paragraph out of this! Just some minor comments:\r\n> \r\n>     * SCION assumes that its ~layer 2~ --> underlay ?\r\n\r\nIn another issue, we have agreed that using un-encapsulated L2 was a valid scenario. As a result, an inter-AS link doesn't necessarily use an underlay network. From the P-o-V of SCION that is L2 either way. I admit that I have always been unsure how to designate encapsulation and tunneling layers with respect to the upper and lower layers: whatever L3 runs on top of could be called L2, but whatever encapsulates an L2 could be called L3. If there's a solid convention about this, I'll respect it.\r\n\r\n>     * On the last point (multiple ASes between two SCION routers): I'd say this is a special case and I'd not cover it in the draft\r\n\r\nNot \"multiple ASes\"; \"multiple IP routers\". It is true that ASes are supposed to connect at exchanges, with no routing, but we also know it's not the only use case by far. (The drafts, in my opinion, are too far from saying that this is wrong. May be that's what we should change. OTOH, that would be lying on the current state of deployments)\r\n",
          "createdAt": "2024-09-19T09:12:19Z",
          "updatedAt": "2024-09-19T09:12:19Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Regarding L2, maybe we just say lower layer? I am reluctant to use L2, as peple might think this is the MAC layer (which is not in many cases). \r\n\r\n> Not \"multiple ASes\"; \"multiple IP routers\". I\r\n\r\nYou mentioned `multiple IP routers, not necessarily under the control of either AS' administrator`, reading this I understand this is running the SCION link across multiple ASes (e.g. over Internet). Maybe you can just remove this wording and then it becomes clearer that you are just referring to multiple IP hops. Or remove the special case overall, as this is anyways an exception that IMHO should be avoided",
          "createdAt": "2024-09-19T16:03:23Z",
          "updatedAt": "2024-09-19T16:03:23Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok. Will rephrase as you suggested and make a PR.\r\n",
          "createdAt": "2024-09-20T10:36:52Z",
          "updatedAt": "2024-09-20T10:36:52Z"
        }
      ]
    },
    {
      "number": 40,
      "id": "I_kwDOKYa7786RBS5r",
      "title": "Specify SCION-IP Gateways",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/40",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "nicorusti"
      ],
      "labels": [
        "enhancement",
        "Prio 1",
        "needs-discussion"
      ],
      "body": "> Harald Alvestrand (meeting notes 26.07.2024)\r\nDocument SCION-IP gateways: If the goal is to document existing deployment, the gateways must be specified. This could be an additional ISE draft. The overall SCION draft \u201cpackage\u201d must have enough information to make a connection over scion\r\n\r\n- [x] Prepare a description of the SIG (try in terms of functionality rather than how they work)\r\n- [x] Send text to Eliot\r\n- [x] Decide if this needs to be a separate draft (or if it can be a paragraph in one of the other drafts) --> No\r\n- [x] #78\r\n\r\n#### Feedback received:\r\n> Harald Alvestrand \r\nThe payload of a packet can be anything (does not affect SCION operation), but the header contains an integer saying which content it is, with the defined values being \u201cUDP\u201d, \u201cTCP\u201d, and some numbers for internal use. The process for constructing an IP packet from the SCION packet (or vice versa) is not described, but presumably involves mangling checksums - -dataplane describes a \u201cvirtual header\u201d for constructing the checksum of things that require it, which implies that a gateway to non-SCION IP would mangle checksums inside the UDP or TCP packet.\r\n(There are references in -overview to docs describing gateways. However, I can\u2019t see them at the moment.)\r\n\r\n>   My response: \r\nYes, we don\u2019t yet have a draft describing gateways in detail. There was [a presentation ](https://datatracker.ietf.org/meeting/118/materials/slides-118-panrg-operational-aspects-of-scion-00)by my co-author Sam Hitz at PANRG at 119 about it. Essentially gateways run an encapsulation protocol and exchange IP routes among each other. They use a custom protocol for that, so we felt for now it was best to leave this part out and treat gateways as a normal SCION endpoint. \r\nThis checksums is used, for example, by UDP on top of SCION. Gateways encapsulate the whole IP packet, so they don\u2019t mangle UDP/TCP checksums in them. However, the gateway encapsulation protocol itself runs on top of UDP on top of SCION, therefore there is a ckechsum in the encapsulating UDP packet, and this uses the \u201cvirtual header\u201d.\r\n\r\n> Lunch discussion\r\nDocument SCION-IP gateways: If the goal is to document existing deployment, the gateways must be specified. This could be an additional ISE draft. The overall SCION draft \u201cpackage\u201d. The  must have enough information to make a connection over scion\r\n\r\n#### Potential sources: \r\n- [Anapaya Docs](https://docs.anapaya.net/en/latest/edge/configuration/scion-tunneling/#edge-tunneling-sgrp) for SGRP, tunneling, also called \"Prefix discovery\" in open source\r\n- [SCIONproto](https://docs.scion.org/en/latest/sig.html) for SIG framing \r\n- Scion book section  13.3 The SCION\u2013IP Gateway (SIG) \r\n- [component analysis draft](https://www.ietf.org/archive/id/draft-rustignoli-panrg-scion-components-03.txt) section 3.1\r\n- https://github.com/scionproto/scion/issues/2948",
      "createdAt": "2024-07-26T22:05:22Z",
      "updatedAt": "2024-10-16T15:54:40Z",
      "closedAt": "2024-10-16T15:06:39Z",
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "\r\n> On 7 Sep 2024, at 02:16, Harald Alvestrand <harald@alvestrand.no> wrote:\r\n\r\n> I still don't think you have enough info on the IP gateway.\r\n\r\n> In particular - does the IP gateway pair (entry + exit) act like a NAT box, matching the source address in the source domain to the gateway address in the destination domain, or is it an one-way tunnel of unchanged bits?\r\n\r\n> In both cases - where are the IP addresses (or equivalent) carried through the tunnel? As part of the SCION address (as the presence of those forms of address in the endpoint scheme seems to indicate), or as part of the packet?\r\n\r\n> And if the addresses are mapped, who takes care of the payload modifications that any NAT needs to do?\r\n\r\n> Harald\r\n(I still haven't gotten around to reading the -controlplane and -pki drafts,  but I have not forgotten them...)",
          "createdAt": "2024-09-10T09:17:11Z",
          "updatedAt": "2024-09-10T09:17:11Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Feedback Eliot Lear call 3.10.2024\r\n\r\nSIG Description must clarify:\r\n*  how are packets directed to the GW?\r\n* How does GW know where to tunnel? \r\n* What happens at egress?\r\n* (mention multicast left as future work). \r\n\r\nShow fully flashed out config of how to have SCION nodes, a device in the middle, they did this with M-BONE. And the 6 bone to play with IPv6. If you have someone who wants to build an implementation, how can they test that it works and that they can interoperate. \r\nWhat do you have to do if you want to want to add a GW. Show a reference to what you can do (guide how to participate) e.g. to SCIONLab, not docs.scion.org. Goal; meet interop requirement. No Anapaya docs (but could be). Beginning as vendor implementation, intent is to offer to community for further improvement and potential standardization later on.",
          "createdAt": "2024-10-03T14:51:15Z",
          "updatedAt": "2024-10-03T14:51:15Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "For the records, the latest and greatest description for the SIG is in this commit: https://github.com/scionassociation/scion-dp_I-D/commit/148adfb6229f252844a3aa567c82e1ed8da1cbf6 . The text is below. Following a discussion with Eliot, we decided to leave this outside of the scope of this draft.\r\n\r\n```\r\n# Interoperability: SCION IP Gateway {#sig}\r\n\r\nThe SCION IP Gateway (SIG) enables IP packets to be tunneled over SCION to support communication between hosts that do not run a SCION implementation. A SIG acts as a router from the perspective of IP, whilst acting as SCION endpoint from the perspective of the SCION network. It is typically deployed inside the same AS-internal network as its non-SCION hosts, or at the edge of an enterprise network.\r\n\r\nTunneling IP traffic over SCION requires a pair of SIGs and it involves the following steps:\r\n\r\n1. A sender sends an IP packet towards an IP destination.\r\n\r\n2. The IP packet reaches a SIG in the sender\u2019s network via standard IP routing.\r\n\r\n3. Based on the destination IP address, the source (ingress) SIG determines the destination (egress) SIG's ISD-AS endpoint address. To achieve this, SIGs may be pre-configured with a static IP prefix to remote SIG SCION address mappings. Alternatively, multiple SIGs may be configured to speak a dynamic routing protocol between each other. The choice of protocol is left up to implementors and is outside of the scope of this document. Whether an egress SIG accepts or drops traffic from a given ingress SIG is up to the policies of the receiver's operator. The control mechanisms are implementation defined.\r\n\r\n4. The ingress SIG encapsulates the original IP packet within a SCION packet and sends it to the egress SIG. If necessary, the ingress SIG performs SCION path lookups and selects a SCION path to the egress SIG.\r\n\r\n5. The egress SIG receives the SCION packet and decapsulates the original IP packet. It then forwards the packet to the final IP destination using standard IP routing.\r\n\r\n## SIG Framing\r\n\r\nIP packets are encapsulated over SCION/UDP into SIG frames. Whilst in principle, a given pair of SIGs may use any tunneling protocol, existing deployments use the SIG framing as described here. This protocol is designed to:\r\n\r\n- provide independence from the underlying SCION path MTU which can increase and decrease over time.\r\n- provide fast detection of packet loss and subsequent recovery of decapsulation for packets that weren't lost.\r\n- support for multiple streams within a framing session such that independent packet sequences be tunneled in parallel.\r\n\r\nThere may be multiple IP packets in a single SIG frame, and a single IP packet may be split into multiple SIG frames.\r\n\r\nThe ingress SIG initiates unidirectional packet flows with the egress SIG simply by sending the corresponding SIG frames. There is no handshake. The egress SIG, should it accept the traffic, instanciates the necessary resources on-demand to process each flow. Each such flow forms an independent sequence of packets (a stream) ordered by an incrementing sequence number. Between a given SIG ingress/egress pair, a (session ID, stream ID) pair uniquely identifies a stream.\r\n\r\nTo preserve performance, IP packets encapsulated in a single stream SHOULD leave the egress SIG in the order in which they entered it. To that end:\r\n\r\n- The ingress SIG SHOULD encapsulate IP packets that cannot be proven independent (e.g., with the same  IP 6-tuple) in the same stream.\r\n- The ingress SIG SHOULD encapsulate IP packets to a given stream in the order in which they were received.\r\n- The ingress SIG SHOULD send all frames of a given stream over the same SCION path.\r\n- The egress SIG SHOULD reassemble and forward packets from each stream, ordered by frame sequence number and packet within each frame.\r\n\r\nThe session ID part of the (session ID, stream ID) pair is used to indicate traffic priority grouping. The egress SIG MAY dedicate processing resources to each session rather than to each individual stream.\r\n\r\n~~~~\r\n\r\n+-----------------------+\r\n|         SCION         |\r\n+-----------------------+\r\n|          UDP          |\r\n+-----------------------+\r\n|    SIG frame header   |\r\n+-----------------------+\r\n|   SIG frame payload   |\r\n+-----------------------+\r\n\r\n~~~~\r\n{: #figure-28 title=\"SIG framing within a SCION packet\"}\r\n\r\n## SIG Frame Header\r\n\r\n~~~~\r\n\r\n 0                   1                   2                   3\r\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n|     Version   |  Session ID   |            Index              |\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n|         Reserved        |             Stream ID               |\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n|                                                               |\r\n+                       Sequence Number                         +\r\n|                                                               |\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n\r\n~~~~\r\n{: #figure-29 title=\"SIG Frame Header format\"}\r\n\r\n\r\nAll fields within SIG Frame Header are in network byte order.\r\n\r\n- `Version` (8 bits) indicates the SIG framing version. It MUST be set to zero if following this specification.\r\n- `Session ID` (8 bits) identifies a tunneling session between a pair of SIGs.\r\n- `Index` (16 bits) is the byte offset of the first beginning of an IP packet within the payload. If no IP packet starts in the payload, e.g. if the frame contains only the middle or trailing part of an IP packet, the field MUST be set to 0xFFFF.\r\n- `Reserved` (12 bits): it MUST be set to zero.\r\n- `Stream ID` (20 bits), along with the session, it identifies a unique sequence of SIG frames. Frames from the same stream are, on the egress SIG, put into the same reassembly queue. There may be multiple streams per session.\r\n- `Sequence Number` (64 bits) indicates the position of the frame within a stream. Consecutive frames of a given stream have consecutive sequence numbers. IP packets split among multiple frames are re-assembled by concatenating the payloads of consecutive frames.\r\n\r\nA SIG MAY drop frames. Buffering frames received out-of-order by the egress SIG is optional. The egress SIG SHOULD drop frames from a stream if unable to perform the sequence re-assembly.\r\n\r\nThe Session ID and Stream ID are chosen by the sender but the tuple MUST be unique within a session.\r\n\r\n\r\n## SIG Frame Payload\r\n\r\nThe SIG frame payload may contain multiple IPv4 or IPv6 packets, or parts thereof. No other types of packets can be encapsulated and the packets are placed directly after one another with no padding. Handling of multicast is not covered by this specification and it is left as future work.\r\n\r\nSIG uses the IPv4 or IPv6 'Payload Length Field to determine the size of the packet. To make the processing easier, it is REQUIRED that the fixed part of the IP header is in the frame where the IP packet begins. In other words, the initial fragment of an IPv4 packet must be at least 20 bytes long, whilst the initial fragment of an IPv6 packet must be at least 40 bytes long.\r\n\r\n``` ",
          "createdAt": "2024-10-16T15:47:33Z",
          "updatedAt": "2024-10-16T15:47:33Z"
        }
      ]
    },
    {
      "number": 41,
      "id": "I_kwDOKYa7786RBX7K",
      "title": "Clarify Interface IDs & ConsIngress/ConsEgress & Router Alert flags",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/41",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "jiceatscion"
      ],
      "labels": [
        "Prio 2",
        "editorial"
      ],
      "body": "Current text is confusing\r\n\r\n#### TODOs: \r\n- [x] Clarify use of the  ConsEgress Router Alert flag\r\n- [x] ConsIngress and ConsEgress are just instances of interfaces Identifiers, we should make this clearer (e.g. when we define interface IDs). \r\n- [x] ... (see feedback below)\r\n\r\n#### Reviewer feedback\r\n> Harald Alvestrand\r\nEndpoint addresses consist of an AS number, an interface ID, and a \u201cnext protocol\u201d address. This last is presumably only useful at SCION endpoints.\r\n\r\n> My answer:\r\nOne of the fields in a SCION address is the ISD (Isolation Domain) number, not the interface ID. We mention \"a complete SCION address is composed of the <ISD, AS, endpoint address>\u201d in section 1.3.1. The we show the  address header in 2.2.2. If this is too late in the draft, we could add some text earlier to clarify this. Interface IDs, instead, are part of hop fields (interface IDs are in the  the ConsIngress / ConsEgress). Perhaps the confusing fact is that the field is called ConsIngress/Egress. This is because  these fields refer to interface IDs in the direction the link was discovered during path construction (beaconing). \r\n\r\n> Harald Alvestrand\r\n> There\u2019s a weakly described feature (which still gets 16 bits in the header!) called \u201cConsIngress\u201d and \u201cConsEgress\u201d, which says that \u201crouters will do L4 processing\u201d, without calling out what that is - Traceroute is briefly mentioned, but not to a degree that would allow implementation of whatever-it-is-supposed-to-be.\r\n\r\n> Response: \r\nYou are probably referring to the ConsEgress Router Alert flag, right? Thank you for spotting this, the description should be extended. This is actually one bit, we\u2019ll add some explanation on this flag. (I see how the current description is somehow confusing). Besides that, ConsIngress and ConsEgress are just instances of interfaces Identifiers, we probably have to make this clearer. \r\nRegarding traceroute, this is an example of how this might be used (there is a SCON trace route application). As we don\u2019t describe it, I\u2019d remove it. \r\n\r\n> Eliot, 20.07.2024\r\n>   ConsIngress and ConsEgress require a lot more explanation if they're to be included.\r\n\r\n> Arald Alvestrand, 20.07\r\n>  There\u2019s a weakly described feature (which still gets 16 bits in the header!) called \u201cConsIngress\u201d and \u201cConsEgress\u201d, which says that \u201crouters will do L4 processing\u201d, without calling out what that is - Traceroute is briefly mentioned, but not to a degree that would allow implementation of whatever-it-is-supposed-to-be.\r\n\r\nNote: we use naming ConsIngress, ConsEgress because of https://github.com/scionproto/scion/issues/1479 \r\n\r\n",
      "createdAt": "2024-07-26T22:28:49Z",
      "updatedAt": "2024-10-08T12:16:18Z",
      "closedAt": "2024-09-14T10:02:13Z",
      "comments": [
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "While researching traceroute, I wasn't able to figure out what it accomplishes: the path is already determined, link failures would be reported by scmp errors, and ping would be available to provide positive confirmation. So, what's left for traceroute to do? If traceroute is useless (not mentioning we don't really want to describe SCMP messages besides link failures), then so are the router alert flags and the associated behavior. Should we just mark them as reserved for future use and delete all mentions of traceroute (and deprecate that stuff from our code)?\r\n\r\nFrom my naive perspective, it seems that router alert flags were a solution in search of a problem and that traceroute was invented as an example (contrived) of their use.\r\n\r\nTo be fair, the concept that a packet can contain a payload to be processed by the router itself seems potentially useful. Even if traceroute is a poor example. I can imagine remote administration protocols, for example. So, how about we simply state that these flags are there to enable messages destined to the router itself, but that such messages are a future extension. WDYT?\r\n",
          "createdAt": "2024-08-13T10:27:05Z",
          "updatedAt": "2024-08-13T10:36:38Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "> So, what's left for traceroute to do?  \r\n\r\nAFAIK, SCION traceroute is meant to allow the endpoint to be informed of ISD,ASes traversed, because the SCION path only contains a sequence of interface IDs (but not the ISD and AS numbers). \r\n\r\n> Should we just mark them as reserved for future use and delete all mentions of traceroute (and deprecate that stuff from our code)? \r\n\r\nI think router alert flags are there in the deployed protocol, so we cannot remove them. We can leave them there and mention that they are reserved for options that must be processed at each router. \r\n\r\n@oncilla did I get it right? Is there any other critical use of traceroute or router alert flags, that makes them necessary for the current deployment? ",
          "createdAt": "2024-08-21T14:21:51Z",
          "updatedAt": "2024-08-21T14:21:51Z"
        },
        {
          "author": "oncilla",
          "authorAssociation": "COLLABORATOR",
          "body": "Traceroute is an essential SCMP message to discover path health in the current implementation.\r\nBoth the IP-SCION Gateway and scion showpaths rely on it.\r\nWe cannot simply remove it without an appropriate replacements.\r\n\r\nFWIW, I think the readers are a bit confused as they seem to think the router alert flag and the interface IDs are somehow the same thing.\r\n\r\n",
          "createdAt": "2024-08-21T20:45:40Z",
          "updatedAt": "2024-08-21T20:47:18Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "> FWIW, I think the readers are a bit confused as they seem to think the router alert flag and the interface IDs are somehow the same thing.\r\n\r\nYes, this is the main point.\r\n\r\n> Traceroute is an essential SCMP message to discover path health in the current implementation. Both the IP-SCION Gateway and scion showpaths rely on it. We cannot simply remove it without an appropriate replacements.\r\n\r\nThanks for the clarification @oncilla. We are trying to limit the scope of the drafts as much as possible, for now we tried avoiding having to describe in full SIGs and SCMP (which might be another two drafts on their own). So we are trying to strike the right balance to add what is necessary for the data plane draft to be clear and self sufficient. \r\n\r\n \r\n\r\n\r\n",
          "createdAt": "2024-08-22T16:37:21Z",
          "updatedAt": "2024-08-22T16:37:21Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok, in this case, I propose to extend https://github.com/scionassociation/scion-dp_I-D/pull/49 in the following manner:\r\n\r\n* Move SCMP to its own main section.\r\n* Refer to the appropriate subsection of it in the link-failure notification section.\r\n",
          "createdAt": "2024-08-26T09:41:16Z",
          "updatedAt": "2024-08-26T09:41:16Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Still a bit of clarification needed for the two flags.\r\n",
          "createdAt": "2024-08-26T12:40:50Z",
          "updatedAt": "2024-08-26T12:40:50Z"
        }
      ]
    },
    {
      "number": 42,
      "id": "I_kwDOKYa7786RBX8T",
      "title": "Clarify Interface IDs & ConsIngress/ConsEgress",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/42",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "jiceatscion"
      ],
      "labels": [
        "Prio 2",
        "editorial"
      ],
      "body": "Current text is confusing\r\n\r\n#### TODOs: \r\n..\r\n\r\n#### Reviewer feedback\r\n> Harald Alvestrand\r\nEndpoint addresses consist of an AS number, an interface ID, and a \u201cnext protocol\u201d address. This last is presumably only useful at SCION endpoints.\r\n\r\n> My answer:\r\nOne of the fields in a SCION address is the ISD (Isolation Domain) number, not the interface ID. We mention \"a complete SCION address is composed of the <ISD, AS, endpoint address>\u201d in section 1.3.1. The we show the  address header in 2.2.2. If this is too late in the draft, we could add some text earlier to clarify this. Interface IDs, instead, are part of hop fields (interface IDs are in the  the ConsIngress / ConsEgress). Perhaps the confusing fact is that the field is called ConsIngress/Egress. This is because  these fields refer to interface IDs in the direction the link was discovered during path construction (beaconing). \r\n\r\n> Harald Alvestrand\r\n> There\u2019s a weakly described feature (which still gets 16 bits in the header!) called \u201cConsIngress\u201d and \u201cConsEgress\u201d, which says that \u201crouters will do L4 processing\u201d, without calling out what that is - Traceroute is briefly mentioned, but not to a degree that would allow implementation of whatever-it-is-supposed-to-be.\r\n\r\n> Response: \r\nYou are probably referring to the ConsEgress Router Alert flag, right? Thank you for spotting this, the description should be extended. This is actually one bit, we\u2019ll add some explanation on this flag. (I see how the current description is somehow confusing). Besides that, ConsIngress and ConsEgress are just instances of interfaces Identifiers, we probably have to make this clearer. \r\nRegarding traceroute, this is an example of how this might be used (there is a SCON trace route application). As we don\u2019t describe it, I\u2019d remove it. \r\n",
      "createdAt": "2024-07-26T22:28:55Z",
      "updatedAt": "2024-07-30T09:18:22Z",
      "closedAt": "2024-07-30T09:18:22Z",
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "duplicate of #41 ",
          "createdAt": "2024-07-30T09:18:22Z",
          "updatedAt": "2024-07-30T09:18:22Z"
        }
      ]
    },
    {
      "number": 43,
      "id": "I_kwDOKYa7786RBY_r",
      "title": "Clarify claims about communication between IPs",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/43",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "knmeynell"
      ],
      "labels": [
        "Prio 2",
        "editorial"
      ],
      "body": "Claims that SCION allows two hosts with the same IP to talk to each other, or a v4 to talk to a v6, are confusing. \r\n\r\n#### TODOs:\r\n- [x] Reword section 1.3.1 to  make it clear that the two endpoints must both directly and natively connected to SCION to talk to each other.\r\n- ~Remove claim in -overview draft that IPv4 hosts can talk to IPv6 hosts (throws people off)~\r\n- ~Add note in the overview draft that this draft is NOT updated - look at ISE drafts~\r\n- [ ] ping harald\r\n\r\n#### Feedback \r\n> Harald 23.07.2024\r\nThe claim is made that \u201caddressing means that one can communicate between 10.1.1.1 in one AS and 10.1.1.1 in another AS\u201d - but since the IP/SCION mapping is not described, how this would be accomplished is not clear. Possibly it only works if the \u201c10.1.1.1\u201d entity is directly connected as a SCION node, so that the source address of the remote entity doesn\u2019t have to be represented in the destination domain?\r\n\r\n> Response\r\nYes, this claim refers to two \u201cnative\u201d SCION endpoints, meaning that they both run a SCION stack and therefore the SCION Address header would have different  source/destination ISD-AS. Since this refers to traffic between native endpoints, there is not really a mapping. I guess you got confused by the dataplane draft section 1.3.1. We can reword the section to  make it clear that the two endpoints ate both directly connected to SCION. ",
      "createdAt": "2024-07-26T22:34:46Z",
      "updatedAt": "2024-10-10T13:33:51Z",
      "closedAt": "2024-10-09T17:26:15Z",
      "comments": []
    },
    {
      "number": 44,
      "id": "I_kwDOKYa7786RBZd4",
      "title": "Payload integrity discussion - add section in security considerations",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/44",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "jiceatscion"
      ],
      "labels": [
        "enhancement",
        "Prio 2"
      ],
      "body": "  #### Feedback\r\n> Harald 23.07.2024 \r\n> There\u2019s a nice description in the doc on how a man-in-the-middle attack could work; without alternate comms paths between entities, there seems to be no way to protect against those. \r\nHowever, there\u2019s no discussion on preserving the integrity of the payloads; perhaps intentionally, as the gateway process may have to mangle them (by checksum modification, if nothing else).\r\n\r\n> Response\r\nThe reason why we did not include this is that there is a proposal for an experimental extension ([SPAO](https://docs.scion.org/en/latest/protocols/authenticator-option.html)) to authenticate addresses, provide integrity protection for payloads, and replay protection. This is still very experimental and it not used in the production network, so we felt it was best to leave this out. We could add some text to explain why this property is not provided. ",
      "createdAt": "2024-07-26T22:37:32Z",
      "updatedAt": "2024-09-19T17:35:07Z",
      "closedAt": "2024-09-19T17:35:07Z",
      "comments": [
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would propose adding a sub-section of \"On-Path attacks\":\r\n\r\n### Payload modification\r\n\r\nIt is possible for an on-path attacker to modify the payload of a packet. The application layers can easily defend against such an attack without any cooperation by the SCION network. For that reason, payload integrity is not in scope for this specification. Yet, a standard and trusted payload integrity protection mechanism integral to SCION could be desirable. There exists a proposal for an experimental extension to authenticate addresses, provide integrity protection for payloads, and replay protection: [SPAO](https://docs.scion.org/en/latest/protocols/authenticator-option.html) . This is still very experimental and it not used in the production network.",
          "createdAt": "2024-09-17T10:46:04Z",
          "updatedAt": "2024-09-17T10:47:26Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Looks good, feel free to open a PR. \r\n\r\nIn the meanwhile, let me propose some slight rewording: \r\n\r\n> An on-path attacker may modify the payload of a SCION packet. Existing higher-layer protocols can easily defend against such an attack without any cooperation by the SCION network. For that reason, payload integrity is not in scope for this specification. There exists a proposal for an experimental extension to authenticate addresses, provide integrity protection for payloads, and replay protection: [SPAO](https://docs.scion.org/en/latest/protocols/authenticator-option.html) . This is still very experimental and it not used in the production network. ",
          "createdAt": "2024-09-18T17:09:13Z",
          "updatedAt": "2024-09-18T17:09:33Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I adopted your wording with two modifications:\r\n* \"may modify\" -> \"can modify\" (due to the loaded ietf meaning of \"may\"). \r\n* \"There exists\" -> \"However, there exists\".\r\n",
          "createdAt": "2024-09-19T09:27:18Z",
          "updatedAt": "2024-09-19T09:27:18Z"
        }
      ]
    },
    {
      "number": 45,
      "id": "I_kwDOKYa7786RBb6-",
      "title": "General review - forward references ",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/45",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "nicorusti",
        "knmeynell"
      ],
      "labels": [],
      "body": "Go through the draft again and make sure there are no other forward references\r\n\r\nTwin issues:\r\n- https://github.com/scionassociation/scion-cp_I-D/issues/58\r\n- https://github.com/scionassociation/scion-cppki_I-D/issues/36",
      "createdAt": "2024-07-26T22:50:30Z",
      "updatedAt": "2024-10-08T12:16:19Z",
      "closedAt": "2024-08-26T15:57:33Z",
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "@knmeynell [here](https://drive.google.com/file/d/1hNtOtWpkwSnsre7nMYJgDPUHbuVQTasi/view?usp=drive_link) you can find my paper review of version -02",
          "createdAt": "2024-08-06T19:04:49Z",
          "updatedAt": "2024-08-06T19:04:49Z"
        },
        {
          "author": "knmeynell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "After a couple of passes, I didn't find a whole lot of forward references, but have removed or re-written where I did find the odd one. One reference to SPAO is still in 'Security Considerations' because it's probably relevant to the discussion and does reference the 'Complete Guide to SCION'. ",
          "createdAt": "2024-08-15T12:58:53Z",
          "updatedAt": "2024-08-15T12:58:53Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "@knmeynell SPAO has the SCION book as a reference, so I don't think it counts as a forward ref. I think we can resolve this",
          "createdAt": "2024-08-26T15:57:33Z",
          "updatedAt": "2024-08-26T15:57:33Z"
        }
      ]
    },
    {
      "number": 47,
      "id": "I_kwDOKYa7786SQot6",
      "title": "Upper layer checksums",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/47",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "nicorusti"
      ],
      "labels": [
        "Prio 1",
        "needs-discussion",
        "design"
      ],
      "body": "The upper layer checksum raises questions.. However this is used in the current implementation. \r\n\r\n- [x] Can we adapt the text in the draft?\r\n- [ ] Respond to Harald Alvestrand and Mike Mc Bride\r\n\r\n\r\n\r\n> Harald Alvestrand\r\nSCION keeps accommodating the \u201cchecksum across layers 3 and 4\u201d. This was a bad idea in 1975, and keeps being a bad idea now. The idea should (in my opinion) be relegated to gateways and kept out of the core.\r\n\r\n> The payload of a packet can be anything (does not affect SCION operation), but the header contains an integer saying which content it is, with the defined values being \u201cUDP\u201d, \u201cTCP\u201d, and some numbers for internal use. The process for constructing an IP packet from the SCION packet (or vice versa) is not described, but presumably involves mangling checksums - -dataplane describes a \u201cvirtual header\u201d for constructing the checksum of things that require it, which implies that a gateway to non-SCION IP would mangle checksums inside the UDP or TCP packet.\r\n(There are references in -overview to docs des \r\n\r\n>  Mike McBride'\u00a0<mmcbride7@gmail.com>\r\nI discussed potential scion checksum issues (like why have them) with Eliot and understand that they\u2019ve been discussed with scion authors so won\u2019t get into that.\r\n \r\n \r\n ",
      "createdAt": "2024-08-07T16:00:48Z",
      "updatedAt": "2024-10-09T20:29:42Z",
      "closedAt": "2024-10-09T20:29:42Z",
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Discussion Eliot 3.10.2024: \r\n> (UDP/SCION) \u2192 Add a note that this has to not be done in potential future change.. This point needs to be re-evaluated in the future. ",
          "createdAt": "2024-10-03T14:51:46Z",
          "updatedAt": "2024-10-03T14:51:46Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "I_kwDOKYa7786SQuEW",
      "title": "Clarify that document does not relate to previous IETF work",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/48",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "knmeynell"
      ],
      "labels": [
        "enhancement",
        "Prio 2"
      ],
      "body": "We should add somewhere a sentence mentioning that the protocol was developed outside IETF for a while (ETH Zurich, Anapaya Systems, etc.), and that these document are meant to document the existing deployment. \r\n\r\n- [ ] repeat for all three drafts\r\n\r\n\r\n> On 7 Aug 2024, at 17:36, Independent Submissions Editor (Eliot Lear) <rfc-ise@rfc-editor.org> wrote:\r\n'Mike McBride' [<mmcbride7@gmail.com>](mailto:mmcbride7@gmail.com) \r\nE. Does the document make clear upfront how the specification does or does not relate to past or current IETF activities?\r\n \r\n> No. That would be helpful including, perhaps, why they are individual submissions. Since SR seems to be taking the world by storm, it would perhaps help to explain (even briefly) how scion takes intradomain SR to the next level of a secure interdomain solution. But that might be better for the panrg scion overview document and not one of these ise documents. The current documents focus on BGP limitations which is fair.\r\nGood idea, we could add somewhere a sentence mentioning that the protocol was developed outside IETF for a while (ETH Zurich, Anapaya Systems, etc.), and that these document are meant to document the existing deployment. ",
      "createdAt": "2024-08-07T16:13:16Z",
      "updatedAt": "2024-10-08T12:16:58Z",
      "closedAt": "2024-08-14T19:15:09Z",
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "@knmeynell maybe you could have a go at this?",
          "createdAt": "2024-08-12T10:35:30Z",
          "updatedAt": "2024-08-12T10:35:30Z"
        },
        {
          "author": "knmeynell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Added reference in Introduction section.",
          "createdAt": "2024-08-14T19:15:09Z",
          "updatedAt": "2024-08-14T19:15:09Z"
        }
      ]
    },
    {
      "number": 52,
      "id": "I_kwDOKYa7786UISMk",
      "title": "Clarify wether routers perform checks on segment types (up/down/core)",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/52",
      "state": "OPEN",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "question",
        "Prio 3"
      ],
      "body": "In section 1.4 we write: \r\n\r\n> The type of segment is known to the endpoint but is not visible\r\nis the path header of data packets. **Therefore, a SCION router needs\r\nto explicitly verify that these rules were followed correctly.**\r\n\r\nthis sentence actually comes from the book section \"5.5 Path Construction (Segment Combinations)\". \r\n\r\n\r\nWe then describe checks at routers in 4.2.2.   Processing at Routers and there is no mention that routers verify any of the rules in 1.4. \r\n\r\n@jiceatscion do you know if routers do any checks at all? If not, we should just remove the second sentence I guess.",
      "createdAt": "2024-08-25T11:42:57Z",
      "updatedAt": "2024-11-03T15:02:03Z",
      "closedAt": null,
      "comments": [
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If my reading of the code is correct, these checks are implemented. Albeit\r\nnot exactly mapping 1:1 with how the rules are written:\r\nThere is no explicit check that the first segment is up, the second core,\r\nand the third is down. Instead, there is a check on each segment change\r\nthat the ingress links are either:\r\nchild to core or core to child or child to child. Without a segment change,\r\nthe code also rejects valley-use of peering-links or hair-pin segments. I think that ends-up\r\nenforcing the rules since any rule-breaking path would end-up containing a\r\nsegment change that fails those checks. Code here:\r\nhttps://github.com/scionproto/scion/blob/4c929f6b440c568663b4194c125df15cad544bb4/router/dataplane.go#L1552\r\n\r\n\r\nOn Sun, Aug 25, 2024 at 1:43\u202fPM Nicola Rustignoli ***@***.***>\r\nwrote:\r\n\r\n> In section 1.4 we write:\r\n>\r\n> The type of segment is known to the endpoint but is not visible\r\n> is the path header of data packets.\r\n> *Therefore, a SCION router needs to explicitly verify that these rules\r\n> were followed correctly.*\r\n>\r\n> this sentence actually comes from the book section \"5.5 Path Construction\r\n> (Segment Combinations)\".\r\n>\r\n> We then describe checks at routers in 4.2.2. Processing at Routers and\r\n> there is no mention that routers verify any of the rules in 1.4.\r\n>\r\n> @jiceatscion <https://github.com/jiceatscion> do you know if routers do\r\n> any checks at all?\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/scionassociation/scion-dp_I-D/issues/52>, or\r\n> unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/BBLEYOBP5XUSMQ3SRWJ2AEDZTG7NNAVCNFSM6AAAAABNCO5KKCVHI2DSMVQWIX3LMV43ASLTON2WKOZSGQ4DKMJZHE3DKMQ>\r\n> .\r\n> You are receiving this because you were mentioned.Message ID:\r\n> ***@***.***>\r\n>\r\n\r\n\r\n-- \r\n\r\nJEAN-CHRISTOPHE HUGLY\r\n\r\nSoftware Engineer\r\n\r\n\r\n +41 79 455 68 69\r\n***@***.*** ***@***.***>\r\n scion.org <http://www.scion.org/>\r\n SCION Association <https://www.linkedin.com/company/scion-association/>\r\n\r\n\r\n<https://www.scion.org/>\r\n",
          "createdAt": "2024-08-26T09:03:26Z",
          "updatedAt": "2024-08-26T09:05:49Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "I proposed #61 based on your inputs, feel free to review and modify ",
          "createdAt": "2024-08-30T14:24:34Z",
          "updatedAt": "2024-08-30T14:24:34Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "I_kwDOKYa7786UIVFZ",
      "title": "Make header field lengths and descriptions consistent",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/53",
      "state": "OPEN",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "needs-discussion",
        "editorial",
        "final-polish"
      ],
      "body": "We describe header fields and their lengths in various ways, for example: \r\n* `FlowID`: This 20-bit field \r\n* `PayloadLen`: Specifies the length of the payload in bytes. The payload includes (SCION) extension headers and the L4 payload. This field is 16 bits long, supporting a maximum payload size of 65'535 bytes.\r\n* Sometimes field length is missing and it is only inferrable from a figure\r\n\r\nWe should switch to something more consistent. \r\n \r\nIdeas: \r\n* `FieldName` (xx bits): field description\r\n* Define and use a custom format, like RFC9000 (QUIC): \r\n```\r\n   Example Structure {\r\n     One-bit Field (1),\r\n     7-bit Field with Fixed Value (7) = 61,\r\n     Field with Variable-Length Integer (i),\r\n     Arbitrary-Length Field (..),\r\n     Variable-Length Field (8..24),\r\n     Field With Minimum Length (16..),\r\n     Field With Maximum Length (..128),\r\n     [Optional Field (64)],\r\n     Repeated Field (8) ...,\r\n   }\r\n  ```\r\n\r\nI'd ask Eliot for recommendations before doing anything, so I keep this issue with low prio\r\n",
      "createdAt": "2024-08-25T12:06:31Z",
      "updatedAt": "2024-10-08T09:28:35Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 54,
      "id": "I_kwDOKYa7786UIW05",
      "title": "FlowID / IPv6 Flow Label",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/54",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "jiceatscion"
      ],
      "labels": [
        "Prio 3"
      ],
      "body": "IMHO use of the `FlowID` field is underspecified in the draft. This is all we say:\r\n> - `FlowID`: This 20-bit field labels sequences of packets to be treated in the network as a single flow. Sources MUST set this field.\r\n \r\n Context: \r\nin https://github.com/scionproto/scion/issues/3714 @shitz says: \r\n> Note, the QoS and FlowID fields where moved to the first line of the common header. This is to be in line with the IPv6 header from which we borrow the specifications of these two fields.\r\n \r\n I have some questions: \r\n*  What value should the source use and why?\r\n* Is this the same as IPv6 Flow Labels? If yes, shall we just use the same naming  (Flow ID --> Flow Label)?\r\n*  Can we refer to the rules for IPv6 FLow Labels (e.g. [rfc2460](https://datatracker.ietf.org/doc/html/rfc2460) section 6 )?\r\n\r\n@oncilla do you have some background on this? ",
      "createdAt": "2024-08-25T12:23:01Z",
      "updatedAt": "2024-10-08T12:16:19Z",
      "closedAt": "2024-09-14T10:04:24Z",
      "comments": [
        {
          "author": "oncilla",
          "authorAssociation": "COLLABORATOR",
          "body": "> What value should the source use and why?\r\n\r\nA random value per flow of traffic that the source creates.\r\n\r\nThe exact mechanism to choose such a value is protocol dependent.\r\nE.g., QUIC has some guidance: https://datatracker.ietf.org/doc/html/rfc9000#section-9.7\r\n\r\nIn general, I think we should define something similar to https://datatracker.ietf.org/doc/html/rfc6437\r\nand the source should be compliant with it.\r\n\r\n> Is this the same as IPv6 Flow Labels? If yes, shall we just use the same naming (Flow ID --> Flow Label)?\r\n\r\nIt is yes, and we can rename if that makes things easier, IMO.\r\n\r\n> Can we refer to the rules for IPv6 FLow Labels (e.g. [rfc2460](https://datatracker.ietf.org/doc/html/rfc2460) section 6 )?\r\n\r\nI would rather refer to https://datatracker.ietf.org/doc/html/rfc6437\r\n",
          "createdAt": "2024-08-26T08:52:00Z",
          "updatedAt": "2024-08-26T08:52:00Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Thanks a lot for the clarifications! So we can add a reference to [rfc6437](https://datatracker.ietf.org/doc/html/rfc6437), and in this case I'll also reuse the name \"Flow Label\", it will be clearer given the direct reference to the RFC.\r\n\r\n",
          "createdAt": "2024-08-30T14:48:04Z",
          "updatedAt": "2024-08-30T14:48:04Z"
        }
      ]
    },
    {
      "number": 55,
      "id": "I_kwDOKYa7786UIn1h",
      "title": "Life of a packet: is L2 link possible?",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/55",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "jiceatscion"
      ],
      "labels": [
        "question",
        "Prio 2"
      ],
      "body": "In 3. Life of a SCION Data Packet we have a L2 link between R1, R2. Is this something that comes from the book or is this actually possible today? Can any of the implementations actually support this?\r\n\r\n\r\nI feel there are some missing pieces: \r\n* We'd need an [Assigned Protocol Number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) that can be used by L2\r\n* Is there any need for a L2 discovery mechanism?\r\n\r\n@jiceatscion \r\n\r\nphrasing to be adjusted: \r\n\r\n```\r\n*Note:* Although technically there is no need for a UDP/IP\r\n      underlay if two routers are directly connected, the SCION\r\n      implementation always uses a UDP/IP underlay in practice.  This is\r\n      to enable a common interface for all routers.\r\n  ```\r\n",
      "createdAt": "2024-08-25T14:15:37Z",
      "updatedAt": "2024-10-08T12:16:20Z",
      "closedAt": "2024-09-14T14:40:28Z",
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "@jiceatscion confirmed he has not heard of instances of this. I think we can remove L2 from the text.",
          "createdAt": "2024-08-26T12:01:53Z",
          "updatedAt": "2024-08-26T12:01:53Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For good measure I forwarded that question to the community; just in case someone has been toying with that.\r\n",
          "createdAt": "2024-09-05T11:33:30Z",
          "updatedAt": "2024-09-05T11:33:30Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> * Is there any need for a L2 discovery mechanism?\r\n\r\nI suppose it is not needed. The inter-as links are manually configured anyway. So, we would use layer2 addresses directly in the config. I guess some discovery protocol would allow to use only the ISD/AS in the link configs, thus avoiding the reliance on a somewhat inconstant MAC address. Broadcasting *any* empty path packet (BFD packet, say) would probably do the trick. All-in-all it looks like an easy thing to try.",
          "createdAt": "2024-09-05T11:43:08Z",
          "updatedAt": "2024-09-05T11:43:08Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So, I just heard from Jelte Van Bommel at netsec. They have done that, using MPLS as their L2. He said, ethernet would work all the same. So.... may be we need to say something about that in the drafts.\r\n\r\nExplanations from Jelte:\r\n\r\n> It's based on the opensource implementation yes. The code for handling the raw sockets is a bit of work, it's all syscalls, but the interface I have for it is close to the interface for the regular IP/UDP BatchConn, so quite easy to drop in. Currently ~ +1.6k loc. We kept the existing ip/udp underlay as well, so there's definitely some duplicated code (you could build it on top of the raw underlay, but you lose some hw optimization). The only \"issues\" are that when sending out a packet you would now need to know the dst l2 addr, rather than IP and you don't have arp, so this information has to go to in some sort of config (we just keep a yaml file). I don't know about the performance yet\r\n\r\n\r\nRegarding protocol numbers, that's not IANA. For Ethernet it'd be \"IEEE Registration Authority\". No shortage of unused Ethertypes. Since this is for use in a point-to-point manner, a local convention is all it takes anyway.\r\n\r\nMy conclusion:\r\nI don't see anything in-there that contradicts the spec. I think we should leave the suggestion in the draft. It's a good thing to highlight IP-free inter-as links. It makes the benefits and usage-pattern of SCION a lot clearer.\r\n",
          "createdAt": "2024-09-05T11:56:53Z",
          "updatedAt": "2024-09-06T10:16:43Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "I agree, we should mention that the other side L2 address needs to be externally configured (as otherwise an existing L2 discovery mechanism such as ARP would need to be modified). Let me think about wether we need to make any changes in the text..",
          "createdAt": "2024-09-10T08:53:06Z",
          "updatedAt": "2024-09-10T08:58:17Z"
        }
      ]
    },
    {
      "number": 56,
      "id": "I_kwDOKYa7786UI6E8",
      "title": "Peering links clarifications",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/56",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "Prio 1",
        "needs-discussion",
        "design"
      ],
      "body": "We currently say that peering links are only possible if one of the two ASes is not core, but there is an open discussion. \r\n\r\n- [x] Clarify wether peering links between core ASes are possible following https://github.com/scionproto/scion/issues/4484\r\n- [x] We might need to say more explicitly how a router can determine whether the current hop is a peering hop. We now only mention this in \"Steps at Egress Border Router\" and I feel text is not too clear: ` This would be the case if the current Hop Field is the *first* Hop Field of the segment, `",
      "createdAt": "2024-08-25T16:29:19Z",
      "updatedAt": "2024-10-08T12:16:20Z",
      "closedAt": "2024-09-14T14:36:52Z",
      "comments": []
    },
    {
      "number": 66,
      "id": "I_kwDOKYa7786Y18xM",
      "title": "Add changelog in appendix",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/66",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "nicorusti",
        "knmeynell"
      ],
      "labels": [
        "Prio 1"
      ],
      "body": "",
      "createdAt": "2024-10-03T14:55:24Z",
      "updatedAt": "2024-10-08T07:38:45Z",
      "closedAt": "2024-10-08T07:38:45Z",
      "comments": []
    },
    {
      "number": 73,
      "id": "I_kwDOKYa7786Zsd24",
      "title": "Remove mention of AS in multiple ISDs",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/73",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "nicorusti"
      ],
      "labels": [
        "Prio 1"
      ],
      "body": "From Harald https://github.com/scionassociation/standards/issues/105 \r\n> A couple of things are described either very briefly or inconsistently - for instance, the claim is made that \u201cone AS can be in multiple ISDs\u201d - yet the addressing consists of a 16 bit ISD number and a 48 bit AS number - it would seem that one AS in multiple ISDs would have to operate as if it was two ASes.\r\n\r\n```\r\n      the up and down segments do not need to originate from the same\r\n      core AS and can even be in different ISDs (if the AS at the\r\n      intersection is part of multiple ISDs).\r\n```\r\n\r\nBackground on this: https://github.com/scionproto/scion/issues/4293 ",
      "createdAt": "2024-10-10T11:32:20Z",
      "updatedAt": "2024-10-15T10:15:46Z",
      "closedAt": "2024-10-15T10:15:45Z",
      "comments": []
    },
    {
      "number": 77,
      "id": "I_kwDOKYa7786aeVBf",
      "title": "Add header overview figure in intro ",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/77",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "nicorusti",
        "knmeynell"
      ],
      "labels": [
        "enhancement"
      ],
      "body": "Following meeting with Eliot/Brian, we should have an overview of where SCION sits in the stack, like this\r\n<img width=\"224\" alt=\"Screenshot 2024-10-16 at 13 51 12\" src=\"https://github.com/user-attachments/assets/3970a060-dcb2-4eb7-aa80-733371049deb\">\r\n",
      "createdAt": "2024-10-16T11:51:22Z",
      "updatedAt": "2024-10-17T13:52:50Z",
      "closedAt": "2024-10-17T13:52:50Z",
      "comments": []
    },
    {
      "number": 78,
      "id": "I_kwDOKYa7786ag4iD",
      "title": "Remove SIG description from the draft",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/78",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "knmeynell"
      ],
      "labels": [],
      "body": "IP Tunneling over SCION is a SCION application from a DP perspective. It is out of scope of this draft",
      "createdAt": "2024-10-16T15:52:05Z",
      "updatedAt": "2024-10-18T13:18:12Z",
      "closedAt": "2024-10-18T13:18:12Z",
      "comments": []
    },
    {
      "number": 84,
      "id": "I_kwDOKYa7786dNYZS",
      "title": "Move SCMP to CP draft",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/84",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "knmeynell",
        "jiceatscion"
      ],
      "labels": [
        "Prio 1",
        "editorial"
      ],
      "body": "We went through the DP draft with Eliot at IETF121. He was overall positive, but mentioned that SCMP is a CP topic and (for now) move it to the CP\r\n\r\nIdeas: \r\n- [x] IS SCMP used anywhere by the control service? (@jiceatscion )\r\n- SCMP is an additional signaling mechanism between endpoints and SCION routers (?). It could be a new section before security considerations in the CP draft\r\n- [x] Add SCMP to the definitions in the CP draft\r\n- [x] Add cross references from DP (handling link failures) to the CP draft\r\n- [x] Clarify path revocation #89 \r\n",
      "createdAt": "2024-11-06T09:37:40Z",
      "updatedAt": "2024-12-24T11:56:42Z",
      "closedAt": "2024-12-24T11:56:42Z",
      "comments": [
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'll do the move, as I have a small fix to add to the DP anyway. Kevin or I can do a second pass to attend to the breadcrumbs",
          "createdAt": "2024-11-12T11:01:59Z",
          "updatedAt": "2024-11-12T11:01:59Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Is SCMP used by the CS?:\r\n* Yes!\r\n* https://github.com/scionproto/scion/blob/dd852aa7a8e6eb99cb677851a7c55eb33bf64cb2/control/cmd/control/main.go#L217\r\n* Link-down messages are used to revoke segments.\r\n* The public goes \"Ooooo\"\r\n \r\n\r\n",
          "createdAt": "2024-11-12T13:41:43Z",
          "updatedAt": "2024-11-12T13:41:43Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Move done per the PR The cross-referencing probably needs some more work.\r\n",
          "createdAt": "2024-11-12T13:42:37Z",
          "updatedAt": "2024-11-12T13:42:37Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "@jiceatscion  is  the CP really revoking paths based on SCMP? I thought this was not the case since the 2018 redesign.\r\n\r\nI feel (after merging a PR, sigh!) that  there are still some open points:\r\n- [ ]  Right now we have a section about Handling Link Failures in the DP but not in the CP. Shall we move it to the CP (but then we break the flow, as we talk about BFD in the DP)\r\n- [ ] This wording in the CP might have to be updated if we include revocation (I'd rather not): \r\n  > Note that link removal is not part of path discovery in SCION. For scheduled removal of links, operators let path segments expire. On link failures, endpoints route around the failed link by switching to different paths in the data plane. \r\n\r\n",
          "createdAt": "2024-12-02T17:32:24Z",
          "updatedAt": "2024-12-02T17:32:24Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So, after some painful reverse engineering. It seems that these messages\r\nare occasionally used to create negative cache entries in some places:\r\nWithin the control service (when forwarding segment requests to another CS)\r\nand within the daemon for the same kind of reason. I guess the fact that\r\nthe API is called RevocationHandler and the method is called Revoke is all\r\na bit misleading but not entirely false... A negative cache is just a very\r\nprivate revocation.\r\n\r\n\r\nOn Mon, Dec 2, 2024 at 6:32\u202fPM Nicola Rustignoli ***@***.***>\r\nwrote:\r\n\r\n> @jiceatscion <https://github.com/jiceatscion> is the CP really revoking\r\n> paths based on SCMP? I thought this was not the case since the 2018\r\n> redesign.\r\n>\r\n> I feel (after merging a PR, sigh!) that there are still some open points:\r\n>\r\n>    - Right now we have a section about Handling Link Failures in the DP\r\n>    but not in the CP. Shall we move it to the CP (but then we break the flow,\r\n>    as we talk about BFD in the DP)\r\n>    - This wording in the CP might have to be updated if we include\r\n>    revocation (I'd rather not):\r\n>\r\n>    Note that link removal is not part of path discovery in SCION. For\r\n>    scheduled removal of links, operators let path segments expire. On link\r\n>    failures, endpoints route around the failed link by switching to different\r\n>    paths in the data plane.\r\n>\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/scionassociation/scion-dp_I-D/issues/84#issuecomment-2512240156>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/BBLEYOAXZCOMTCULXRHOIND2DSKT7AVCNFSM6AAAAABRIMYWKSVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDKMJSGI2DAMJVGY>\r\n> .\r\n> You are receiving this because you were mentioned.Message ID:\r\n> ***@***.***>\r\n>\r\n\r\n\r\n-- \r\n\r\nJEAN-CHRISTOPHE HUGLY\r\n\r\nSoftware Engineer\r\n\r\n\r\n +41 79 455 68 69\r\n***@***.*** ***@***.***>\r\n scion.org <http://www.scion.org/>\r\n SCION Association <https://www.linkedin.com/company/scion-association/>\r\n\r\n\r\n<https://www.scion.org/>\r\n",
          "createdAt": "2024-12-16T16:55:00Z",
          "updatedAt": "2024-12-16T16:55:00Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would not remove anything from the \"handling link failures\" section in the DP. What it describes is the role that router plays and nothing more. Yes the router sends an SCMP message. We can't pretend it doesn't just because SCMP is described in the CP, can we?\r\n\r\nRegarding the the wording about link removal: We don't actually speak of revocation. We could (should?) speak about negative caching and that would still not mean link removal.\r\n\r\nLet me know if you think we still need to make changes. I think not.\r\n",
          "createdAt": "2024-12-16T17:06:52Z",
          "updatedAt": "2024-12-16T17:06:52Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": ">    In SCION, an intermediate router cannot change the path followed by a\r\n   packet, only the source endpoint can chose a different path.\r\n   Therefore, to enable fast recovery, a router SHOULD signal forwarding\r\n   failures to the source, via a SCMP notification (Section 6.5).  This\r\n   allows the source endpoint to quickly switch to a different path.\r\n   **It is RECOMMENDED that the source endpoint keeps a short-lived cache for the broken path to avoid a flood of retries. Current implementations use a time of 1s.** (TODO check)",
          "createdAt": "2024-12-17T10:15:46Z",
          "updatedAt": "2024-12-17T10:15:46Z"
        }
      ]
    },
    {
      "number": 85,
      "id": "I_kwDOKYa7786dnq3j",
      "title": "Add external reference to SIG",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/85",
      "state": "CLOSED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [
        "jiceatscion"
      ],
      "labels": [
        "Prio 1"
      ],
      "body": "- [x] Complete https://github.com/scionproto/scion/pull/4641 \r\n- [x] Add an informative reference in CP draft\r\n- [ ] Discuss with Eliot (at 121 he mentioned he would first talk to Harald about this)",
      "createdAt": "2024-11-08T15:48:46Z",
      "updatedAt": "2024-12-24T11:55:32Z",
      "closedAt": "2024-12-24T11:55:32Z",
      "comments": [
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> * [ ]  Complete [doc: improve the SIG doc with the text from the ietf drafts scionproto/scion#4641](https://github.com/scionproto/scion/pull/4641)\r\n\r\nSam has explained. I have updated the text. I think that is ready to commit. After which I can take care of the second point.\r\n",
          "createdAt": "2024-12-19T17:41:40Z",
          "updatedAt": "2024-12-19T17:41:40Z"
        }
      ]
    },
    {
      "number": 86,
      "id": "I_kwDOKYa7786eEFEL",
      "title": "hopfield expiration: the calculation is wrong",
      "url": "https://github.com/scionassociation/scion-dp_I-D/issues/86",
      "state": "CLOSED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "jiceatscion"
      ],
      "labels": [],
      "body": "The formula for the absolute expiration time of a hop field is wrong. It implies that the duration unit is a 256th of an hour. In reality it is a 256th of a day. We also do not actually describe the unit; we just throw it in the formula.\r\n",
      "createdAt": "2024-11-12T11:17:06Z",
      "updatedAt": "2024-12-16T17:12:08Z",
      "closedAt": "2024-12-16T17:12:08Z",
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOKYa7785hbfIj",
      "title": "Add Security Considerations Section",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/1",
      "state": "MERGED",
      "author": "cdekater",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-12-07T14:32:44Z",
      "updatedAt": "2024-05-14T14:41:46Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "2222b66d7850fee27619305e8c195c6bbaa7abd6",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "cdk-security-considerations-dp",
      "headRefOid": "78db4ae551c224ede6472b736fb3e2d769b722d5",
      "closedAt": "2024-03-04T13:42:35Z",
      "mergedAt": "2024-03-04T13:42:35Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "84fd87bdc6eeef1dc1a044fab9d05b002c944e8c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7785phfS-",
          "commit": {
            "abbreviatedOid": "55e14b7"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "...assuming typo is fixed.",
          "createdAt": "2023-12-07T15:09:40Z",
          "updatedAt": "2023-12-07T15:10:25Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "\"tyoes\" -> \"types\"\r\n",
              "createdAt": "2023-12-07T15:09:40Z",
              "updatedAt": "2023-12-07T15:10:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785s_qZH",
          "commit": {
            "abbreviatedOid": "5a81cae"
          },
          "author": "knmeynell",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-18T03:07:11Z",
          "updatedAt": "2024-01-18T03:17:16Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "```suggestion\r\nA central property of the SCION path-aware data plane is path authorization. Path authorization guarantees that data packets always traverse the network along path segments authorized in the control plane by all on-path ASes. This section discusses how an adversary may attempt to violate the path-authorization property, as well as SCION's answers to these attacks. The following attacks are imaginable:\r\n```",
              "createdAt": "2024-01-18T03:07:11Z",
              "updatedAt": "2024-01-18T03:17:16Z"
            },
            {
              "originalPosition": 63,
              "body": "Is 'crack' a better work than 'break' here (and further down the text)?",
              "createdAt": "2024-01-18T03:09:25Z",
              "updatedAt": "2024-01-18T03:17:16Z"
            },
            {
              "originalPosition": 122,
              "body": "```suggestion\r\nAn off-path adversary is located outside of the path between source endpoint and destination endpoint. In SCION, the source endpoint selects the forwarding path in the control plane, and includes it in the header of the data packet to be forwarded. This limits the abilities of an off-path adversary to influence the forwarding in the data plane. The adversary can merely attempt to disrupt the connectivity of the chosen path and force the source endpoint to select a new path. One way to do this is by flooding a link on the path with excessive traffic; that is, performing a volumetric denial of service attack. However, this does not stop the data forwarding: As SCION supports multipath, it is still possible to switch to another, non-congested path. Only in the case of a disruptive last-mile link for which no alternative exists, the data forwarding will be severely frustrated.\r\n```",
              "createdAt": "2024-01-18T03:15:17Z",
              "updatedAt": "2024-01-18T03:17:16Z"
            },
            {
              "originalPosition": 124,
              "body": "```suggestion\r\nSCION also provides protection against so-called reflection-based attacks. Here, the adversary sends high amounts of request packets to a server, but forges the source address of the packets by replacing its own address with the address of the victim. As servers are unable to distinguish legitimate from spoofed requests, they reply directly to the victim, thus exhausting the connection to the victim. In SCION, however, packets contain the path in their packer header, and response packets are simply returned along this contained path to the actual sender. SCION thus prevents from this kind of DoS attacks.\r\n```",
              "createdAt": "2024-01-18T03:15:52Z",
              "updatedAt": "2024-01-18T03:17:16Z"
            },
            {
              "originalPosition": 126,
              "body": "```suggestion\r\n**Note** that SCION does not protect against two other types of DoS attacks, namely transport protocol attacks and application layer attacks. In the case of a transport protocol attack, the adversary opens a large number of connections in order to exhaust resources on the target server. If an adversary performs an application layer attack, it overloads or crashes the target application with a large volume of, or specially crafted application-layer requests such as HTTP floods. As these attacks take place in the transport layer or application layer rather than the network layer, they are out of SCION's scope.\r\n```",
              "createdAt": "2024-01-18T03:17:00Z",
              "updatedAt": "2024-01-18T03:17:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785xb9tx",
          "commit": {
            "abbreviatedOid": "5a81cae"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T10:42:38Z",
          "updatedAt": "2024-02-27T10:42:38Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "I'd say \"crack the underlying MAC algorithm\"",
              "createdAt": "2024-02-27T10:42:38Z",
              "updatedAt": "2024-02-27T10:42:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785xb-dF",
          "commit": {
            "abbreviatedOid": "5a81cae"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T10:44:07Z",
          "updatedAt": "2024-02-27T10:44:07Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "```suggestion\r\nHop fields are protected with MACs. To be able to craft and misuse unauthorized hop fields, an adversary must therefore either determine the MAC's key or crack the underlying MAC algorithm.\r\n```",
              "createdAt": "2024-02-27T10:44:07Z",
              "updatedAt": "2024-02-27T10:44:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785xcnYK",
          "commit": {
            "abbreviatedOid": "d65f8c5"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T12:10:17Z",
          "updatedAt": "2024-02-27T12:10:17Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "IN this draft we don't say much about the AS forwarding key. We don't say that the key should be 128 bit, and we also don't explain what the assumptions and threat model is (e.g. that  the key is shared across all routers within an AS). We should clarify this.\r\nAlso, we don't describe how the key is rotated",
              "createdAt": "2024-02-27T12:10:17Z",
              "updatedAt": "2024-02-27T12:10:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785xc3U0",
          "commit": {
            "abbreviatedOid": "d65f8c5"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T12:42:19Z",
          "updatedAt": "2024-02-27T12:42:19Z",
          "comments": [
            {
              "originalPosition": 110,
              "body": "Is this just the wormhole attack, as described in the CP draft?",
              "createdAt": "2024-02-27T12:42:19Z",
              "updatedAt": "2024-02-27T12:42:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785xc5Fz",
          "commit": {
            "abbreviatedOid": "d65f8c5"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T12:45:47Z",
          "updatedAt": "2024-02-27T12:45:47Z",
          "comments": [
            {
              "originalPosition": 110,
              "body": "```suggestion\r\nMoreover, packet integrity protection is not enough if there are two colluding adversaries on the path. These colluding adversaries can forward the packet between them using a different path than selected by the source endpoint: The first on-path attacker remodels the packet header arbitrarily, and the second on-path attacker changes the path back to the original source-selected path, such that the integrity check by the destination endpoint succeeds. To prevent this attack and to defend against multiple on-path adversaries in general, proof of transit is required (which is offered by an experimental extension).\r\n```",
              "createdAt": "2024-02-27T12:45:47Z",
              "updatedAt": "2024-02-27T12:45:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785xp7hE",
          "commit": {
            "abbreviatedOid": "d65f8c5"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-28T17:09:55Z",
          "updatedAt": "2024-02-28T17:09:55Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "Partially clarifies on Slack.  @matzf we still need to clarify whether the current implementation could rotate the key ([as two  keys](https://docs.scion.org/en/latest/manuals/control.html#keys) can be configured at the same time). ",
              "createdAt": "2024-02-28T17:09:55Z",
              "updatedAt": "2024-02-28T17:09:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785xp9jg",
          "commit": {
            "abbreviatedOid": "ad1a6f5"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-28T17:14:10Z",
          "updatedAt": "2024-02-28T17:14:10Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "```suggestion\r\nAn adversary could try to manipulate the timestamp, in order to modify the validity period of the hop fields within a path segment. However, SCION offers a protection against this kind of attack: As both the timestamp and the expiry time build the input for the calculation of a hop field's MAC, an unauthorized change of the timestamp will invalidate the MAC, and will therefore be detected and render the hop field unusable for forwarding.\r\n```\r\nCorrect @matzf ?",
              "createdAt": "2024-02-28T17:14:10Z",
              "updatedAt": "2024-02-28T17:14:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785xqZ1x",
          "commit": {
            "abbreviatedOid": "6722117"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-28T18:09:30Z",
          "updatedAt": "2024-02-28T18:09:31Z",
          "comments": [
            {
              "originalPosition": 113,
              "body": "```suggestion\r\nModifications of the SCION address header can be discovered by the destination endpoint if the packet is integrity protected with the SPAO extension. Currently, SCION as described in this document does not provide this type of protection.\r\n```\r\n\r\nSPAO also MACs the endpoint address, right? (Yes, according to [docs](https://docs.scion.org/en/latest/protocols/authenticator-option.html#authenticated-data)).  Also, does it work through NATs?  In principle, I'd say yes, as NAT would map the underlay's IP and not the one in the SCION Address header. Correct?",
              "createdAt": "2024-02-28T18:09:31Z",
              "updatedAt": "2024-02-28T18:10:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785xqgkQ",
          "commit": {
            "abbreviatedOid": "213dc9c"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-28T18:24:42Z",
          "updatedAt": "2024-02-28T18:24:42Z",
          "comments": [
            {
              "originalPosition": 120,
              "body": "Is this also valid for vanilla SCION? Could the same attack happen if the attacker is in the same AS as the victim? \r\n(So, in this case, the attack surface would be greatly reduced, nut it would only be eliminated with SPAO)? ",
              "createdAt": "2024-02-28T18:24:42Z",
              "updatedAt": "2024-02-28T18:24:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785xqgsk",
          "commit": {
            "abbreviatedOid": "213dc9c"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-28T18:25:01Z",
          "updatedAt": "2024-02-28T18:25:11Z",
          "comments": [
            {
              "originalPosition": 122,
              "body": "Does the wording sound reasonable?",
              "createdAt": "2024-02-28T18:25:01Z",
              "updatedAt": "2024-02-28T18:25:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785xvpZ7",
          "commit": {
            "abbreviatedOid": "ad1a6f5"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-29T08:59:42Z",
          "updatedAt": "2024-02-29T08:59:42Z",
          "comments": [
            {
              "originalPosition": 113,
              "body": "True. I think the SPAO was left out intentionally. Makes sense to allude to its existence, but maybe it would be good to be a bit more generic.\r\n\r\n> Modifications of the SCION address header can be discovered by the destination endpoint by a data integrity protection system. Such a data integrity protection system, losely analogous to the IPSec Authentication Header, exists for SCION but is out of scope for this document.",
              "createdAt": "2024-02-29T08:59:42Z",
              "updatedAt": "2024-02-29T08:59:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785xzXjj",
          "commit": {
            "abbreviatedOid": "c95c12c"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-29T16:07:07Z",
          "updatedAt": "2024-02-29T16:07:07Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "```suggestion\r\nA central property of the SCION path-aware data plane is path authorization. Path authorization guarantees that data packets always traverse the network along path segments authorized in the control plane by all on-path ASes. This section discusses how an adversary may attempt to violate the path-authorization property, as well as SCION's prevention mechanisms to these attacks; either an attacker can attempt to create unauthorized hop fields, or they can attempt to create illegitimate paths assembled from authentic individual hop fields.\r\n\r\nThe main protection mechanism here is the hop field MAC ( see ... ), authenticating the hop field content, consisting of ingress/egress interface identifiers, creation and expiration timestamp and, virtually, the preceding hop field MACs in the path segment. \r\nRecall that the MAC is computed using the issuing AS's secret \"forwarding key\" which is shared across the SCION routers and control plane services (only!) within this AS.\r\n\r\n### Forwarding key compromise\r\n\r\nFor the current default MAC algorithm, AES-CMAC truncated to 48 bits, key recovery attacks from (any number of) known plaintext/MAC combinations is computationally infeasible, as far as is publicly known. \r\nIn addition, MAC algorithm can be freely chosen by each ASes, enabling algorithmic agility for MAC computations. Should a MAC algorithm be discovered to be weak or insecure, each AS can quickly switch to a secure algorithm without the need for coordination with other ASes.\r\n\r\nA more realistic risk to the secrecy of the forwarding key is exfiltration from a compromised router or control plane service.\r\nAn AS can optionally rotate its forwarding key at regular intervals to limit the exposure after a temporary device compromise. However, as is perhaps self-evident, such a key rotation scheme cannot mitigate the impact of an undiscovered, permanent compromise of a device.\r\n\r\n### Forging hop field MAC\r\n\r\nAs a second method to break the path authorization is to directly forge a hop field in an online attack, using the router as an oracle to determine the validity of the hop field MAC. The adversary needs to send one packet per guess for verification. For a 6-byte MAC, the adversary would need an expected 2<sup>47</sup> (~140 trillion) tries to successfully forge the MAC of a single hop field.\r\nAs the router only checks MACs during the encoded validity period of the hop field, which is limited by the packet header format to 24 hours, these tries need to occur in a limited time period. This results in a seemingly infeasible number of ~1.6e9 guesses per second.\r\nIn the unlikely case that an online brute-force attack succeeds, the obtained hop field can be used until its inevitable expiration after the just mentioned 24 hour limit.\r\n\r\n```",
              "createdAt": "2024-02-29T16:07:07Z",
              "updatedAt": "2024-02-29T16:07:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785xzudu",
          "commit": {
            "abbreviatedOid": "c95c12c"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-29T16:46:21Z",
          "updatedAt": "2024-02-29T16:46:21Z",
          "comments": [
            {
              "originalPosition": 126,
              "body": "```suggestion\r\n## Off-Path Attacks\r\n\r\nSCION's path-awareness limits the abilities of an off-path adversary to influence forwarding in the data plane. Once a packet is \"in flight\", it will follow its set route, no matter what an adversary may do.\r\nAn adversary can attempt to disrupt the connectivity of said path by flooding a link with excessive traffic (see [](#dos) below). After detecting the congestion, the endpoint can switch to another, non-congested path for subsequent packets.\r\nInstead of actually disrupting the network connectivity, an off-path adversary can also attempt to influence the path selection of the endpoint by fraudulently signalling a network interruption with forged SCMP messages. This attack scenario, and protection mechanisms, will be discussed in a separate document on the SCMP.\r\n\r\n## Volumetric Denial of Service Attacks {#dos}\r\n\r\nAn adversary can attempt to disrupt the connectivity of a network path by flooding a link with excessive traffic. In this case, the endpoint can switch to another, non-congested path for subsequent packets.\r\n\r\nSCION provides protection against certain reflection-based DoS attacks. Here, the adversary sends requests to a server with the source address set to the address of the victim. The server will send a reply, typically larger than the request, to the victim. As long as the attacker and the victim are located in different ASes, this can be prevented in SCION. The reply packets are simply returned along reversed path to the actual sender, regardless of the source address information. Thus, the reflected will be forwarded to the attackers AS (where it will be discarded because the destination AS does not match).\r\n\r\nOn the flip side, the path choice of the endpoint may possibly be exploited by an attacker to create intermittent congestion with relatively low send rate; the attacker can abuse the latency differences of the available paths, sending at precisely timed intervals to cause short, synchronized bursts of packets near the victim.\r\n\r\n**Note** that SCION does not protect against two other types of DoS attacks, namely transport protocol attacks and application layer attacks. Such attacks are out of SCION's scope. However, the additional information contained in the SCION header enables more targeted filtering, e.g., by ISD, AS or path length.\r\n```",
              "createdAt": "2024-02-29T16:46:21Z",
              "updatedAt": "2024-02-29T16:46:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785x6qNB",
          "commit": {
            "abbreviatedOid": "ed7d2be"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T13:37:57Z",
          "updatedAt": "2024-03-01T13:37:57Z",
          "comments": [
            {
              "originalPosition": 120,
              "body": "@matzf We don't talk about this kind of SCMP message, I'd therefore omit this line and keep it for the security considerations of SCMP, once we get there",
              "createdAt": "2024-03-01T13:37:57Z",
              "updatedAt": "2024-03-01T13:37:57Z"
            }
          ]
        }
      ]
    },
    {
      "number": 2,
      "id": "PR_kwDOKYa7785jdf0M",
      "title": "Disambiguate the use of \"MAC\".",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/2",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses: https://github.com/scionassociation/standards/issues/98\r\nFixes #3 ",
      "createdAt": "2024-01-08T10:36:53Z",
      "updatedAt": "2024-02-27T10:33:04Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "073bb9dc17536680feaa5488bb5e1f043ba6a747",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "fix_MAC",
      "headRefOid": "2d20e1a078c857463c3c1a9ed8b175a448347324",
      "closedAt": "2024-02-27T10:33:00Z",
      "mergedAt": "2024-02-27T10:33:00Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "9ce79979aa7c497c5eed816aecb421975614b458"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7785xCEPi",
          "commit": {
            "abbreviatedOid": "2d20e1a"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2024-02-22T16:53:15Z",
          "updatedAt": "2024-02-22T16:53:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 6,
      "id": "PR_kwDOKYa7785j6FWC",
      "title": "Use \"MUST/SHOULD/MAY\" in more systematic manner",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/6",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per rfc2119\r\n",
      "createdAt": "2024-01-12T10:24:30Z",
      "updatedAt": "2024-05-14T14:41:47Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "073bb9dc17536680feaa5488bb5e1f043ba6a747",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "must_should_may",
      "headRefOid": "04fc7cb32f671d64790a91abd8cf46bbfdcfffbc",
      "closedAt": "2024-03-01T13:57:55Z",
      "mergedAt": "2024-03-01T13:57:55Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "2222b66d7850fee27619305e8c195c6bbaa7abd6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7785x6y8e",
          "commit": {
            "abbreviatedOid": "04fc7cb"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM\r\n",
          "createdAt": "2024-03-01T13:57:23Z",
          "updatedAt": "2024-03-01T13:57:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 15,
      "id": "PR_kwDOKYa7785wFw5P",
      "title": "Clarify implications of AS forwarding key compromise",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/15",
      "state": "MERGED",
      "author": "matzf",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #12",
      "createdAt": "2024-05-21T14:16:00Z",
      "updatedAt": "2024-06-21T15:38:12Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "84fd87bdc6eeef1dc1a044fab9d05b002c944e8c",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "forwarding-key-compromise",
      "headRefOid": "8d24f2eb36a344c21ae8dba39146701a50ab8e25",
      "closedAt": "2024-06-21T15:38:09Z",
      "mergedAt": "2024-06-21T15:38:09Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "7c8e09ae02dd99f7ae7e368e7cc98775818d2fbb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa77858DJD-",
          "commit": {
            "abbreviatedOid": "8cbce18"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-05-27T15:48:26Z",
          "updatedAt": "2024-05-27T15:49:09Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "> As path segments are only checked for validity and policy compliance during path discovery during normal operation, and routers only perform minimal sanity checks of hop fields with valid MACs, creating fraudulent hop fields with valid MACs allows an attacker to bypass most path segment validity checks.\r\n\r\nSpeaking that one requires breathing exercises. Any way to split it? (yeah, me, the lumper :-) )",
              "createdAt": "2024-05-27T15:48:26Z",
              "updatedAt": "2024-05-27T15:49:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858xP_b",
          "commit": {
            "abbreviatedOid": "8cbce18"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T09:19:32Z",
          "updatedAt": "2024-06-03T09:19:32Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Done, but I felt I had to combine the next sentences to make it work.\r\nBetter?",
              "createdAt": "2024-06-03T09:19:32Z",
              "updatedAt": "2024-06-03T09:19:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858xeGO",
          "commit": {
            "abbreviatedOid": "8cbce18"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T09:45:37Z",
          "updatedAt": "2024-06-03T09:45:37Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Yes.\r\n",
              "createdAt": "2024-06-03T09:45:37Z",
              "updatedAt": "2024-06-03T09:45:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa778581akH",
          "commit": {
            "abbreviatedOid": "39fbbef"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-03T16:37:00Z",
          "updatedAt": "2024-06-03T16:37:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKYa77859HAVO",
          "commit": {
            "abbreviatedOid": "39fbbef"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-05T12:25:13Z",
          "updatedAt": "2024-06-05T12:29:19Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": ">  Recall that path segments are only checked for validity and policy compliance during the path discovery phase, and routers only perform minimal sanity checks of hop fields with valid MACs.\r\n\r\nI find the language here a bit confusing, because hop field MAC validity is checked at forwarding by the DP, and this is more than _ minimal sanity checks_. I'd just mention that as the DP is only verifying MACs in hop fields, a forget MAC allows an attacker to..\r\n",
              "createdAt": "2024-06-05T12:25:13Z",
              "updatedAt": "2024-06-05T12:29:19Z"
            },
            {
              "originalPosition": 7,
              "body": "Can we say something more about the consequences of this? Can you hijack traffic or splice a path?\r\n",
              "createdAt": "2024-06-05T12:29:17Z",
              "updatedAt": "2024-06-05T12:29:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77859Qt0L",
          "commit": {
            "abbreviatedOid": "39fbbef"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-06T10:09:07Z",
          "updatedAt": "2024-06-06T10:09:07Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "The structure of the sentence I have adapted. Better?",
              "createdAt": "2024-06-06T10:09:07Z",
              "updatedAt": "2024-06-06T10:09:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77859QvgN",
          "commit": {
            "abbreviatedOid": "39fbbef"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-06T10:12:45Z",
          "updatedAt": "2024-06-06T10:12:45Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Added another sentence to clarify that this does not affect routing for legitimate senders.\r\n\r\nTrue, the attacker will most likely try to use this to splice parts of path segments, but it turns out this is quite involved because of the MAC chaining. I tried to explain this as short as possible.",
              "createdAt": "2024-06-06T10:12:45Z",
              "updatedAt": "2024-06-06T10:12:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785_IeoI",
          "commit": {
            "abbreviatedOid": "8d24f2e"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Sorry for the delay, thank you for your changes, looks good! ",
          "createdAt": "2024-06-21T15:37:58Z",
          "updatedAt": "2024-06-21T15:37:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 16,
      "id": "PR_kwDOKYa7785wUwgj",
      "title": "Remove forward references to SCMP",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/16",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #8 ",
      "createdAt": "2024-05-23T12:25:29Z",
      "updatedAt": "2024-06-05T13:28:01Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "caf6e97ec459b8c5bf6051468e8468de64075297",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "no_scmp_spec",
      "headRefOid": "34d52670d3d82a399eafb22036bf1fcde431f26c",
      "closedAt": "2024-06-05T13:27:36Z",
      "mergedAt": "2024-06-05T13:27:36Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "5148614fc232525602790094e3c49f6bdefb30f5"
      },
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Eliot gave us a thumbs up for the current reference, merged. ",
          "createdAt": "2024-06-05T13:27:59Z",
          "updatedAt": "2024-06-05T13:27:59Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKYa77858p7X1",
          "commit": {
            "abbreviatedOid": "233b80b"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-05-31T17:24:01Z",
          "updatedAt": "2024-05-31T17:25:14Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\n```",
              "createdAt": "2024-05-31T17:24:01Z",
              "updatedAt": "2024-05-31T17:25:14Z"
            },
            {
              "originalPosition": 91,
              "body": "Maybe we could remove this comment and leave it in the table? I think we have the same problem for DrKey somewhere else",
              "createdAt": "2024-05-31T17:25:01Z",
              "updatedAt": "2024-05-31T17:25:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858xaNe",
          "commit": {
            "abbreviatedOid": "233b80b"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T09:38:25Z",
          "updatedAt": "2024-06-03T09:38:25Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "I can't figure what you're suggesting. The review UI seems to say that you want to remove the new text entirely as well as the old text. Is that what you're suggesting?\r\n",
              "createdAt": "2024-06-03T09:38:25Z",
              "updatedAt": "2024-06-03T09:38:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858xbfv",
          "commit": {
            "abbreviatedOid": "233b80b"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T09:40:48Z",
          "updatedAt": "2024-06-03T09:40:48Z",
          "comments": [
            {
              "originalPosition": 91,
              "body": "I was acting on Eliot's suggestion: mention the protocol informally. If we just leave in the table with no explanation, we *will* get the question \"what is this?\". What is the motivation for your suggestion?\r\n\r\n",
              "createdAt": "2024-06-03T09:40:48Z",
              "updatedAt": "2024-06-03T09:40:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858z7e9",
          "commit": {
            "abbreviatedOid": "233b80b"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T14:09:07Z",
          "updatedAt": "2024-06-03T14:09:07Z",
          "comments": [
            {
              "originalPosition": 91,
              "body": "Discussed this directly, we removed this sentence and added later a reference to the dev doc.",
              "createdAt": "2024-06-03T14:09:07Z",
              "updatedAt": "2024-06-03T14:09:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa778580gYX",
          "commit": {
            "abbreviatedOid": "fad1fda"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Looks good, I'll ask Eliot if the reference works, If I don't hear back in a few days I'd berge and just leave the corresponding issue open",
          "createdAt": "2024-06-03T15:02:30Z",
          "updatedAt": "2024-06-03T15:02:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 17,
      "id": "PR_kwDOKYa7785wVbJr",
      "title": "Clarify the computation of ExtLen.",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/17",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #14 ",
      "createdAt": "2024-05-23T13:49:33Z",
      "updatedAt": "2024-06-03T14:18:34Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "84fd87bdc6eeef1dc1a044fab9d05b002c944e8c",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "ext_len_described",
      "headRefOid": "8b9de4aa07a897885ca99ab92b64ed27a25b1918",
      "closedAt": "2024-06-03T14:18:28Z",
      "mergedAt": "2024-06-03T14:18:28Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "c3ddf7476160c085a401ee272ef088c60bd7f1c6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa77858p5mV",
          "commit": {
            "abbreviatedOid": "4145be3"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-05-31T17:19:18Z",
          "updatedAt": "2024-05-31T17:20:49Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n- `ExtLen`: Unsigned 8-bit integer. Length of the  Hop-by-Hop or End-to-End Options header in 4-octet units, not including the first 4 octets. That is: `ExtLen = uint8(((options_len + 2) / 4) - 1)`, where `options_len + 2` is a multiple of 4.\r\n```\r\n\r\n\r\nI'd try language similar to IPv6 (RFC2460): \r\n```   \r\nHdr Ext Len    8-bit unsigned integer.  Length of the Routing\r\n                   header in 8-octet units, not including the first\r\n                   8 octets.\r\n```\r\n\r\nI don't really understand the formula, and I'd not use `options_len` in there as it seems we are introducing a new field. I'd rather use tomething lile `L` and then on the side say what `L` is (extension header size in bits)",
              "createdAt": "2024-05-31T17:19:18Z",
              "updatedAt": "2024-05-31T17:20:49Z"
            },
            {
              "originalPosition": 7,
              "body": "What is a `padding-only` option?  In the draft we describe `Pad1` and `PadN`",
              "createdAt": "2024-05-31T17:20:37Z",
              "updatedAt": "2024-05-31T17:20:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858xV-Z",
          "commit": {
            "abbreviatedOid": "4145be3"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T09:30:18Z",
          "updatedAt": "2024-06-03T09:30:19Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I did use the language of RFC8200 for inspiration... rewrote to be even closer. The formula had to be added in order to answer the question that the reviewer asked: \"how to compute it\". \r\n",
              "createdAt": "2024-06-03T09:30:19Z",
              "updatedAt": "2024-06-03T09:30:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858xXx9",
          "commit": {
            "abbreviatedOid": "4145be3"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T09:33:43Z",
          "updatedAt": "2024-06-03T09:33:43Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Rewrote to remove the phrase \"padding-only\" options and link to table-4.\r\n",
              "createdAt": "2024-06-03T09:33:43Z",
              "updatedAt": "2024-06-03T09:33:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa778580Amp",
          "commit": {
            "abbreviatedOid": "8b9de4a"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-03T14:16:51Z",
          "updatedAt": "2024-06-03T14:16:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 18,
      "id": "PR_kwDOKYa7785wWM5i",
      "title": "Add service field table",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/18",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #13 ",
      "createdAt": "2024-05-23T15:24:38Z",
      "updatedAt": "2024-06-14T10:56:35Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "f0339351505e6f802f9d80b7d426e4d1cce552e0",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "service_field_described",
      "headRefOid": "f1cfee758fa6bc586307364aa7e3333ec3ae9e52",
      "closedAt": "2024-06-14T10:56:27Z",
      "mergedAt": "2024-06-14T10:56:27Z",
      "mergedBy": "jiceatscion",
      "mergeCommit": {
        "oid": "40776bce81f139e0c5a8763219085237889bc116"
      },
      "comments": [
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This specifically addresses: https://github.com/scionassociation/scion-dp_I-D/issues/13. Should we then close it as \"won't fix\"?",
          "createdAt": "2024-06-03T09:11:07Z",
          "updatedAt": "2024-06-03T09:11:07Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I added a brief description of what a service address is. That should clarify the reference to it that is in [the configuration PR](https://github.com/scionassociation/scion-cp_I-D/pull/24).\r\n\r\n",
          "createdAt": "2024-06-03T16:34:30Z",
          "updatedAt": "2024-06-05T12:53:23Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKYa77858wRL7",
          "commit": {
            "abbreviatedOid": "f67bde8"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Thanks for adding the table. I think we need to have a more comprehensive discussion on service discovery and wether we add this to the draft or not. \r\nThis because in some way,  just adding this extra table will raise more questions..",
          "createdAt": "2024-06-03T07:47:23Z",
          "updatedAt": "2024-06-03T07:47:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKYa77859HlYJ",
          "commit": {
            "abbreviatedOid": "0ac3296"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-06-05T13:13:35Z",
          "updatedAt": "2024-06-05T13:17:46Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Based on table 3, It seems that an address is a service address if either `DT/DL`=1/0 or if `ST/SL`=1/0. Is source ever used? If not, it should be clearer. Maybe we could just say, before the service address table, that those addresses are for case  `DT/DL`=1/0",
              "createdAt": "2024-06-05T13:13:35Z",
              "updatedAt": "2024-06-05T13:17:46Z"
            },
            {
              "originalPosition": 25,
              "body": "Would it make more sense to place the overall service addresses table one section below, at the end of parargaph `##\u00a0Address Header` ? \r\n\r\nI am saying this because service addresses are special values of `DstHostAddr` when `DT/DL`=1/0, this field is in the address header, not in the common header",
              "createdAt": "2024-06-05T13:17:41Z",
              "updatedAt": "2024-06-05T13:17:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77859QztF",
          "commit": {
            "abbreviatedOid": "0ac3296"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-06T10:21:57Z",
          "updatedAt": "2024-06-06T10:21:58Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Made it more obvious that this goes for both src and dst.\r\n",
              "createdAt": "2024-06-06T10:21:58Z",
              "updatedAt": "2024-06-06T10:21:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77859Qz1u",
          "commit": {
            "abbreviatedOid": "0ac3296"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-06T10:22:15Z",
          "updatedAt": "2024-06-06T10:22:15Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "Done.",
              "createdAt": "2024-06-06T10:22:15Z",
              "updatedAt": "2024-06-06T10:22:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77859PkTC",
          "commit": {
            "abbreviatedOid": "d40c914"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-06T08:31:17Z",
          "updatedAt": "2024-06-14T10:53:21Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Check bits in this table and possibly improve description",
              "createdAt": "2024-06-06T08:31:17Z",
              "updatedAt": "2024-06-14T10:53:21Z"
            },
            {
              "originalPosition": 10,
              "body": "Resolved",
              "createdAt": "2024-06-13T07:55:27Z",
              "updatedAt": "2024-06-14T10:53:21Z"
            },
            {
              "originalPosition": 66,
              "body": "```suggestion\r\nThe currently known service numbers are:\r\n\r\n| Service Number (Hex) | Short Name | Description            |\r\n|-------------------+------------+------------------------|\r\n| 0x0001            | DS         | Discovery Service      |\r\n| 0x0002            | CS         | Control Service        |\r\n| 0xFFFF            | None       | Reserved invalid value |\r\n{: #table-4 title=\"Known Service Numbers\"}\r\n```",
              "createdAt": "2024-06-13T08:00:45Z",
              "updatedAt": "2024-06-14T10:54:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785-P73W",
          "commit": {
            "abbreviatedOid": "f1cfee7"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM\r\n",
          "createdAt": "2024-06-14T10:56:05Z",
          "updatedAt": "2024-06-14T10:56:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 19,
      "id": "PR_kwDOKYa7785wep0J",
      "title": "Describe the effects of clock drift.",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/19",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The reviewr's attention is kindly stirred towards section 4.2.2.3. I am not sure what the standard should say regarding segments from the future. Current code says they're fine.\r\n\r\nAddresses one of the concerns in https://github.com/scionassociation/scion-cp_I-D/issues/18\r\n",
      "createdAt": "2024-05-24T15:18:53Z",
      "updatedAt": "2024-06-19T20:29:23Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "f0339351505e6f802f9d80b7d426e4d1cce552e0",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "clock_drift",
      "headRefOid": "ad14e77c7f809c0ebf042f770e7966e3bcd4b50f",
      "closedAt": "2024-06-19T20:29:19Z",
      "mergedAt": "2024-06-19T20:29:19Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "f7d9f1bc78d1596cc51528245a9856f9ba0d8ee7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa77858BtPS",
          "commit": {
            "abbreviatedOid": "dff4b7c"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T12:31:01Z",
          "updatedAt": "2024-05-28T08:39:10Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Logic bug:\r\n\"hop field is **not** expired\", \"**not** originated in future\"  -- if either is **true** then drop.\r\nMaybe change to \"if either check fails\".",
              "createdAt": "2024-05-27T12:31:01Z",
              "updatedAt": "2024-05-28T08:39:10Z"
            },
            {
              "originalPosition": 30,
              "body": "\"Assuming segments are originated at least once a minute ...\"\r\n\r\nThis is not entirely accurate. Longer paths take longer to create. With a 1 minute beaconing period, constructing a path segment that traverses N ASes will take up to N minutes.\r\n\r\nWith this in mind, I don't really know how to write this. Perhaps something to the effect of: the expiration time of a path can often not be constrained too tightly, as the path discovery takes a variable amount of time and the usable lifetime of the path is  reduced accordingly. Compared to this effect, even clock drifts in the order of minutes do not pose additional problems.",
              "createdAt": "2024-05-28T08:26:12Z",
              "updatedAt": "2024-05-28T08:39:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858JA6j",
          "commit": {
            "abbreviatedOid": "dff4b7c"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-28T13:05:45Z",
          "updatedAt": "2024-05-28T13:05:46Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Done. Rephrased to avoid double negatives.\r\n",
              "createdAt": "2024-05-28T13:05:45Z",
              "updatedAt": "2024-05-28T13:05:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858JfDv",
          "commit": {
            "abbreviatedOid": "dff4b7c"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-28T13:52:26Z",
          "updatedAt": "2024-05-28T13:52:27Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "Ah yes, that's even more relevant...unfortunately not as clear-cut indeed.\r\n",
              "createdAt": "2024-05-28T13:52:26Z",
              "updatedAt": "2024-05-28T13:52:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858phRb",
          "commit": {
            "abbreviatedOid": "d669e7c"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-05-31T16:24:22Z",
          "updatedAt": "2024-05-31T16:36:32Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I'd align this text with the CP draft once we finish discussion in https://github.com/scionassociation/scion-cp_I-D/pull/25  ",
              "createdAt": "2024-05-31T16:24:22Z",
              "updatedAt": "2024-05-31T16:36:32Z"
            },
            {
              "originalPosition": 35,
              "body": "I'd also shrink and reword this section, after we finish discussion in the control plane PR, and leave here only aspects that relate to the DP, like: \r\n- there must be lose time sync between routers and CPs (within an AS?) because routers must verify the current HF \r\n\r\nAnd remove parts that relate to CP",
              "createdAt": "2024-05-31T16:36:28Z",
              "updatedAt": "2024-05-31T16:36:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785-FL15",
          "commit": {
            "abbreviatedOid": "d669e7c"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T09:37:21Z",
          "updatedAt": "2024-06-13T09:37:21Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "done.",
              "createdAt": "2024-06-13T09:37:21Z",
              "updatedAt": "2024-06-13T09:37:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785-P5J_",
          "commit": {
            "abbreviatedOid": "bd471ee"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-14T10:49:27Z",
          "updatedAt": "2024-06-14T10:49:27Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "done\r\n",
              "createdAt": "2024-06-14T10:49:27Z",
              "updatedAt": "2024-06-14T10:49:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785-Tt1C",
          "commit": {
            "abbreviatedOid": "6f31fc1"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "I propose a couple small changes. If you agree, please accept them and then feel free to merge.",
          "createdAt": "2024-06-14T19:26:51Z",
          "updatedAt": "2024-06-14T19:53:35Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nA PCB originated by a given control service is used to construct data plane paths. Specifically, the timestamp in the Info Field and the expiry time of hop fields are used for hop field MAC computation, see [](#hf-mac-calc), which is used to validate paths at each on-path SCION router. A segment's originating control service and the routers that the segment refers to all have different clocks. Their differences affect the validation process:\r\n```\r\n\r\nI propose some rewording to make the dependencies  a bit clear",
              "createdAt": "2024-06-14T19:26:51Z",
              "updatedAt": "2024-06-14T19:53:35Z"
            },
            {
              "originalPosition": 35,
              "body": "```suggestion\r\nEach administrator of SCION control services and routers is responsible for maintaining sufficient clock accuracy. No particular method is assumed by this specification.\r\n```\r\nWe should include routers too",
              "createdAt": "2024-06-14T19:52:41Z",
              "updatedAt": "2024-06-14T19:53:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785-5e0R",
          "commit": {
            "abbreviatedOid": "ad14e77"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-19T20:29:02Z",
          "updatedAt": "2024-06-19T20:29:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 21,
      "id": "PR_kwDOKYa7785wyhA0",
      "title": "Add information about configuration. Esp. Interface configuration.",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/21",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses https://github.com/scionassociation/scion-cp_I-D/issues/17\r\n",
      "createdAt": "2024-05-28T16:45:15Z",
      "updatedAt": "2024-06-05T08:35:41Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "84fd87bdc6eeef1dc1a044fab9d05b002c944e8c",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "interface_config",
      "headRefOid": "532842e984102e7be729ad66b90b7519105ab083",
      "closedAt": "2024-06-05T08:35:38Z",
      "mergedAt": "2024-06-05T08:35:38Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "caf6e97ec459b8c5bf6051468e8468de64075297"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa77858VZ7O",
          "commit": {
            "abbreviatedOid": "1c22856"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-05-29T17:13:06Z",
          "updatedAt": "2024-05-29T17:36:13Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\n**Interface Identifier (Interface ID)**: 16 bit identifier that designates a SCION interface at the end of a link connecting two SCION ASes. Each interface belongs to one border router. Hop fields describe the traversal of an AS by a pair of interface IDs (the ingress and egress interfaces). The Interface ID MUST be unique within each AS, with the exception of ID 0 that denotes a connection between a border router and the AS's internal network. Each border router manages an instance of interface 0.\r\n```",
              "createdAt": "2024-05-29T17:13:06Z",
              "updatedAt": "2024-05-29T17:36:13Z"
            },
            {
              "originalPosition": 22,
              "body": "I'd use the same text I proposed for the CP\r\n```suggestion\r\n**Peering Link**: A link between two SCION border routers of different ASes, where at least one of the two ASes is not core. Two peering ASes may be in different ISDs. A peering link can be seen as a short-cut on a normal path. Peering link information is added to segment information during the beaconing process and used to shorten paths while assembling them from segments.\r\n```",
              "createdAt": "2024-05-29T17:15:00Z",
              "updatedAt": "2024-05-29T17:36:13Z"
            },
            {
              "originalPosition": 43,
              "body": "Does that make sense? I tried to separate this in two lists, one for inter-AS neighbors and one for intra-AS SCION routers",
              "createdAt": "2024-05-29T17:33:02Z",
              "updatedAt": "2024-05-29T17:36:13Z"
            },
            {
              "originalPosition": 45,
              "body": "Does this fit better in previous section \u00a0Intra-Domain Forwarding Process ? ",
              "createdAt": "2024-05-29T17:33:47Z",
              "updatedAt": "2024-05-29T17:36:13Z"
            },
            {
              "originalPosition": 47,
              "body": "We don't describe this in this document.. This paragraph will be confusing. Let's discuss if this is needed. \r\n\r\nAlso, we could just mention this mapping has to be configured or supplied out of band.",
              "createdAt": "2024-05-29T17:36:05Z",
              "updatedAt": "2024-05-29T17:36:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858V_yX",
          "commit": {
            "abbreviatedOid": "5784cff"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-29T18:35:57Z",
          "updatedAt": "2024-05-29T18:35:57Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "The phrase \"intra-protocol\" is completely obscure to me. We haven't used that previously, so we might want to make a longer, more explicit phrase. Otherwise, yeah that part probably deserves an explanation, but it might need to be longer.\r\n",
              "createdAt": "2024-05-29T18:35:57Z",
              "updatedAt": "2024-05-29T18:35:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858WAFc",
          "commit": {
            "abbreviatedOid": "5784cff"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-29T18:36:43Z",
          "updatedAt": "2024-05-29T18:36:43Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "I'd rather address the configuration topic in one place.",
              "createdAt": "2024-05-29T18:36:43Z",
              "updatedAt": "2024-05-29T18:36:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858WA4d",
          "commit": {
            "abbreviatedOid": "5784cff"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-29T18:38:44Z",
          "updatedAt": "2024-05-29T18:38:44Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "Well, we, unfortunately do mention the service address type, without explaining it. It is currently the only mechanism to bootstrap scion, so I think we are obligated to explain it.\r\n",
              "createdAt": "2024-05-29T18:38:44Z",
              "updatedAt": "2024-05-29T18:38:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858cGYf",
          "commit": {
            "abbreviatedOid": "5784cff"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-30T09:21:24Z",
          "updatedAt": "2024-05-30T09:21:24Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "To be handled in #23 ",
              "createdAt": "2024-05-30T09:21:24Z",
              "updatedAt": "2024-05-30T09:21:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858cozL",
          "commit": {
            "abbreviatedOid": "d02a253"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-30T10:27:13Z",
          "updatedAt": "2024-05-30T10:27:13Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "We actually describe Interface ID 0 in the _One-Hop Path Type_  section. \r\nMaybe we could add a reference?   \r\n\r\nAlso, is interface ID 0 used for the last hop? In the example in _Step-by-Step Explanation_\r\n```\r\n      R4 will then also realize, based on the fields\r\n      CurrHF and SegLen in the SCION header, that the packet has reached\r\n      the last hop in its SCION path.  Therefore, instead of stepping up\r\n      the pointers to the next info or hop field, router R4 inspects the\r\n      SCION destination address and extracts the endpoint address\r\n      192.0.2.7. \r\n ```",
              "createdAt": "2024-05-30T10:27:13Z",
              "updatedAt": "2024-05-30T10:27:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858dsUc",
          "commit": {
            "abbreviatedOid": "1c22856"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-30T12:34:35Z",
          "updatedAt": "2024-05-30T12:34:35Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Rearanged as per our discussion.\r\n",
              "createdAt": "2024-05-30T12:34:35Z",
              "updatedAt": "2024-05-30T12:34:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858edud",
          "commit": {
            "abbreviatedOid": "230d52c"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-30T13:56:28Z",
          "updatedAt": "2024-05-30T14:52:39Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "> ID 0 that denotes a connection between a border router and the AS's internal network. Each border router manages an instance of interface 0.\r\n\r\nThe convention to use interface 0 to refer to the AS-internal side of the border router is an implementation detail of our router. I think it suffices to say something like \"Interface ID 0 is reserved for blank/nil values\".\r\n",
              "createdAt": "2024-05-30T13:56:28Z",
              "updatedAt": "2024-05-30T14:52:39Z"
            },
            {
              "originalPosition": 13,
              "body": "\r\n> We actually describe Interface ID 0 in the One-Hop Path Type section.\r\n\r\nThe One hop path is not very special here; we also use 0 interface in the first/last hop field of normal SCION paths.\r\n\r\n> Also, is interface ID 0 used for the last hop?\r\n\r\nDuring path segment construction, the 0 interface is used in the first/last hop field. BUT in the path-segment-combined dataplane path, the 0 does not always/only occur on the last hop.\r\n- Hops with 0 interface occurs \"in the middle\", at segment cross overs.\r\n- Typically 0 will occur at the end of a down segment, but it's legal to cut off the end of a segment.\r\n- Paths to a parent AS below the core consist of only an up-segment that is cut short. These don't end with 0.",
              "createdAt": "2024-05-30T14:06:17Z",
              "updatedAt": "2024-05-30T14:52:39Z"
            },
            {
              "originalPosition": 37,
              "body": "Just \"Interface ID\" (otherwise reader might wonder if there are different types of interface IDs).",
              "createdAt": "2024-05-30T14:10:49Z",
              "updatedAt": "2024-05-30T14:52:39Z"
            },
            {
              "originalPosition": 46,
              "body": "Text does not make it quite clear which border routers get which list of values.\r\n\r\nI'm guessing that it means to say that routers that \"implement\"/\"handle\" a particular interface need to know the link type/neighbor ISD-AS/neighbor interface address, while all other routers only need the address of the router that handles the Iface.\r\n\r\nI believe all routers need to know the link type, to validate segment cross over (e.g. cross-over from an peer- to a core- link would be forbidden). Unfortunately, this is not described in the \"processing at routers\" section at all. Notably this _is_ described in the book v2 (5.6.3 processing at routers). \r\nThe neighbor's ISD-AS number is currently not used for much, but possibly it should be used to drop packets with bad source/dest address.\r\n\r\n\r\nMaybe it's easier to combine the two \"lists\". Suggestion:\r\n```\r\nFor each link to a neighbor, these following information needs to be configured for all border routers:\r\n- Interface ID\r\n- Link Type,\r\n- Neighbor ISD-AS number,\r\n- In the case of the border router responsible for this interface: the neighbor interface's underlay address.\r\n- Otherwise: the \"intra-protocol\" address of the border router responsible this interface.\r\n```",
              "createdAt": "2024-05-30T14:43:43Z",
              "updatedAt": "2024-05-30T14:52:39Z"
            },
            {
              "originalPosition": 48,
              "body": "> (`DT/DS` == 0b01) in the [common header](#common-header)\r\n\r\n\"in the common header\" should be in the parens, no?\r\n-> (`DT/DS` == 0b01 in the common header) ...",
              "createdAt": "2024-05-30T14:52:28Z",
              "updatedAt": "2024-05-30T14:52:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858psSi",
          "commit": {
            "abbreviatedOid": "d02a253"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-31T16:50:08Z",
          "updatedAt": "2024-05-31T16:50:08Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Thanks for the explanation! @jiceatscion can you remove mentions of this use of interface ID 0 from the draft? ",
              "createdAt": "2024-05-31T16:50:08Z",
              "updatedAt": "2024-05-31T16:50:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858puNv",
          "commit": {
            "abbreviatedOid": "230d52c"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-31T16:55:25Z",
          "updatedAt": "2024-05-31T16:55:25Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "> Maybe it's easier to combine the two \"lists\"\r\n\r\nBut routers within the same AS require less parameters. For example, AFAIK no link type or neighbor ISD-AS is needed.  \r\nAlso, is it a requirement that all BRs within an AS see each others as \"neighbors\", in a meshed way? In other words, must each router have all interface ID mappings for its AS (and L3 connectivity to all other routers)? \r\n\r\n",
              "createdAt": "2024-05-31T16:55:25Z",
              "updatedAt": "2024-05-31T16:55:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858w_zQ",
          "commit": {
            "abbreviatedOid": "230d52c"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T08:51:27Z",
          "updatedAt": "2024-06-03T08:51:27Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Rewrote the two mentions of interface ID 0. Now it is only a reserved ID not specifically associated with an internal src/dst and available to mean unspecified. For the one-hop path, the egressID needs not be 0; it only needs to be invalid.",
              "createdAt": "2024-06-03T08:51:27Z",
              "updatedAt": "2024-06-03T08:51:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858xBY5",
          "commit": {
            "abbreviatedOid": "230d52c"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T08:54:25Z",
          "updatedAt": "2024-06-03T08:54:25Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "yes. done.\r\n",
              "createdAt": "2024-06-03T08:54:25Z",
              "updatedAt": "2024-06-03T08:54:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858xGIC",
          "commit": {
            "abbreviatedOid": "230d52c"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T09:02:41Z",
          "updatedAt": "2024-06-03T09:02:41Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "These are implementation details, I would say. That section is an explanation about configuration; in response to a question. It is not actually mandating anything.\r\n\r\nI rewote along the lines proposed my Matthias. We discuss that later.\r\n",
              "createdAt": "2024-06-03T09:02:41Z",
              "updatedAt": "2024-06-03T09:02:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858xGU3",
          "commit": {
            "abbreviatedOid": "230d52c"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T09:03:04Z",
          "updatedAt": "2024-06-03T09:03:04Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "ping?\r\n",
              "createdAt": "2024-06-03T09:03:04Z",
              "updatedAt": "2024-06-03T09:03:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858xH9a",
          "commit": {
            "abbreviatedOid": "230d52c"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T09:04:48Z",
          "updatedAt": "2024-06-03T09:04:48Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "> But routers within the same AS require less parameters. For example, AFAIK no link type or neighbor ISD-AS is needed.\r\n\r\nAs I said above, they _do_ need to have the information about the link type.\r\n\r\n>  Also, is it a requirement that all BRs within an AS see each others as \"neighbors\", in a meshed way? In other words, must each router have all interface ID mappings for its AS (and L3 connectivity to all other routers)?\r\n\r\nAlmost. The exact requirement is somewhat more nuanced. For the draft, I think this is good enough.\r\n\r\nJust for the sake of completeness: the model of path segment crossover implicitly assumes that you can transit between any two child interfaces, and between any child and core interface. So, a router responsible for a child or core interface needs to know _at least_ all (other) child interfaces. All other hops (parent-child, core-core, child-peer), are announced explicitly; the corresponding connectivity only needs to exist if the hop is ever announced.",
              "createdAt": "2024-06-03T09:04:48Z",
              "updatedAt": "2024-06-03T09:04:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77858xMK-",
          "commit": {
            "abbreviatedOid": "ef1f2ba"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-03T09:12:11Z",
          "updatedAt": "2024-06-03T09:12:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKYa778581R7r",
          "commit": {
            "abbreviatedOid": "1c22856"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T16:18:40Z",
          "updatedAt": "2024-06-03T16:18:40Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "Tried to provide concise explanation.\r\n",
              "createdAt": "2024-06-03T16:18:40Z",
              "updatedAt": "2024-06-03T16:18:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa778588mRa",
          "commit": {
            "abbreviatedOid": "9f64459"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-04T12:33:48Z",
          "updatedAt": "2024-06-04T12:33:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKYa77859AJjo",
          "commit": {
            "abbreviatedOid": "9f64459"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-04T19:05:01Z",
          "updatedAt": "2024-06-04T19:05:01Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "```suggestion\r\nUpon receiving a packet containing a one-hop path, the ingress border router of the destination AS fills in the `ConsIngress` field in the second hop field of the one-hop path with the ingress interface ID. It sets the `ConsEgress` field to an invalid value (e.g. unspecified value 0), ensuring the path cannot be used beyond the destination AS. Then it calculates and appends the appropriate MAC for the hop field.\r\n```\r\n\r\nHow about we use the same wording as above, where we mention 0: \r\n``` The Interface ID MUST be unique\r\n   within each AS.  Interface ID 0 is not a valid identifier,\r\n   implementations can use it as the \"unspecified\" value.\r\n   ``` \r\n   \r\n   After this, we should be good to finally merge this :) ",
              "createdAt": "2024-06-04T19:05:01Z",
              "updatedAt": "2024-06-04T19:09:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77859E0dB",
          "commit": {
            "abbreviatedOid": "532842e"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM\r\n",
          "createdAt": "2024-06-05T08:35:08Z",
          "updatedAt": "2024-06-05T08:35:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 24,
      "id": "PR_kwDOKYa7785xRRQM",
      "title": "Rewrite introduction",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/24",
      "state": "MERGED",
      "author": "knmeynell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses: \r\n- #10 - added introductory section with component overview\r\n- #11 ",
      "createdAt": "2024-06-03T09:05:17Z",
      "updatedAt": "2024-06-13T16:04:18Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "5148614fc232525602790094e3c49f6bdefb30f5",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "overview",
      "headRefOid": "6d4030afc7c2e694475448d525a0db3f7259baa6",
      "closedAt": "2024-06-13T16:03:52Z",
      "mergedAt": "2024-06-13T16:03:52Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "f0339351505e6f802f9d80b7d426e4d1cce552e0"
      },
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "```\r\n/Users/nic/repos/scion-dp_I-D/draft-dekater-scion-dataplane.xml(1982): Warning: Unused reference: There seems to be no reference to [I-D.scion-components] in the document\r\n/Users/nic/repos/scion-dp_I-D/draft-dekater-scion-dataplane.xml(2009): Warning: Unused reference: There seems to be no reference to [I-D.scion-overview] in the document\r\n```",
          "createdAt": "2024-06-12T07:17:47Z",
          "updatedAt": "2024-06-12T07:17:47Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKYa77858xceg",
          "commit": {
            "abbreviatedOid": "3a6f5f8"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "Please check references: \r\n- Make sure references and links are correct (Use `{{}}`), that they are added to the reference section. They are also case sensitive\r\n- I'd move I-D.scion-cppki to normative references, it is necessary for implementing the protocol\r\n\r\n",
          "createdAt": "2024-06-03T09:42:38Z",
          "updatedAt": "2024-06-03T10:04:18Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\n*PKI* - To achieve scalability and trust, SCION organizes existing ASes into logical groups of independent routing planes called *Isolation Domains (ISDs)*. All ASes in an ISD agree on a set of trust roots called the *Trust Root Configuration (TRC)* which is a collection of signed root certificates in X.509 v3 format [RFC5280]. The ISD is governed by a set of *core ASes* which typically manage the trust roots and provide connectivity to other ISDs. This is the basis of the public key infrastructure which the SCION control plane relies upon for the authentication of messages that is used for the SCION control plane. See {{I-D.scion-cppki}}\r\n```",
              "createdAt": "2024-06-03T09:42:38Z",
              "updatedAt": "2024-06-03T10:04:18Z"
            },
            {
              "originalPosition": 19,
              "body": "You also need to remove references\r\n```\r\n/Users/nic/repos/scion-dp_I-D/draft-dekater-scion-dataplane.xml(1952): Warning: Unused reference: There seems to be no reference to [I-D.scion-components] in the document\r\n/Users/nic/repos/scion-dp_I-D/draft-dekater-scion-dataplane.xml(1979): Warning: Unused reference: There seems to be no reference to [I-D.scion-overview] in the document\r\n```\r\n",
              "createdAt": "2024-06-03T09:43:36Z",
              "updatedAt": "2024-06-03T10:04:18Z"
            },
            {
              "originalPosition": 14,
              "body": "Fix link\r\n```suggestion\r\nSCION is a path-aware internetworking routing architecture as described in {{RFC9217}}. It allows endpoints and applications to select paths across the network to use for traffic, based on trustworthy path properties. SCION is an inter-domain network architecture and is therefore not concerned with intra-domain forwarding.\r\n```\r\n\r\nAlso, reference is missing for two RFCs, it has to be added under normative references (lines  ~49):  \r\n```\r\n- No link definition for link ID 'rfc9217' found on line 93\r\n- No link definition for link ID 'rfc5280' found on line 105\r\n```\r\n\r\n",
              "createdAt": "2024-06-03T09:50:08Z",
              "updatedAt": "2024-06-05T09:34:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa778581FNj",
          "commit": {
            "abbreviatedOid": "3a6f5f8"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "Well done, intro makes a lot of sense. I left some small changes, also there are some typos in references",
          "createdAt": "2024-06-03T15:57:52Z",
          "updatedAt": "2024-06-03T16:12:11Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\n*Security* - to provide higher levels of trust in routing information in order to prevent traffic hijacking, reduce potential for denial-of-service and other attacks. Endpoints can decide the trust roots they wish to rely on, routing information can be unambiguously attributed to an AS, and packets are only forwarded along authorized path segments. A particular use case is to enable geofencing.\r\n```\r\nSlightly adapted wording, as we don't use prefixes. Clarified DoS",
              "createdAt": "2024-06-03T15:57:52Z",
              "updatedAt": "2024-06-03T16:12:11Z"
            },
            {
              "originalPosition": 28,
              "body": "The concept of ISDs relates heavily to both the PKI and the control plane.  Also, ISDs are  described in the glossary entry\"*Isolation Domain (ISD)*:\" \r\n\r\n- How about we shrink this text (perhaps adapting the glossary entity)  and then in this paragrap we only describe the function of the PKI? Alternatively, we could move this text a bit up\r\n\r\n> To achieve scalability and trust, SCION organizes existing ASes into logical groups of independent routing planes called *Isolation Domains (ISDs)*. All ASes in an ISD agree on a set of trust roots called the *Trust Root Configuration (TRC)* which is a collection of signed root certificates in X.509 v3 format [RFC5280]. The ISD is governed by a set of *core ASes* which typically manage the trust roots and provide connectivity to other ISDs.",
              "createdAt": "2024-06-03T16:11:23Z",
              "updatedAt": "2024-06-03T16:12:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785-IyjW",
          "commit": {
            "abbreviatedOid": "6d4030a"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-13T16:03:40Z",
          "updatedAt": "2024-06-13T16:03:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 26,
      "id": "PR_kwDOKYa7785xZv6V",
      "title": "Clarify selection of MAC, elaborate on MAC chaining and path splicing",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/26",
      "state": "MERGED",
      "author": "matzf",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Describe AES-CMAC hop field MAC algorithm as the default which MUST be supported.\r\n\r\n- Moved the details of  the default mac algorithm to _after_ the explanation of the accumulator field (as this is used in the mac input).\r\n- Fixed the swapped info field/hop field labels in the figure depicting the MAC input.\r\n- Describe requriements on alternative MAC implementations, in particular about requirements for MAC chaining\r\n- Describe path splicing is prevented\r\n- Describe how path splicing can still happen in security considerations\r\n\r\n\r\n\r\nContributes to https://github.com/scionassociation/scion-cp_I-D/issues/23.\r\nContributes to https://github.com/scionassociation/scion-dp_I-D/issues/7",
      "createdAt": "2024-06-04T09:43:57Z",
      "updatedAt": "2024-06-28T07:04:30Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "7c8e09ae02dd99f7ae7e368e7cc98775818d2fbb",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "default-mac-algo",
      "headRefOid": "22b897f22095746b0fb8c941136aeb2cf66f81bb",
      "closedAt": "2024-06-28T07:04:23Z",
      "mergedAt": "2024-06-28T07:04:23Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "a059acf11afc3a5a349578035d5a24bbd7887edb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa778587O9O",
          "commit": {
            "abbreviatedOid": "ae4103f"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-04T09:52:11Z",
          "updatedAt": "2024-06-04T09:54:00Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "> to avoid overhead caused by\r\n\r\nto avoid the overhead caused by?",
              "createdAt": "2024-06-04T09:52:12Z",
              "updatedAt": "2024-06-04T09:54:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa778587s99",
          "commit": {
            "abbreviatedOid": "ae4103f"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-06-04T10:46:31Z",
          "updatedAt": "2024-06-04T10:49:54Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "```suggestion\r\nThe algorithm used to compute the hop field MAC is an AS-specific choice. The operator of an AS can freely choose a MAC algorithm without outside coordination. However, the control service and routers of the AS MUST agree on the algorithm used.\r\nAll control service and router implementations MUST support the Default Hop Field MAC algorithm described below. Operators may use other algorithms as long as they are supported by all devices in the AS.\r\n```\r\n\r\nOur reviewer Joel suggested use of MUST: \r\n> <jmh>Yes, I get that each AS can in principle use a different algorithm.  Now look at it from the point of view of an implementor.  What algorithm shall I implement?  I am expecting to sell to multiple operators.  I am expecting to need to interoperate with solutions from other vendors.  I have no problem with allowing a range of choices.  But I need something that ensures interoperability.  The usual answer is to say that all implementations must implement and support X, and that operators can use anything they like that their devices support as long as all devices in the AS use the same thing. </jmh>\r\n\r\n\r\nAlso, shoutln't only the algorithm be selectable (but not which fields ar MACed)? I propose a slightly different text to clarify this. I also did a bit of rewording based on Joel's comment",
              "createdAt": "2024-06-04T10:46:31Z",
              "updatedAt": "2024-06-04T10:58:23Z"
            },
            {
              "originalPosition": 83,
              "body": "I would clarify that this data must be used as an input to calculate MAC, regardless of algorithm",
              "createdAt": "2024-06-04T10:48:59Z",
              "updatedAt": "2024-06-04T10:49:54Z"
            },
            {
              "originalPosition": 82,
              "body": "Shall we mention that as MAC is truncated to 6 bits, in order to safely truncate it,  any other MAC algorithms must have properties of a pseudorandom function?  ",
              "createdAt": "2024-06-04T10:49:50Z",
              "updatedAt": "2024-06-04T10:49:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785872KK",
          "commit": {
            "abbreviatedOid": "ae4103f"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-04T11:04:28Z",
          "updatedAt": "2024-06-04T11:04:28Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "Shoudln't the input data for MACs be always the same? To this point, isn't it better to leave this section where it was?",
              "createdAt": "2024-06-04T11:04:28Z",
              "updatedAt": "2024-06-04T11:04:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa778588Mpl",
          "commit": {
            "abbreviatedOid": "ae4103f"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-04T11:50:28Z",
          "updatedAt": "2024-06-04T11:50:28Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "I'll add a paragraph about the requirements for alternative MAC algos: unforgeable, pseudorandom in last two bytes (because of XOR thing), and depend on info field and hop field (ignoring flags).\r\n\r\nThis should constrain the input of the MAC function enough. I would avoid over-specifying the bit pattern layout of the input to alternative MAC algos; who knows, maybe it would make sense to separately compute something over some fields first, then some others, and then combine the output with some other function.",
              "createdAt": "2024-06-04T11:50:28Z",
              "updatedAt": "2024-06-04T11:50:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa778588MtK",
          "commit": {
            "abbreviatedOid": "ae4103f"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-04T11:50:36Z",
          "updatedAt": "2024-06-04T11:50:36Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "The shortening to 6 bytes may be specific to the MAC algo. I think this should be covered by the more generic requirements that I alluded to in the comment above.",
              "createdAt": "2024-06-04T11:50:36Z",
              "updatedAt": "2024-06-04T11:50:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa778588M1P",
          "commit": {
            "abbreviatedOid": "ae4103f"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-04T11:50:47Z",
          "updatedAt": "2024-06-04T11:50:47Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "See other comment; I'll add generic requirements for alternative MAC algorights. The bit pattern input to alternative MAC algorithms should IMO not be constrained.",
              "createdAt": "2024-06-04T11:50:47Z",
              "updatedAt": "2024-06-04T11:52:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa778588PFq",
          "commit": {
            "abbreviatedOid": "ae4103f"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-04T11:54:43Z",
          "updatedAt": "2024-06-04T11:54:43Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "Could have sworn I fixed this. Thanks, done!",
              "createdAt": "2024-06-04T11:54:43Z",
              "updatedAt": "2024-06-04T11:54:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa778588POF",
          "commit": {
            "abbreviatedOid": "ae4103f"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-04T11:54:58Z",
          "updatedAt": "2024-06-04T11:54:58Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "I'm ok with making this a MUST instead of a SHOULD, even if SHOULD still seems perfectly appropriate to me:\r\n\r\n> SHOULD   This word, or the adjective \"RECOMMENDED\", mean that there\r\n>   may exist valid reasons in particular circumstances to ignore a\r\n>   particular item, but the full implications must be understood and\r\n>   carefully weighed before choosing a different course.\r\n\r\n\r\n--\r\n> Also, shoutln't only the algorithm be selectable (but not which fields ar MACed)\r\n\r\nI'll reply to this in another comment.",
              "createdAt": "2024-06-04T11:54:58Z",
              "updatedAt": "2024-06-04T11:54:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77859AP1z",
          "commit": {
            "abbreviatedOid": "ae4103f"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-04T19:20:34Z",
          "updatedAt": "2024-06-04T19:20:35Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "> I would avoid over-specifying the bit pattern layout of the input to alternative MAC algos; who knows, maybe it would make sense to separately compute something over some fields first, then some others, and then combine the output with some other function.\r\n\r\nI see your point. However, shoudln't we make sure that all these fields are in some way authenticated, so that the overall security properties are maintained? Otherwise you would allow an AS that only authenticates a portion of the fields. Maybe we could slightly reword it to say which fields must be authenticated? ",
              "createdAt": "2024-06-04T19:20:35Z",
              "updatedAt": "2024-06-04T19:20:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77859AQqZ",
          "commit": {
            "abbreviatedOid": "ae4103f"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-04T19:22:35Z",
          "updatedAt": "2024-06-04T19:22:35Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "Ok thanks for the clarification",
              "createdAt": "2024-06-04T19:22:35Z",
              "updatedAt": "2024-06-04T19:22:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77859AQ9_",
          "commit": {
            "abbreviatedOid": "ae4103f"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-04T19:23:20Z",
          "updatedAt": "2024-06-04T19:23:20Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "Ok perfect, but ti would be good to clearly list which fields MUST be authenticated by the MAC.",
              "createdAt": "2024-06-04T19:23:20Z",
              "updatedAt": "2024-06-04T19:23:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77859TXuo",
          "commit": {
            "abbreviatedOid": "ae4103f"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-06T14:54:41Z",
          "updatedAt": "2024-06-06T14:54:41Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "done.",
              "createdAt": "2024-06-06T14:54:41Z",
              "updatedAt": "2024-06-06T14:54:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77859TX3U",
          "commit": {
            "abbreviatedOid": "ae4103f"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-06T14:54:53Z",
          "updatedAt": "2024-06-06T14:54:53Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "Done.",
              "createdAt": "2024-06-06T14:54:53Z",
              "updatedAt": "2024-06-06T14:54:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa77859TYKM",
          "commit": {
            "abbreviatedOid": "ae4103f"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-06T14:55:21Z",
          "updatedAt": "2024-06-06T14:55:21Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "Done (applied most of your suggestion).",
              "createdAt": "2024-06-06T14:55:21Z",
              "updatedAt": "2024-06-06T14:55:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785-DaDJ",
          "commit": {
            "abbreviatedOid": "32b72a0"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T06:29:30Z",
          "updatedAt": "2024-06-13T06:29:31Z",
          "comments": [
            {
              "originalPosition": 163,
              "body": "```suggestion\r\n```\r\nI'd not describe potential changes to the protocol, I don't think this is within the scope of the draft",
              "createdAt": "2024-06-13T06:29:30Z",
              "updatedAt": "2024-06-13T06:29:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785-E9eg",
          "commit": {
            "abbreviatedOid": "32b72a0"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T09:11:23Z",
          "updatedAt": "2024-06-13T09:11:23Z",
          "comments": [
            {
              "originalPosition": 163,
              "body": "@matzf let us know if you hear any feedback on this",
              "createdAt": "2024-06-13T09:11:23Z",
              "updatedAt": "2024-06-13T09:11:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785-5sj2",
          "commit": {
            "abbreviatedOid": "32b72a0"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-19T21:21:01Z",
          "updatedAt": "2024-06-19T21:21:01Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": ">  With typical numbers of paths in \r\n\r\nSome part of the sentence is missing? And perhaps, as we attempt to discuss the implications of this in #path-splicing, maybe we could also add a reference to `#path-splicing`?",
              "createdAt": "2024-06-19T21:21:01Z",
              "updatedAt": "2024-06-19T21:28:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785-7r4w",
          "commit": {
            "abbreviatedOid": "7d94ca5"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-20T06:57:40Z",
          "updatedAt": "2024-06-20T06:57:40Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Ah good catch. I had started to write the analysis on path splicing here. Shortened, and replaced it with a reference to the security analysis.",
              "createdAt": "2024-06-20T06:57:40Z",
              "updatedAt": "2024-06-20T06:57:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785-5zAq",
          "commit": {
            "abbreviatedOid": "9b992eb"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Hi @matzf, I propose some text on path splicing, if that works for you, then we could finally merge this.. If not, let's briefly discuss Monday ",
          "createdAt": "2024-06-19T21:55:35Z",
          "updatedAt": "2024-06-21T15:29:40Z",
          "comments": [
            {
              "originalPosition": 179,
              "body": "> global validity \r\n\r\nWhat do you mean exactly? the MAC? \r\n\r\n> A wider security margin against path splicing could be obtained by increasing the width of the segment identifier \r\n\r\nAs far as I understand, the probability of collisions decreases exponentially with the length of this field,  maybe we could mention this? \r\n\r\n> Such a change in the protocol would have to be coordinated with all participating entities (control services, routers, end hosts in all ASes).\r\n\r\nIN this document we specify that the field is 16 bits.. I'd not mention here what is needed to change the field length too in detail.  ",
              "createdAt": "2024-06-19T21:55:35Z",
              "updatedAt": "2024-06-21T15:29:40Z"
            },
            {
              "originalPosition": 179,
              "body": "Some clarifications following our discussion today: \r\n- An attacker cannot make anyone else use this path, It does not affect routing for others\r\n- To create a loop, you'd need two splices at the same time, and this is highly unlikely",
              "createdAt": "2024-06-20T08:39:29Z",
              "updatedAt": "2024-06-21T15:29:40Z"
            },
            {
              "originalPosition": 179,
              "body": "```suggestion\r\nSuccessful path splicing would allow an attacker to briefly use a path that violates an ASes path policy, e.g. making a special transit link available to a customer AS that is not billed accordingly, or violate global validity as a spliced path segment could traverses one or multiple links twice. Loops are excluded as they would require two simultaneous splices.\r\nA wider security margin against path splicing could be obtained by increasing the width of the segment identifier / `Acc` field, e.g. by extending it into the 8-bit reserved field next to it in the info field.\r\n```\r\nProposing an alternative text: \r\n* CLarify that the attacker would use the splice \r\n* Mention that loops would require two simultaneous splices\r\n* Remove discussion about what is needed to change header. I also propose some text to describe loops. ",
              "createdAt": "2024-06-21T15:28:42Z",
              "updatedAt": "2024-06-21T15:29:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785_QQjk",
          "commit": {
            "abbreviatedOid": "7d94ca5"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-24T07:59:18Z",
          "updatedAt": "2024-06-24T07:59:18Z",
          "comments": [
            {
              "originalPosition": 179,
              "body": "Done",
              "createdAt": "2024-06-24T07:59:18Z",
              "updatedAt": "2024-06-24T07:59:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785_QQmm",
          "commit": {
            "abbreviatedOid": "9b992eb"
          },
          "author": "matzf",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-24T07:59:24Z",
          "updatedAt": "2024-06-24T07:59:24Z",
          "comments": [
            {
              "originalPosition": 179,
              "body": "Done",
              "createdAt": "2024-06-24T07:59:24Z",
              "updatedAt": "2024-06-24T07:59:24Z"
            }
          ]
        }
      ]
    },
    {
      "number": 27,
      "id": "PR_kwDOKYa7785yYu_2",
      "title": "remove allowed",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/27",
      "state": "MERGED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Resolves #11 ",
      "createdAt": "2024-06-13T16:27:16Z",
      "updatedAt": "2024-06-19T20:42:43Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "f0339351505e6f802f9d80b7d426e4d1cce552e0",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "overview",
      "headRefOid": "4835f63f53ee98018653a32c76f29da790cdd97a",
      "closedAt": "2024-06-19T20:42:41Z",
      "mergedAt": "2024-06-19T20:42:41Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "b2bef202896afc48dc1a6395cdcdf2d1ebffc919"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7785-JEkQ",
          "commit": {
            "abbreviatedOid": "941e2e6"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-13T16:40:20Z",
          "updatedAt": "2024-06-13T16:40:38Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\"possible\" doesn't really convey the effect of other choices. After all one can totall craft incorrect packets. How about \"valid\"? That's what the router does, after all: it \"validates\" the path.\r\n\r\n",
              "createdAt": "2024-06-13T16:40:21Z",
              "updatedAt": "2024-06-13T16:40:38Z"
            },
            {
              "originalPosition": 14,
              "body": "ditto",
              "createdAt": "2024-06-13T16:40:30Z",
              "updatedAt": "2024-06-13T16:40:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785-P30z",
          "commit": {
            "abbreviatedOid": "41ce8b3"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-14T10:45:58Z",
          "updatedAt": "2024-06-14T10:45:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKYa7785-5gSC",
          "commit": {
            "abbreviatedOid": "941e2e6"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-19T20:35:36Z",
          "updatedAt": "2024-06-19T20:35:37Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Changed to Valid",
              "createdAt": "2024-06-19T20:35:36Z",
              "updatedAt": "2024-06-19T20:35:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7785-5get",
          "commit": {
            "abbreviatedOid": "941e2e6"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-19T20:36:32Z",
          "updatedAt": "2024-06-19T20:36:32Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Changed to Valid",
              "createdAt": "2024-06-19T20:36:32Z",
              "updatedAt": "2024-06-19T20:36:32Z"
            }
          ]
        }
      ]
    },
    {
      "number": 28,
      "id": "PR_kwDOKYa7785yqKBs",
      "title": "Move informative references to the informative section and normative to normative.",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/28",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #25 ",
      "createdAt": "2024-06-17T08:11:15Z",
      "updatedAt": "2024-06-19T11:24:00Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "40776bce81f139e0c5a8763219085237889bc116",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "normative_informative",
      "headRefOid": "897b690884064e3f048202a4e850b7f6402776eb",
      "closedAt": "2024-06-19T11:23:51Z",
      "mergedAt": "2024-06-19T11:23:51Z",
      "mergedBy": "jiceatscion",
      "mergeCommit": {
        "oid": "12cb6dd4436b18cafea18a61402f189e0a52f8b7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7785-iO1v",
          "commit": {
            "abbreviatedOid": "897b690"
          },
          "author": "knmeynell",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-17T13:23:42Z",
          "updatedAt": "2024-06-17T13:23:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 29,
      "id": "PR_kwDOKYa77850beES",
      "title": "Replaced 'intra-protocol' with 'intra-domain protocol' throughout",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/29",
      "state": "MERGED",
      "author": "knmeynell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Solves #23\r\nI decided to use 'intra-domain protocol' rather than 'intra-domain network protocol' in the interests of conciseness, but also because intra-domain protocol was already defined in the document. Some further re-wording for improved readability and clarify.",
      "createdAt": "2024-07-04T10:37:40Z",
      "updatedAt": "2024-07-08T08:30:19Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "a059acf11afc3a5a349578035d5a24bbd7887edb",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "Final-tweaks",
      "headRefOid": "e88f1d1a3bee48c7298f009954a94cc4689b8317",
      "closedAt": "2024-07-08T08:30:16Z",
      "mergedAt": "2024-07-08T08:30:16Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "8c7f01e0eb53cf684f7cb561d8f3e39be2b4ef7c"
      },
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "I had to also change this in the CP draft: https://github.com/scionassociation/scion-cp_I-D/pull/44 ",
          "createdAt": "2024-07-07T21:46:29Z",
          "updatedAt": "2024-07-07T21:46:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786A3Gr2",
          "commit": {
            "abbreviatedOid": "9998af2"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-07T21:48:54Z",
          "updatedAt": "2024-07-07T21:57:14Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "```suggestion\r\nTwo candidates path segments for splicing must have at least one AS interface in common as a connection point.\r\nThe path segments must have the same origination timestamp, as this is directly protected by the hop field MAC. This can occur by chance, or if the two candidate path segments were originated as the same segment that then diverged and converged back.\r\n```",
              "createdAt": "2024-07-07T21:48:54Z",
              "updatedAt": "2024-07-07T21:57:14Z"
            },
            {
              "originalPosition": 69,
              "body": "```suggestion\r\nAn on-path adversary could modify the SCION path header, and replace the remaining part of path segments to the destination with different segments. Such replaced segments must include authorized segments, as otherwise the packet would be simply dropped on its way to the destination. The already traversed portion of the current segment and past segments can also be modified by the adversary (for instance, deleting and adding valid and invalid hop fields). On reply packets from the destination, the adversary can transparently revert the changes to the path header again. For instance, if an adversary M is an intermediate AS on the path of a packet from A to B, then M can replace the packet\u2019s past path (leading up to, but not including M). The new path may not be a valid end-to-end path. However, when B reverses the path and sends a reply packet, that packet would go via M, which can then transparently change the invalid path back to the valid path to A. In addition, the endpoint address header can also be modified.\r\n```\r\nWe are atlaking about attacks, I'd not use keywords\r\n",
              "createdAt": "2024-07-07T21:49:41Z",
              "updatedAt": "2024-07-07T21:57:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786A5t07",
          "commit": {
            "abbreviatedOid": "e88f1d1"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-08T08:23:57Z",
          "updatedAt": "2024-07-08T08:23:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 30,
      "id": "PR_kwDOKYa77851FO7R",
      "title": "Update GitHub actions",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/30",
      "state": "MERGED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-11T11:10:52Z",
      "updatedAt": "2024-07-11T11:12:22Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "8c7f01e0eb53cf684f7cb561d8f3e39be2b4ef7c",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "actions_update",
      "headRefOid": "f302815bedad22cae63ee3505b2a88c07923adef",
      "closedAt": "2024-07-11T11:12:19Z",
      "mergedAt": "2024-07-11T11:12:19Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "c8ea5a4b3e8d8f46969634fccd873d3b91c94112"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 34,
      "id": "PR_kwDOKYa77852AD0Z",
      "title": "Proof of transit: mention why it is not needed",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/34",
      "state": "MERGED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Follow up to https://github.com/scionassociation/scion-cp_I-D/issues/52 ",
      "createdAt": "2024-07-21T01:01:45Z",
      "updatedAt": "2024-08-26T07:51:31Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "c8ea5a4b3e8d8f46969634fccd873d3b91c94112",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "nic_pot_reason",
      "headRefOid": "87f6ea812ba69a9cec8fbd54be99f0771e1c3fae",
      "closedAt": "2024-08-26T07:51:27Z",
      "mergedAt": "2024-08-26T07:51:27Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "bacdcaa7496f35990cc815115e7878ab9691666d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786CmB1J",
          "commit": {
            "abbreviatedOid": "63f3a43"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-22T08:52:12Z",
          "updatedAt": "2024-07-22T08:52:24Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I propose a slightly different wording, because I think that, as it is, the last sentence seems to contradict the rest. May be the explanation below is clearer? Not binding, keep your text if you prefer it.\r\n\r\nMoreover, packet integrity protection is not enough if there are two colluding adversaries on the path. These colluding adversaries can forward the packet between them using a different path than selected by the source endpoint: The first on-path attacker remodels the packet header arbitrarily, and the second on-path attacker changes the path back to the original source-selected path, such that the integrity check by the destination endpoint succeeds. However, such an attack is of little value. An on-path adversary can inspect/copy/disrupt the traffic that reaches it without diverting the traffic away from the sender-chosen path. For this reason proof-of-transit, which would be required to detect such an attack, has little benfit in the context of SCION and is not in scope for this document.\r\n",
              "createdAt": "2024-07-22T08:52:12Z",
              "updatedAt": "2024-07-22T08:52:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786GtTTw",
          "commit": {
            "abbreviatedOid": "63f3a43"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-26T07:47:04Z",
          "updatedAt": "2024-08-26T07:47:04Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nMoreover, packet integrity protection is not enough if there are two colluding adversaries on the path. These colluding adversaries can forward the packet between them using a different path than selected by the source endpoint: The first on-path attacker remodels the packet header arbitrarily, and the second on-path attacker changes the path back to the original source-selected path, such that the integrity check by the destination endpoint succeeds. However, such an attack is of little value. An on-path adversary may inspect/copy/disrupt its traffic without diverting it away from the sender-chosen path. For this reason proof-of-transit, which would be required to detect such an attack, has marginal benefit in the context of SCION and it is not in scope for this document.\r\n```",
              "createdAt": "2024-08-26T07:47:04Z",
              "updatedAt": "2024-08-26T07:49:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786GtVQ2",
          "commit": {
            "abbreviatedOid": "63f3a43"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-26T07:51:08Z",
          "updatedAt": "2024-08-26T07:51:08Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Thanks, I used a slightly edited version of your wording",
              "createdAt": "2024-08-26T07:51:08Z",
              "updatedAt": "2024-08-26T07:51:08Z"
            }
          ]
        }
      ]
    },
    {
      "number": 46,
      "id": "PR_kwDOKYa77853iY85",
      "title": "Added SCION IP Gateway section",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/46",
      "state": "MERGED",
      "author": "knmeynell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Basic description pulled from different sources. Do we need to describe the encapsulation/framing protocol in detail here?\r\nIs this section in the right place in the I-D?\r\n\r\nResolves #40 ",
      "createdAt": "2024-08-06T08:17:22Z",
      "updatedAt": "2024-09-07T08:11:07Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "351994e4d26a027f80cc861ee4a5c0f60ba49213",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "SIG",
      "headRefOid": "5f909c33f6b10070300a183921a77a7dc6bf115d",
      "closedAt": "2024-08-26T11:50:28Z",
      "mergedAt": "2024-08-26T11:50:28Z",
      "mergedBy": "knmeynell",
      "mergeCommit": {
        "oid": "1f615a44fb8a3221a3068e2e59a7c0f673bb5484"
      },
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "> From: Harald Alvestrand <harald@alvestrand.no>\nDate: 7 September 2024 at 02:16:59 CEST\nTo: Nicola Rustignoli <nic@scion.org>, Eliot Lear <lear@lear.ch>\nCc: draft-dekater-scion-controlplane@ietf.org, Kevin Meynell <kme@scion.org>, Dominik Roos <roos@anapaya.net>\nSubject: Re: [RFC-Ed-Board] SCION - some initial thoughts\n\n\ufeff\n> I still don't think you have enough info on the IP gateway.\n\n> In particular - does the IP gateway pair (entry + exit) act like a NAT box, matching the source address in the source domain to the gateway address in the destination domain, or is it an one-way tunnel of unchanged bits?\n\n> In both cases - where are the IP addresses (or equivalent) carried through the tunnel? As part of the SCION address (as the presence of those forms of address in the endpoint scheme seems to indicate), or as part of the packet?\n\n> And if the addresses are mapped, who takes care of the payload modifications that any NAT needs to do?\n\nHarald\n",
          "createdAt": "2024-09-07T08:10:36Z",
          "updatedAt": "2024-09-07T08:11:07Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786EacvL",
          "commit": {
            "abbreviatedOid": "f121b2b"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Nice scrub too.\r\n",
          "createdAt": "2024-08-06T14:44:25Z",
          "updatedAt": "2024-08-13T17:29:07Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Subject to Nico confirming my understanding, I would suggest adding the following (in the hope of clarifying the situation for the readers):\r\n\r\na SIG, as viewed by non-SCION hosts, reside inside the same AS internal network. Non-scion hosts used the SIG as a default router. In terms of network topology, the SIG has the same relationship with non-SCION hosts as the border router with SCION hosts.\r\n",
              "createdAt": "2024-08-06T14:44:25Z",
              "updatedAt": "2024-08-13T17:29:07Z"
            },
            {
              "originalPosition": 4,
              "body": "May be we could title this \"interoperability with IP\" or \"support for IP-only hosts\"; just so it answers the question on the audience's mind. And segue with a one line introducing the rest...something like \"interoperability is ensured by SCION IP Gateway devices\".",
              "createdAt": "2024-08-06T14:50:31Z",
              "updatedAt": "2024-08-13T17:29:07Z"
            },
            {
              "originalPosition": 12,
              "body": "Overall I found your text clear and concise. Now we have a choice:\r\n* Leave it at that and see if that's enough.\r\n* Say explicitly that the tunneling and route-trading protocols are not mandated by this draft (and-see-this-doc-for-current-practice)\r\n* Propose the current tunneling protocol as a standard but leave the route-trading business up the gateway implementors (pretty-much leaving it at what your last paragraph says).\r\n* Describe everything :-(\r\n* Any other option?",
              "createdAt": "2024-08-06T14:54:30Z",
              "updatedAt": "2024-08-13T17:29:07Z"
            },
            {
              "originalPosition": 11,
              "body": "used the SIG -> use the SIG. Sorry.\r\n",
              "createdAt": "2024-08-13T17:26:39Z",
              "updatedAt": "2024-08-13T17:29:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786GLzIG",
          "commit": {
            "abbreviatedOid": "5bc1781"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-21T15:45:32Z",
          "updatedAt": "2024-08-21T15:45:32Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": ">a SIG, as viewed by non-SCION hosts, reside inside the same AS internal network.\r\n\r\nThis is true in some cases, but not all. For example, in cases such as SBAS the SIG might be deployed in a \"remote\" AS, and I believe this  may be the case also for some Gate deployments\r\n\r\n>  Non-scion hosts used the SIG as a default router. \r\n\r\nThis means that the SIG is on the same L2 as IP hosts. It could be, but in many cases the SIG is at the edge of the corporate network (see example topos: https://docs.anapaya.net/en/release-v0.36/gate/deployment/ ), so there is some IP routing between the SIG and endpoints. \r\n\r\n>  In terms of network topology, the SIG has the same relationship with non-SCION hosts as the border router with SCION hosts. \r\n\r\nI'd say that the SIG is usually deployed at the edge of the customer network. \r\n\r\n \r\n",
              "createdAt": "2024-08-21T15:45:32Z",
              "updatedAt": "2024-08-21T15:45:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786GLz24",
          "commit": {
            "abbreviatedOid": "5bc1781"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-21T15:46:54Z",
          "updatedAt": "2024-08-21T15:46:54Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n# Interoperability: SCION IP Gateway\r\n```\r\nI like it, how about this?",
              "createdAt": "2024-08-21T15:46:54Z",
              "updatedAt": "2024-08-21T15:46:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786GgYOG",
          "commit": {
            "abbreviatedOid": "5bc1781"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-23T08:10:58Z",
          "updatedAt": "2024-08-23T08:10:58Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Added it to my changes",
              "createdAt": "2024-08-23T08:10:58Z",
              "updatedAt": "2024-08-23T08:10:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786Gg-FX",
          "commit": {
            "abbreviatedOid": "5bc1781"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-23T09:26:45Z",
          "updatedAt": "2024-08-23T09:26:45Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I added this to the text: \r\n\r\n> A SIG is typically deployed inside the same AS internal network as its non-SCION hosts. In an enterprise scenario, it is usually deployed at the edge of the enterprise network. ",
              "createdAt": "2024-08-23T09:26:45Z",
              "updatedAt": "2024-08-23T09:26:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786GhFxh",
          "commit": {
            "abbreviatedOid": "42e355f"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Thanks a lot @knmeynell, concise and effective. There are a couple of details that I've either changed or commented, let's discuss!",
          "createdAt": "2024-08-23T09:42:09Z",
          "updatedAt": "2024-08-23T09:42:50Z",
          "comments": [
            {
              "originalPosition": 818,
              "body": "```suggestion\r\nAn ingress SIG encapsulates IP packets within SCION packets and sends them across a SCION network to an egress SIG. The egress SIG decapsulates the IP packets from the SCION packets and forwards them towards their destination IP address. The SIGs at either end of a tunnel act as routers from the perspective of IP, whilst acting as SCION endpoints from the perspective of the SCION network.\r\n```\r\n\r\n>  Both IPv4 and IPv6 packets may be encapsulated, but no other types of packets are supported. \r\n\r\nThis is a limitation of the SIG framing protocol, that we do not describe in detail (in my rewording, I just mention that two SIGs should speak a common tunneling protocol between each other). I'd therefore not mention this.\r\n\r\n> Hosts within SCION networks that wish to be reachable from external IP networks must have public IP addresses, although this does not preclude the use of Network Address Translation. \r\n\r\nWhat do you mean with this, I don't really understand. If this is referring to IP hosts, isn't it always like this? ",
              "createdAt": "2024-08-23T09:42:09Z",
              "updatedAt": "2024-08-23T09:42:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786Gwun6",
          "commit": {
            "abbreviatedOid": "5bc1781"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-26T15:02:31Z",
          "updatedAt": "2024-08-26T15:02:32Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "> Leave it at that and see if that's enough.\r\n \r\nP.S. we will go for this approach, I'll shoot an email to Eliot and Harald\r\n",
              "createdAt": "2024-08-26T15:02:31Z",
              "updatedAt": "2024-08-26T15:02:32Z"
            }
          ]
        }
      ]
    },
    {
      "number": 49,
      "id": "PR_kwDOKYa778539rVS",
      "title": "describe scmp and bfd.",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/49",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I added an entire section dedicated to link failures, with a subsection for detection (BFD) and a subsection for notification (SCMP).\r\n\r\nFor SCMP: I copied the SCMP description in our manuals but reduced it to the 3 message types that we need for path recovery. I included the message too big because we know we'll have to talk about that too. Then I described what the router does with them in my own words.\r\n\r\nFor BFD, I created a dedicated subsection and moved and expanded what little text we had, I have not described the bootstrapping because I thought it'd be too much, but I think it might be ok to add it. Let me know what you think.\r\n\r\nCleaned-up mentions of those here and there to turn them into references to the above.\r\n\r\nFixes #36 \r\nFixes #37 \r\nFixes #41 ",
      "createdAt": "2024-08-09T15:50:06Z",
      "updatedAt": "2024-08-26T12:39:33Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "c8ea5a4b3e8d8f46969634fccd873d3b91c94112",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "linkfailures",
      "headRefOid": "f00079b543150f631ffb9c90018211704290b95f",
      "closedAt": "2024-08-26T11:44:22Z",
      "mergedAt": "2024-08-26T11:44:22Z",
      "mergedBy": "knmeynell",
      "mergeCommit": {
        "oid": "351994e4d26a027f80cc861ee4a5c0f60ba49213"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786GvClD",
          "commit": {
            "abbreviatedOid": "f00079b"
          },
          "author": "knmeynell",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-26T11:44:04Z",
          "updatedAt": "2024-08-26T11:44:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 50,
      "id": "PR_kwDOKYa77854V9ri",
      "title": "Changes to SCION Header Specification section",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/50",
      "state": "CLOSED",
      "author": "knmeynell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-08-14T10:58:05Z",
      "updatedAt": "2024-10-09T17:12:45Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "c8ea5a4b3e8d8f46969634fccd873d3b91c94112",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "headerspec",
      "headRefOid": "21b1322918d52995b4ce14785058e70a8f088657",
      "closedAt": "2024-08-25T18:03:49Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Duplicate of #51 , @knmeynell feel free to  delete this branch as we are already reviewed these changes in #51 ",
          "createdAt": "2024-08-25T18:03:49Z",
          "updatedAt": "2024-08-25T18:03:49Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 51,
      "id": "PR_kwDOKYa77854ZJu7",
      "title": "Substantial updates",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/51",
      "state": "MERGED",
      "author": "knmeynell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "knmeynell"
      ],
      "labels": [],
      "body": "1. Incorporated Nico's review notes (mostly)\r\n2. Rationalised text\r\n3. Removed duplicate notes and unnecessary repetition \r\n4. Clarified and made use of terminology more consistent\r\n5. Improved grammar and text flow\r\n6. Amalgamated some sub-sections to reduce number of levels\r\n\r\nContributes to \r\n\r\n- #45 \r\n- #41 (partially)\r\n- Resolves #35 \r\n\r\nTODO: \r\n* [ ] Some terminology changes may have to be replicated across other drafts\r\n* [ ] Hyphens must me removed also from CP and PKI drafts",
      "createdAt": "2024-08-14T18:13:00Z",
      "updatedAt": "2024-08-26T15:55:15Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "1f615a44fb8a3221a3068e2e59a7c0f673bb5484",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "other-fixes",
      "headRefOid": "83987ee326d4e0d1eeef07c281083221a2a0deaa",
      "closedAt": "2024-08-26T15:55:12Z",
      "mergedAt": "2024-08-26T15:55:12Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "eeb53347f5328abcb2ffe9e0c4b856126b4f8550"
      },
      "comments": [
        {
          "author": "knmeynell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Conflicts resolved, except 'Empty Path'",
          "createdAt": "2024-08-26T12:02:40Z",
          "updatedAt": "2024-08-26T12:02:40Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786GiL0v",
          "commit": {
            "abbreviatedOid": "c3c22aa"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Thanks a lot, looks good! \r\nI fixed a few typos and other things directly, and left some more proposed changes here. @knmeynell  Let's discuss after you had a look :\r\n\r\n- Use lf \"-\"\r\n- A couple of open points \r\n- Replicating terminology changes",
          "createdAt": "2024-08-23T12:25:53Z",
          "updatedAt": "2024-08-25T17:57:46Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "```suggestion\r\n**Egress/Ingress**: refers to the direction of travel. In SCION, path construction with beaconing happens in one direction, while actual traffic might follow the opposite direction. This document clarifies on a case-by-case basis whether 'egress' or 'ingress' refers to the direction of travel of the SCION packet or to the direction of beaconing.\r\n```\r\nI think this is coming from the fact that overall our usage of words \"egress/ingress\" is a bit tricky, because data packets and beacons may traverse routers/interfaces in opposite directions, therefore an egress packet might go out via the ingress interface in a hop field, if the path is reversed.  \r\n\r\nI suggest that we either: \r\n*  don't add the definition above\r\n*  add something else about \"Egress/Ingress\", like: \r\n\r\n> **Egress/Ingress** in this document refer to the direction of travel. Keep in mind that in SCION, path construction with beaconing happens in one direction, while actual traffic might follow the opposite direction. In this document, we clarify case by case whether \"egress/Ingress\" refer to the direction of travel of the SCION packet or to the direction of beaconing.\r\n",
              "createdAt": "2024-08-23T12:25:53Z",
              "updatedAt": "2024-08-26T11:32:10Z"
            },
            {
              "originalPosition": 43,
              "body": "```suggestion\r\n**Forwarding Path**: A forwarding path is a complete end-to-end path between two SCION endpoints which is used to transmit packets in the data plane. It can be created with a combination of up to three path segments (an up segment, a core segment, and a down segment).\r\n```",
              "createdAt": "2024-08-23T12:27:00Z",
              "updatedAt": "2024-08-25T17:57:30Z"
            },
            {
              "originalPosition": 49,
              "body": ">  path-segment construction beacons (PCBs) \r\n\r\nI remember that Corine followed this rule:\r\n* If path-segment works as an \"adjective\", e.g.  path-segment construction beacons, then use the -\r\n* If it is a proper noun, then do not use - \r\n\r\n@knmeynell how do you feel about this? Need some native speaker opinion :) ",
              "createdAt": "2024-08-23T12:30:26Z",
              "updatedAt": "2024-08-25T17:57:30Z"
            },
            {
              "originalPosition": 55,
              "body": "```suggestion\r\n**Interface Identifier (Interface ID)**: A 16-bit identifier that designates a SCION interface at the end of a link connecting two SCION ASes, with each interface belonging to one border router. Hop fields describe the traversal of an AS by a pair of interface IDs called `ConsIngress` and `ConsEgress`, as they refer to the ingress and egress interfaces in the direction of path construction (beaconing). The Interface ID MUST be unique within each AS. Interface ID 0 is not a valid identifier as implementations MAY use it as the \"unspecified\" value.\r\n```\r\n\r\nTHis partiially handles: \r\n* #41 ",
              "createdAt": "2024-08-23T12:39:48Z",
              "updatedAt": "2024-08-25T17:57:30Z"
            },
            {
              "originalPosition": 787,
              "body": "```suggestion\r\nThe Hop Field MAC is generally calculated at a current AS<sub>i</sub> as follows:\r\n```",
              "createdAt": "2024-08-25T14:59:56Z",
              "updatedAt": "2024-08-25T17:57:30Z"
            },
            {
              "originalPosition": 861,
              "body": "```suggestion\r\n[](#hf-mac-calc) provides a general formula to compute MAC<sub>i</sub>, but at each SCION router the expression `SegID XOR MAC_0 [:2] ... XOR MAC_i-1 [:2]` is replaced by Acc<sub>i</sub>. This results in the following alternative procedure for the computation of MAC<sub>i</sub> at SCION routers:\r\n```",
              "createdAt": "2024-08-25T15:04:38Z",
              "updatedAt": "2024-08-25T17:57:30Z"
            },
            {
              "originalPosition": 866,
              "body": "```suggestion\r\nDuring forwarding, SCION routers at each AS<sub>i</sub> update the Acc field in the packet header so that it contains the correct input value of Acc for the next AS in the path segment to be able to calculate the MAC over its Hop Field. Note that the correct input value of the `Acc` field depends on the direction of travel.\r\n```",
              "createdAt": "2024-08-25T15:05:31Z",
              "updatedAt": "2024-08-25T17:57:30Z"
            },
            {
              "originalPosition": 952,
              "body": "```suggestion\r\nAs described in [](#header), the path header of the data plane packets only contains a sequence of Info Fields and Hop Fields without any additional data from the corresponding PCBs. The SCION path also does not contain any AS numbers - except for the source and destination ASes - and there is no field explicitly defining the type of each segment (up, core, or down). This chapter describes the required steps for the source endpoint and SCION routers to respectively craft and forward a data packet.\r\n```",
              "createdAt": "2024-08-25T15:13:07Z",
              "updatedAt": "2024-08-25T17:57:30Z"
            },
            {
              "originalPosition": 1008,
              "body": "```suggestion\r\nDuring forwarding, each SCION router verifies the path contained in the packet header. Each SCION router also MUST correctly verify or set the value of the Accumulator in the `Acc` field for the next AS to be able to verify its Hop Field. The exact operations differ based on the location of the AS on the path.\r\n```\r\nRewording because one router verifies the received acc, the other one sets it for the next AS (depending on direction of construction)",
              "createdAt": "2024-08-25T15:55:13Z",
              "updatedAt": "2024-08-25T17:57:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786Gt4PS",
          "commit": {
            "abbreviatedOid": "1342a18"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-26T08:58:11Z",
          "updatedAt": "2024-08-26T08:58:11Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "Discussed, we agreed to de-hyphenate ",
              "createdAt": "2024-08-26T08:58:11Z",
              "updatedAt": "2024-08-26T08:58:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786GxJw9",
          "commit": {
            "abbreviatedOid": "83987ee"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-26T15:54:02Z",
          "updatedAt": "2024-08-26T15:54:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 57,
      "id": "PR_kwDOKYa77855dwYf",
      "title": "Clarify the router alert flags and relationship to the ConsIngress/egress fields",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/57",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #41 ",
      "createdAt": "2024-08-26T16:59:16Z",
      "updatedAt": "2024-09-14T10:02:20Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "967778b54aae92e2465217740e59042f25934fca",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "ingressegress",
      "headRefOid": "2199c4b4ed20083de8b481725ea8040ad4c15e61",
      "closedAt": "2024-09-14T10:02:12Z",
      "mergedAt": "2024-09-14T10:02:12Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "1b82c112ec1987c70e3b651d48902efcc8b4a494"
      },
      "comments": [
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Adopted your suggestions. You still need to approve. (if I'm not to use the red button).\r\n",
          "createdAt": "2024-09-13T09:12:58Z",
          "updatedAt": "2024-09-13T09:12:58Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786JLF4h",
          "commit": {
            "abbreviatedOid": "f99fa71"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "I proposed a few wording changes that I believe make the text clearer. Let me know what you think, and if you like them, feel free to merge ",
          "createdAt": "2024-09-12T20:48:34Z",
          "updatedAt": "2024-09-12T21:09:18Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "```suggestion\r\n- `I`: The Ingress Router Alert flag. If this has value \"1\" and the packet is received on the interface with ID  corresponding to the value of `ConsIngress`, the router SHOULD process the L4 payload in the packet.\r\n- `E`: The Egress Router Alert flag. If this has value \"1\" and the packet is received on the interface with ID  corresponding to the value of `ConsEgress`, the router SHOULD process the L4 payload in the packet.\r\n```\r\n\r\nI think here it is important to say that the flags refer to the construction direction. I proposed a wording",
              "createdAt": "2024-09-12T20:48:34Z",
              "updatedAt": "2024-09-12T21:09:18Z"
            },
            {
              "originalPosition": 68,
              "body": "```suggestion\r\nSetting multiple router alert flags on a path SHOULD be avoided. This is because the router for which the corresponding Router Alert flag is set to \"1\" may process the request without further forwarding it along the path. Use cases that require multiple routers/hops on the path to process a packet SHOULD rely on a hop-by-hop extension (see [](#ext-header)).\r\n```",
              "createdAt": "2024-09-12T21:00:59Z",
              "updatedAt": "2024-09-12T21:09:18Z"
            },
            {
              "originalPosition": 66,
              "body": "```suggestion\r\nRouter alert flags work similarly to {{RFC2711}} and allow a sender to address a specific router on the path without knowing its address. Processing the L4 payload in the packet means that the router will treat the payload of the packet as a message to itself and parse it according to the value of the `NextHdr` field. Such messages include [Traceroute Requests](#traceroute-request)\r\n```",
              "createdAt": "2024-09-12T21:08:25Z",
              "updatedAt": "2024-09-12T21:09:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786JWqc8",
          "commit": {
            "abbreviatedOid": "2199c4b"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-14T10:02:03Z",
          "updatedAt": "2024-09-14T10:02:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 58,
      "id": "PR_kwDOKYa77855i3xc",
      "title": "fix bfd description in empty path, add JC as author",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/58",
      "state": "MERGED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Clarification to #37 ",
      "createdAt": "2024-08-27T09:44:20Z",
      "updatedAt": "2024-09-03T11:25:42Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "eeb53347f5328abcb2ffe9e0c4b856126b4f8550",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "bfd-fix",
      "headRefOid": "5a9f27276f3310eaa3b7d5f388171040e4bb3e36",
      "closedAt": "2024-09-03T11:25:38Z",
      "mergedAt": "2024-09-03T11:25:38Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "967778b54aae92e2465217740e59042f25934fca"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786HukgZ",
          "commit": {
            "abbreviatedOid": "5a9f272"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-03T11:14:01Z",
          "updatedAt": "2024-09-03T11:14:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 59,
      "id": "PR_kwDOKYa77855uZrU",
      "title": "SCMP review",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/59",
      "state": "MERGED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Follow up to #49.  Contributes to #36 \r\n\r\n[Diff with last submission](https://author-tools.ietf.org/api/iddiff?doc_1=draft-dekater-scion-dataplane&url_2=https://scionassociation.github.io/scion-dp_I-D/scmp_review/draft-dekater-scion-dataplane.txt)",
      "createdAt": "2024-08-28T15:11:21Z",
      "updatedAt": "2024-09-18T16:41:42Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "1e5971d688e9428d6726eabc2546a3303fc2f25c",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "scmp_review",
      "headRefOid": "fac1ca6899d0bb5c97776c9469f823a7e2f17d7d",
      "closedAt": "2024-09-17T09:46:12Z",
      "mergedAt": "2024-09-17T09:46:12Z",
      "mergedBy": "jiceatscion",
      "mergeCommit": {
        "oid": "375e24dd5683039c1a0bb1e5cb8ca6c70cd16df9"
      },
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "I had an overall look at SCMP, I have some questions: \r\n- Shall we also describe echo messages at this point?\r\n- Section \"## Processing Rules\" has wording that could be imprived\r\n  - Why 1232 bytes ? What if there is a lower MTU for whatever reason? --> Check IPv6 minimum MTU, related to https://github.com/scionassociation/scion-dp_I-D/issues/39 \r\n- We need to add about SMP authentication in security considerations\r\n- We should say traceroute can be used for geofencing (check with @oncilla )",
          "createdAt": "2024-08-30T14:58:29Z",
          "updatedAt": "2024-09-03T09:23:47Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": ">     * Shall we also describe echo messages at this point?\r\nI see no reason to.\r\n\r\n>     * Section \"## Processing Rules\" has wording that could be imprived\r\nAnything specific?\r\n\r\nWorking on the rest.\r\n",
          "createdAt": "2024-09-05T08:26:35Z",
          "updatedAt": "2024-09-05T08:26:35Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": ">       * Why 1232 bytes ? What if there is a lower MTU for whatever reason? --> Check IPv6 minimum MTU \r\n\r\nHere's sortta why:\r\nIPV6 requires a minimum 1280 bytes MTU. The IPV6 HDR is 40 bytes (if no extensions). Since we send SCMP packets over UDP, that's another 8. 1280-40-8 = 1232. Now, that only makes sense over V6 links. I presume that for V4 links the author assumed we would rely on either UDP fragmentation or non-stupid MTU. It is widely accepted that no IPV4 router in use today has links with MTU below 1280. So, it makes sense to use 1280 from V6 as the only floor that maters.\r\n\r\nIn practice, this PR is yours, do you want me to create another PR to add this explanation?",
          "createdAt": "2024-09-05T08:47:24Z",
          "updatedAt": "2024-09-05T08:49:35Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I added an explanation regarding 1232. Also added ping and fixed a cpl of table/figure issues.\r\n",
          "createdAt": "2024-09-10T16:16:41Z",
          "updatedAt": "2024-09-10T16:16:41Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Hi @jiceatscion , thanks a lot for your previous changes! \r\nI reworded the section about BDF and link failures, and I tried to make it a bit more concise. I also edited a couple of SCMP header figures. Could you have a quick look, and if ok, feel free to merge this :)  \r\n\r\nEdit: Last question: should we make  section 6 \"Handling Link Failures\" part of SCMP? IMHO it kind of belongs there rather than a separate section ",
          "createdAt": "2024-09-14T14:05:58Z",
          "updatedAt": "2024-09-14T14:07:02Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I disagree with merging link failures in SCMP. I think it was like that in some earlier iteration and it ends-up messy. SCMP is for many things besides link failure. Link failure is about more than SCMP (there's BFD too). So, neither is a proper subset of the other.",
          "createdAt": "2024-09-17T09:43:06Z",
          "updatedAt": "2024-09-17T09:43:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786HGWFm",
          "commit": {
            "abbreviatedOid": "f830277"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "@jiceatscion what do you think about my comments?  I feel SCMP still needs some work..",
          "createdAt": "2024-08-28T15:12:54Z",
          "updatedAt": "2024-08-30T15:16:05Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "@jiceatscion why did you remove the InfoBlock and Datablock from the figure? They are now in the description and not in the figure, and it feels somehow inconsistent",
              "createdAt": "2024-08-28T15:12:54Z",
              "updatedAt": "2024-08-30T15:16:05Z"
            },
            {
              "originalPosition": 69,
              "body": "> The checksum is the 16-bit one's complement of the one's complement sum of the\r\nentire SCMP message, \r\n\r\nWhat does it mean? Can it be said in a less intricate way?",
              "createdAt": "2024-08-30T14:59:15Z",
              "updatedAt": "2024-08-30T15:16:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786HwwBT",
          "commit": {
            "abbreviatedOid": "479d493"
          },
          "author": "oncilla",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-03T14:54:52Z",
          "updatedAt": "2024-09-03T14:54:52Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "This is taken word for word from https://www.rfc-editor.org/rfc/rfc4443.html#section-2.3",
              "createdAt": "2024-09-03T14:54:52Z",
              "updatedAt": "2024-09-03T14:54:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786Hw8M0",
          "commit": {
            "abbreviatedOid": "e1b2434"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-03T15:14:18Z",
          "updatedAt": "2024-09-03T15:14:18Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "I thought I'd removed it from the text as well. The two blocks description serve no purpose. I've deleted the reference.",
              "createdAt": "2024-09-03T15:14:18Z",
              "updatedAt": "2024-09-03T15:14:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786Hw_IK",
          "commit": {
            "abbreviatedOid": "479d493"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-03T15:18:56Z",
          "updatedAt": "2024-09-03T15:18:56Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "What I plagiarized was actually this: https://docs.scion.org/en/latest/protocols/scmp.html#checksum-calculation :-)\r\n",
              "createdAt": "2024-09-03T15:18:56Z",
              "updatedAt": "2024-09-03T15:18:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786H6Lgk",
          "commit": {
            "abbreviatedOid": "479d493"
          },
          "author": "oncilla",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-04T13:15:37Z",
          "updatedAt": "2024-09-04T13:15:38Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "Yes, and now guess where that was plagiarized from :) ",
              "createdAt": "2024-09-04T13:15:37Z",
              "updatedAt": "2024-09-04T13:15:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786H6SwP",
          "commit": {
            "abbreviatedOid": "479d493"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-04T13:24:01Z",
          "updatedAt": "2024-09-04T13:24:01Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "Of course. What I meant is that we have quite a precedent for that phrasing. 200 years from now it might be on T-shirts. Nico, can we keep it?",
              "createdAt": "2024-09-04T13:24:01Z",
              "updatedAt": "2024-09-04T13:24:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786H6ZtN",
          "commit": {
            "abbreviatedOid": "479d493"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-04T13:31:54Z",
          "updatedAt": "2024-09-04T13:31:54Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "How about SCION day swag? \r\n![image](https://github.com/user-attachments/assets/acf17993-96b8-41ad-aadb-a2f8ecffaf2c)\r\n",
              "createdAt": "2024-09-04T13:31:54Z",
              "updatedAt": "2024-09-04T13:33:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786H72YC",
          "commit": {
            "abbreviatedOid": "479d493"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-04T15:43:52Z",
          "updatedAt": "2024-09-04T15:43:53Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "Hahaha.. well, if this wording is also used in in [rfc4443.html#section-2.3](https://www.rfc-editor.org/rfc/rfc4443.html#section-2.3), let's leave it!",
              "createdAt": "2024-09-04T15:43:52Z",
              "updatedAt": "2024-09-04T15:43:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786Jo3Ph",
          "commit": {
            "abbreviatedOid": "fac1ca6"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I made a couple of very minor changes, removed a stray preposition here, added a missing article there...\r\n",
          "createdAt": "2024-09-17T09:45:55Z",
          "updatedAt": "2024-09-17T09:45:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 60,
      "id": "PR_kwDOKYa7785504Y-",
      "title": "Clarify the validity of peering links",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/60",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In anticipation of the TC or Adrian confirming the irrelevance of the Core-Core peering prohibition, removed the associated language in the draft and explicitly state that Core-Core peering is possible. Also clarified that this still does not permit valley paths.\r\n\r\nAlso clarified the rules applied by a router to determine if a hop is peering hop.\r\n\r\nFixes to #56 \r\n\r\n- [ ] ~If merged, it must be replicated across drafts~\r\n",
      "createdAt": "2024-08-29T12:33:28Z",
      "updatedAt": "2024-09-14T14:36:46Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "1e5971d688e9428d6726eabc2546a3303fc2f25c",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "peering",
      "headRefOid": "292b1d475b3199cb71c39a3734c647c929793508",
      "closedAt": "2024-09-14T14:36:43Z",
      "mergedAt": "2024-09-14T14:36:43Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "6eac45f112e5f876c356bdfaa796cd3be8e7aca7"
      },
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Apparently, the CP draft does not need any change: \r\n```\r\n   *  _Peering_ links exist between ASes with a (settlement-free or\r\n      paid) peering relationship.  They can be established between any\r\n      two ASes (core or non-core).  Peering links can cross ISD\r\n      boundaries.\r\n  ```",
          "createdAt": "2024-09-03T08:39:46Z",
          "updatedAt": "2024-09-03T08:39:46Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786JXH4a",
          "commit": {
            "abbreviatedOid": "292b1d4"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM, thanks a lot! ",
          "createdAt": "2024-09-14T14:36:38Z",
          "updatedAt": "2024-09-14T14:36:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 61,
      "id": "PR_kwDOKYa77855-9xW",
      "title": "clarify router checks",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/61",
      "state": "MERGED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Resolves #52\r\n\r\n@jiceatscion this is based on your comment, what do you think? It is a quick & dirty change for now, it might need a bit of polishing",
      "createdAt": "2024-08-30T14:24:01Z",
      "updatedAt": "2024-09-03T10:03:39Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "eeb53347f5328abcb2ffe9e0c4b856126b4f8550",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "router_checks",
      "headRefOid": "84fd2f7ea627fc78190b8b48ceedcd8885f2bab9",
      "closedAt": "2024-09-03T10:03:35Z",
      "mergedAt": "2024-09-03T10:03:35Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "1d66aa0f733d1cc0a349cad736dfa9d12591afac"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786HdBau",
          "commit": {
            "abbreviatedOid": "fa1eddf"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-30T14:28:26Z",
          "updatedAt": "2024-08-30T14:28:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 62,
      "id": "PR_kwDOKYa77856_-fe",
      "title": "layer2: rephrase the L2 AS-AS link description",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/62",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #55 ",
      "createdAt": "2024-09-10T15:15:55Z",
      "updatedAt": "2024-09-14T14:40:29Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "967778b54aae92e2465217740e59042f25934fca",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "l2-link",
      "headRefOid": "9fc9abf558724539c6491c251a2ead6a24675b22",
      "closedAt": "2024-09-14T14:40:26Z",
      "mergedAt": "2024-09-14T14:40:26Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "2b28edae7cf95183ae890597eca5dc4c0a430f9d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786JXJjf",
          "commit": {
            "abbreviatedOid": "9fc9abf"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2024-09-14T14:40:13Z",
          "updatedAt": "2024-09-14T14:40:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 63,
      "id": "PR_kwDOKYa77857KEdf",
      "title": "flow_label: rename flow ID to Flow Label and document by reference to RFC6437",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/63",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #54 ",
      "createdAt": "2024-09-11T12:44:39Z",
      "updatedAt": "2024-09-14T10:04:26Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "967778b54aae92e2465217740e59042f25934fca",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "flow_label",
      "headRefOid": "c8518ebae1ca21a60c6dc10446147ad2d10592b8",
      "closedAt": "2024-09-14T10:04:23Z",
      "mergedAt": "2024-09-14T10:04:23Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "1e5971d688e9428d6726eabc2546a3303fc2f25c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786JWqhR",
          "commit": {
            "abbreviatedOid": "c8518eb"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-14T10:04:06Z",
          "updatedAt": "2024-09-14T10:04:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 64,
      "id": "PR_kwDOKYa77858AhSv",
      "title": "security_considerations: payload modification",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/64",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #44 ",
      "createdAt": "2024-09-19T09:33:25Z",
      "updatedAt": "2024-09-19T17:35:12Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "375e24dd5683039c1a0bb1e5cb8ca6c70cd16df9",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "payload_integrity",
      "headRefOid": "5173ceb620e4cba245cc9b2eda362547548461f2",
      "closedAt": "2024-09-19T17:35:06Z",
      "mergedAt": "2024-09-19T17:35:06Z",
      "mergedBy": "jiceatscion",
      "mergeCommit": {
        "oid": "6f2163e8afb52f5a696033115b7f25c2302b2fe0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786KC1QZ",
          "commit": {
            "abbreviatedOid": "5173ceb"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2024-09-19T16:04:04Z",
          "updatedAt": "2024-09-19T16:04:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 65,
      "id": "PR_kwDOKYa77858KGr5",
      "title": "mtu: add clarifications",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/65",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #39 ",
      "createdAt": "2024-09-20T11:55:08Z",
      "updatedAt": "2024-10-04T09:16:48Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "6f2163e8afb52f5a696033115b7f25c2302b2fe0",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "dp_mtu",
      "headRefOid": "b8a30b8afe91dd4fc6343bac6fe462e9b6759b47",
      "closedAt": "2024-10-03T16:40:07Z",
      "mergedAt": "2024-10-03T16:40:07Z",
      "mergedBy": "jiceatscion",
      "mergeCommit": {
        "oid": "ab0bf8c9e5de1861244815e3011d5f7539d2688b"
      },
      "comments": [
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I proposed some changes.\r\n> \r\n> Also, would the # Fragmentation section be a better fit after the MTU section? I feel the MTU section has a lot of explanations that can provide more background for fragmentation\r\n\r\nDone.",
          "createdAt": "2024-10-03T09:08:11Z",
          "updatedAt": "2024-10-03T09:16:12Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786LpZko",
          "commit": {
            "abbreviatedOid": "cdce98c"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "I proposed some changes. \r\n\r\nAlso, would the # Fragmentation section be a better fit after the MTU section? I feel the MTU section has a lot of explanations that can provide more background for fragmentation",
          "createdAt": "2024-10-02T13:07:08Z",
          "updatedAt": "2024-10-03T08:47:38Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nThe UDP/SCION layer MUST NOT fragments packets, not even at the source endpoint. Applications MUST comply with the MTU of the paths that they use.\r\n\r\nSCION is agnostic to datagram fragmentation by the underlay network layer, (e.g. used for intra-AS communication). Implementations SHOULD allow MTU discovery mechanisms such as {{RFC4821}} to be enabled in the underlay and avoid fragmentation. For inter-AS links, using a different configuration is the joint decision of the administrators of the two ASes involved. For intra-AS interfaces using a different configuration is the choice of that AS' administrator alone.\r\n```",
              "createdAt": "2024-10-02T13:07:08Z",
              "updatedAt": "2024-10-03T08:47:38Z"
            },
            {
              "originalPosition": 16,
              "body": "- I reworded the section a bit\r\n- As far as I understand, [Linux uses](https://www.kernel.org/doc/html/v5.8/networking/ip-sysctl.html)  RFC4821, so I added a reference to it. Do you agree, or are you aware of a better reference?\r\n- `The UDP/SCION layer MUST NOT fragments packets` how about other protocols on top of SCION (e.g. TCP/SCION`)? Should they also avoid fragmentation? If so, shall this text be more general?",
              "createdAt": "2024-10-02T13:09:45Z",
              "updatedAt": "2024-10-03T08:47:38Z"
            },
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nSCION requires its underlay protocol to provide a minimum MTU of 1232 bytes. This number results from 1280, the minimum IPv6 MTU as of {{rfc2460}}), minus 48, assuming UDP/IPv6 as underlay. Higher layer protocols such as SCMP rely only on such minimum MTU.\r\n```",
              "createdAt": "2024-10-02T13:53:06Z",
              "updatedAt": "2024-10-03T08:47:38Z"
            },
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nThe MTU of a SCION path is defined as the minimum of the MTUs of the links traversed by that path. The control plane disseminates such values and makes them available to endpoints (see: {{I-D.dekater-scion-controlplane}}, Path MTU).\r\n```",
              "createdAt": "2024-10-02T14:20:09Z",
              "updatedAt": "2024-10-03T08:47:38Z"
            },
            {
              "originalPosition": 32,
              "body": "```suggestion\r\n```\r\nI think this is an exceptional case that would confuse readers and it could be omitted",
              "createdAt": "2024-10-03T08:46:31Z",
              "updatedAt": "2024-10-03T08:47:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786Lxoay",
          "commit": {
            "abbreviatedOid": "cdce98c"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-03T09:02:30Z",
          "updatedAt": "2024-10-03T09:02:31Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "This isn't an exceptional case. It is used heavily by some deployments such as scion lab. I agree that this is not a desirable configuration where security is the objective, but this is an important feature for experimental deployments. I do not think we should hide it. In fact, I think we should mention it somewhere outside the limited context of MTU.",
              "createdAt": "2024-10-03T09:02:30Z",
              "updatedAt": "2024-10-03T09:02:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786Lxq4d",
          "commit": {
            "abbreviatedOid": "92ea0f4"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-03T09:07:28Z",
          "updatedAt": "2024-10-03T09:07:28Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I accepted your suggestion. I wouldn't bother with other protocols since they aren't specified anywhere (is there a TCP/SCION implementation?",
              "createdAt": "2024-10-03T09:07:28Z",
              "updatedAt": "2024-10-03T09:07:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786Lx_Dy",
          "commit": {
            "abbreviatedOid": "92ea0f4"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-03T09:45:53Z",
          "updatedAt": "2024-10-03T09:45:53Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Not sure, maybe we should completely omit details about higher layer protocols and just use a general: \r\n\r\n> Higher layer protocols MUST comply with the MTU of the paths that they use.",
              "createdAt": "2024-10-03T09:45:53Z",
              "updatedAt": "2024-10-03T09:45:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786LyOxh",
          "commit": {
            "abbreviatedOid": "cdce98c"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-03T10:14:17Z",
          "updatedAt": "2024-10-03T10:14:17Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "How about more generic phrasing: \r\n> Should the inter-AS link MTU be unpredictable (e.g. because the inter-AS link is deployed on top of an overlay), then the link's MTU MUST be configured statically to a conservative value. Experience shows that 1280 is a safe value.",
              "createdAt": "2024-10-03T10:14:17Z",
              "updatedAt": "2024-10-03T10:14:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786LydwE",
          "commit": {
            "abbreviatedOid": "bd58066"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-03T10:44:47Z",
          "updatedAt": "2024-10-03T10:44:47Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Sounds good. Done\r\n",
              "createdAt": "2024-10-03T10:44:47Z",
              "updatedAt": "2024-10-03T10:44:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786Lyh6k",
          "commit": {
            "abbreviatedOid": "92ea0f4"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-03T10:54:14Z",
          "updatedAt": "2024-10-03T10:54:14Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Mmm. May be. Fragmentation is actually an IP feature, which UDP may or may not rely on. SCION doesn't have any fragmentation support. So, we probably should just say that and do away with the MUST/MUST not when it comes to UDP/SCION? That would implicitly settle the question for other transports. So, how about:\r\n\"\r\nThe SCION network layer does not support any packet fragmentation; not even at the source endpoint. Upper layer protocols and applications MUST comply with the MTU of the paths that they use.\r\n\"\r\n",
              "createdAt": "2024-10-03T10:54:14Z",
              "updatedAt": "2024-10-03T10:59:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786L02kd",
          "commit": {
            "abbreviatedOid": "92ea0f4"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-03T15:00:27Z",
          "updatedAt": "2024-10-03T15:00:27Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I like it, short and clean. I committed it. Thank you!",
              "createdAt": "2024-10-03T15:00:27Z",
              "updatedAt": "2024-10-03T15:00:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786L06eJ",
          "commit": {
            "abbreviatedOid": "b8a30b8"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Besides the small doubt above, LGTM :) Thanks! ",
          "createdAt": "2024-10-03T15:06:31Z",
          "updatedAt": "2024-10-03T15:09:06Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "@jiceatscion Do ypu know why we mention fragment here? I think we should not. \r\nThis text comes from https://github.com/scionproto/scion/blob/74878a477c7821fb66f8d6a39bdddced590bd91d/doc/protocols/scion-header.rst#L35 ",
              "createdAt": "2024-10-03T15:06:31Z",
              "updatedAt": "2024-10-03T15:09:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786L1sLC",
          "commit": {
            "abbreviatedOid": "b8a30b8"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-03T16:35:31Z",
          "updatedAt": "2024-10-03T16:35:31Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "No idea. I have to assume that when that language was written the decision of whether there would be or would not be any packet fragmentation had not been made. I agree that we should delete these two words.\r\n",
              "createdAt": "2024-10-03T16:35:31Z",
              "updatedAt": "2024-10-03T16:35:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786L7J0_",
          "commit": {
            "abbreviatedOid": "b8a30b8"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-04T09:06:27Z",
          "updatedAt": "2024-10-04T09:06:27Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "OK, can you also change this in scionproto?",
              "createdAt": "2024-10-04T09:06:27Z",
              "updatedAt": "2024-10-04T09:06:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786L7O2C",
          "commit": {
            "abbreviatedOid": "b8a30b8"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-04T09:16:48Z",
          "updatedAt": "2024-10-04T09:16:48Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "Done. see https://github.com/scionproto/scion/pull/4635",
              "createdAt": "2024-10-04T09:16:48Z",
              "updatedAt": "2024-10-04T09:16:49Z"
            }
          ]
        }
      ]
    },
    {
      "number": 67,
      "id": "PR_kwDOKYa77859hUCO",
      "title": "Updated Intro and added Change Log in Appendix",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/67",
      "state": "MERGED",
      "author": "knmeynell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #66 \r\nContributes to #10",
      "createdAt": "2024-10-03T15:59:54Z",
      "updatedAt": "2024-10-08T09:23:44Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "6f2163e8afb52f5a696033115b7f25c2302b2fe0",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "Intro_update",
      "headRefOid": "70b58feb4a584a9bdef7b45b3fccda705a09b98f",
      "closedAt": "2024-10-08T07:38:44Z",
      "mergedAt": "2024-10-08T07:38:44Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "4354eadde8ebd666f5342a1bd8adee2c1de1e23b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786L_zP8",
          "commit": {
            "abbreviatedOid": "9d71f35"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "I added a couple of comments about the intro, let me know your thoughts @knmeynell \r\n\r\nI also reorganized the change log, perhaps we could follow the same structure for other drafts ",
          "createdAt": "2024-10-04T17:48:15Z",
          "updatedAt": "2024-10-04T18:26:32Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Woult it be a better fit if we have these two lines in the beginning of the introduction (e.g line 136, after `... therefore not concerned with intra-domain forwarding.`\r\nThis way we five it more prominence and it does not get lost in the intro.",
              "createdAt": "2024-10-04T17:48:15Z",
              "updatedAt": "2024-10-04T18:26:32Z"
            },
            {
              "originalPosition": 13,
              "body": "Shall we mention SSFN or be more explicit about deployment?\r\n```suggestion\r\nThe SCION architecture was initially developed outside of the IETF by ETH Zurich with significant contributions from Anapaya Systems. It is deployed in the Swiss finance sector to provide resilient connectivity between financial institutions. The aim of this document is to document the existing protocol specification as deployed, and to introduce new concepts that can potentially be further improved to address particular problems with the current Internet architecture.\r\n```",
              "createdAt": "2024-10-04T17:55:04Z",
              "updatedAt": "2024-10-04T18:26:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MJph6",
          "commit": {
            "abbreviatedOid": "9d71f35"
          },
          "author": "knmeynell",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-07T09:00:19Z",
          "updatedAt": "2024-10-07T09:00:19Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I've no strong feelings about it. My own view is that you start with what you're proposing before going onto why you're proposing it, but if it clarifies intentions to the reviewers...",
              "createdAt": "2024-10-07T09:00:19Z",
              "updatedAt": "2024-10-07T09:00:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MSeJ4",
          "commit": {
            "abbreviatedOid": "70b58fe"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-08T07:38:25Z",
          "updatedAt": "2024-10-08T07:38:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 68,
      "id": "PR_kwDOKYa77859mxFe",
      "title": "Expanded on SCION-IP Gateway",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/68",
      "state": "MERGED",
      "author": "knmeynell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #40 ",
      "createdAt": "2024-10-04T10:46:45Z",
      "updatedAt": "2024-10-18T14:26:53Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "ab0bf8c9e5de1861244815e3011d5f7539d2688b",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "SCION-IP_Gateway",
      "headRefOid": "40f62aa8d8854c6f21eca3afdaaae51700a6290d",
      "closedAt": "2024-10-15T08:49:44Z",
      "mergedAt": "2024-10-15T08:49:44Z",
      "mergedBy": "jiceatscion",
      "mergeCommit": {
        "oid": "2789aa33581110a0eafebb1f0faf94b3d38d21ff"
      },
      "comments": [
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For simplicity of the process, I accepted suggestions. I think this is good enough to merge (even if we leave it at that). We can do another pass after that.",
          "createdAt": "2024-10-15T08:33:05Z",
          "updatedAt": "2024-10-15T08:33:05Z"
        },
        {
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Accepted. In the next pass I will mention that the egress SIG is free to buffer packets for re-ordering, or discard; as a unilateral decision. ",
          "createdAt": "2024-10-15T08:48:51Z",
          "updatedAt": "2024-10-15T08:48:51Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786L_WuK",
          "commit": {
            "abbreviatedOid": "4905aa8"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "I made a few changes: \r\n\r\n- step by step description of steps involved when forwarding traffic between two SIGs (based on https://docs.anapaya.net/en/latest/edge/configuration/scion-tunneling/#overview) \r\n- Fixing figures\r\n- Added some TODOs\r\n\r\n- [ ] @oncilla we felt we had to add more to address Harald and Eliot's concerns. Can you have an overall look at this section, and let us know if this is ok?\r\n- [ ] @jiceatscion can you help clarifying the frame fields? (e.g. correctness of field lengths, descriptions)\r\n- [ ] How are some fields set? How about sessions?\r\n- [ ] Also, shall we move the SIG section before security considerations? I think that section is always at the end",
          "createdAt": "2024-10-04T17:17:23Z",
          "updatedAt": "2024-10-04T17:17:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKYa7786MJglA",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-07T08:45:10Z",
          "updatedAt": "2024-10-07T08:45:11Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "\"at the edge an enterprise network\" -> \"at the edge of an enterprise network\"",
              "createdAt": "2024-10-07T08:45:11Z",
              "updatedAt": "2024-10-07T08:45:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MJiJF",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-07T08:47:52Z",
          "updatedAt": "2024-10-07T08:47:52Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "\"with the corresponding remote SIG\" -> \"with other SIGs\". There cannot be a *corresponding* remote SIG until it has been found by way of said dynamic routing protocol or configuration (the latter removing the need to speak for that purpose).\r\n\r\nWe should also answer the implicit question \"what dynamic routing protocol would that be?\" by saying that we don't care and that it's up to the implementation of the family of SIGs being used.",
              "createdAt": "2024-10-07T08:47:52Z",
              "updatedAt": "2024-10-07T08:49:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MJkzP",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-07T08:52:26Z",
          "updatedAt": "2024-10-07T08:52:27Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "\"distinguish between traffic sent by different SIG instances\" -> does this mean \"different SIG /incarnations/ ?\"... that's what the following example seems to imply.\r\n",
              "createdAt": "2024-10-07T08:52:26Z",
              "updatedAt": "2024-10-07T08:52:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MJlND",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-07T08:53:07Z",
          "updatedAt": "2024-10-07T08:53:07Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "\"has a sequence number is used\" -> \"has a sequence number that is used\"",
              "createdAt": "2024-10-07T08:53:07Z",
              "updatedAt": "2024-10-07T08:53:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MJm7f",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-07T08:56:00Z",
          "updatedAt": "2024-10-07T08:56:01Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "Me no speak English good, but... \"established and teared down?\": isn't that supposed to be \"established and torn down\"?",
              "createdAt": "2024-10-07T08:56:00Z",
              "updatedAt": "2024-10-07T08:56:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MJrLv",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "knmeynell",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-07T09:03:11Z",
          "updatedAt": "2024-10-07T09:03:11Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Okay",
              "createdAt": "2024-10-07T09:03:11Z",
              "updatedAt": "2024-10-07T09:03:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MJrbp",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "knmeynell",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-07T09:03:36Z",
          "updatedAt": "2024-10-07T09:03:36Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Okay",
              "createdAt": "2024-10-07T09:03:36Z",
              "updatedAt": "2024-10-07T09:03:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MJr0t",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "knmeynell",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-07T09:04:18Z",
          "updatedAt": "2024-10-07T09:04:18Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "'established and torn down' would be correct.",
              "createdAt": "2024-10-07T09:04:18Z",
              "updatedAt": "2024-10-07T09:04:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MJvsE",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-07T09:11:03Z",
          "updatedAt": "2024-10-07T09:11:03Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "\"if the frame contains only a trailing part of an IP packet\": I think it would be more accurate to say \"if the frame contains only the middle part of an IP packet\". It is more likely than the trailing part, so a more relevant example\". The case where it is the trailing part is a corner case; the packet would have to end exactly where the frame ends for there to be no beginning of packet there. That must happen a bit more often than chance alone, due to the fact that we can't fit a fragment shorter than 20 bytes at the end of a frame, but still a minority case, I think.\r\n",
              "createdAt": "2024-10-07T09:11:03Z",
              "updatedAt": "2024-10-07T09:11:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MJxdL",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-07T09:14:08Z",
          "updatedAt": "2024-10-07T09:14:08Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "I admit that I do not know exactly when/why new sessions are established. It is probably an important and not part of the wire format part of the protocol (so-called choreography) for inter-SIG compatibility. Should we attempt at describing it. I can research it in the code.",
              "createdAt": "2024-10-07T09:14:08Z",
              "updatedAt": "2024-10-07T09:14:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MJ7-J",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-07T09:32:27Z",
          "updatedAt": "2024-10-07T09:32:28Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "Should we say what happens if a frame goes missing/re-ordered and the sequence cannot be re-assembled? The code we have in the OS impl is pretty rustic. It makes the optimistic assumption that this rarely happens and discards everything in its buffer when a gap appears (i.e. when a frame arrives that is not the next one in sequence). So just like IP fragmentation: fragment re-ordering is the death of the packet.\r\n",
              "createdAt": "2024-10-07T09:32:27Z",
              "updatedAt": "2024-10-07T09:32:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MKFcl",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Made some suggestions.",
          "createdAt": "2024-10-07T09:49:02Z",
          "updatedAt": "2024-10-07T09:49:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKYa7786MWWtI",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-08T14:22:50Z",
          "updatedAt": "2024-10-08T14:22:51Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "I reworded into: \r\n> To achieve this, SIGs may be pre-configured with static IP prefix to remote SIG SCION address mappings. Alternatively, a pair of SIGs may be configured to speak a dynamic routing protocol between each other. Choice of protocol is outside of the scope of this document and it is left up to implementors.\r\n\r\n@jiceatscion Please resolve this thread if it works",
              "createdAt": "2024-10-08T14:22:50Z",
              "updatedAt": "2024-10-08T14:23:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MWX9y",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-08T14:24:38Z",
          "updatedAt": "2024-10-08T14:24:39Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "Yes, can you find something more about how these sessions are established?",
              "createdAt": "2024-10-08T14:24:38Z",
              "updatedAt": "2024-10-08T14:24:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MWYh2",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-08T14:25:25Z",
          "updatedAt": "2024-10-08T14:25:26Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "@knmeynell I did not see this change in the text,  committed it now.",
              "createdAt": "2024-10-08T14:25:25Z",
              "updatedAt": "2024-10-08T14:25:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MWZeP",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-08T14:26:46Z",
          "updatedAt": "2024-10-08T14:26:46Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "Thanks for catching i. It is a TODO anyways, where can we find something more  about this?",
              "createdAt": "2024-10-08T14:26:46Z",
              "updatedAt": "2024-10-08T14:26:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MWa89",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-08T14:28:52Z",
          "updatedAt": "2024-10-08T14:28:52Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "How about we mention both cases: \r\n> e.g. if the frame contains only the middle or trailing part of an IP packet ",
              "createdAt": "2024-10-08T14:28:52Z",
              "updatedAt": "2024-10-08T14:29:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MWa9G",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-08T14:28:52Z",
          "updatedAt": "2024-10-08T14:28:52Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "LGTM\r\n",
              "createdAt": "2024-10-08T14:28:52Z",
              "updatedAt": "2024-10-08T14:28:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MWgJd",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-08T14:35:29Z",
          "updatedAt": "2024-10-08T14:35:30Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "Yes I think we should. I tried to look at the [OS](https://github.com/scionproto/scion/blob/master/gateway/dataplane/worker.go), there are some comments but I think you can understand that a lot better than me :) \r\n",
              "createdAt": "2024-10-08T14:35:29Z",
              "updatedAt": "2024-10-08T14:35:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MWhBz",
          "commit": {
            "abbreviatedOid": "d8c743b"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-08T14:36:46Z",
          "updatedAt": "2024-10-08T14:36:46Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "Is this set randomly or not?  Here comment says random, but in practice it is an increasing number\r\nhttps://github.com/scionproto/scion/blob/aa917bb458d6675efc55b4a23fda2c694094553e/gateway/dataplane/encoder.go#L196",
              "createdAt": "2024-10-08T14:36:46Z",
              "updatedAt": "2024-10-08T14:36:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MWkAC",
          "commit": {
            "abbreviatedOid": "d8c743b"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-08T14:41:04Z",
          "updatedAt": "2024-10-08T14:41:05Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "absolutely, maybe this can be a couple of sentences about fragmentation? \r\nI'm not sure if we can write about a potentially better approach?",
              "createdAt": "2024-10-08T14:41:05Z",
              "updatedAt": "2024-10-08T14:41:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MXEJh",
          "commit": {
            "abbreviatedOid": "d8c743b"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-08T15:29:49Z",
          "updatedAt": "2024-10-08T15:29:50Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "The last 4 digits of a nanosecond resolution time could be deemed random. Well, depending on the true timer's resolution. I take it you mean the stream ID, right? The session IDs are just incremented and wrapped around if I remember the code I read.\r\n",
              "createdAt": "2024-10-08T15:29:49Z",
              "updatedAt": "2024-10-08T15:29:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MXgTZ",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-08T16:15:09Z",
          "updatedAt": "2024-10-08T16:15:09Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "I would go as far as embedding a design doc in the draft.\r\n\r\nI would add the following to the `Sequence number` paragraph:\r\n\"Frames can, rarely, be delayed or lost. When a frame other than the next expected one is received, any previously received frames, pertaining to a yet incomplete IP packet, are discarded. Subsequent frames are discarded until one carries the beginning of an IP packet. Late frames (with a sequence number older than any non-discarded ones) are discarded as they necessarily belong to an already discarded IP packet.\"",
              "createdAt": "2024-10-08T16:15:09Z",
              "updatedAt": "2024-10-08T16:15:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MXiL9",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-08T16:18:28Z",
          "updatedAt": "2024-10-08T16:18:28Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "Yeah, that works too :-)",
              "createdAt": "2024-10-08T16:18:28Z",
              "updatedAt": "2024-10-08T16:18:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MgSUn",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-09T14:05:51Z",
          "updatedAt": "2024-10-09T14:05:51Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "Could we say more generally that the SIG should take care of packer reordering but that further details are left to implementors?\r\n\r\n",
              "createdAt": "2024-10-09T14:05:51Z",
              "updatedAt": "2024-10-09T14:05:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MghNA",
          "commit": {
            "abbreviatedOid": "aec94ef"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-09T14:27:23Z",
          "updatedAt": "2024-10-09T14:27:24Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "@oncilla @shitz do you have some background on why SIGs use their own framing protocol rather than any of the existing ones?\r\n@oncilla I remember you mentioned at some point that no other protocol fulfilled the needs. Which needs? Is it because SIG framing can fragment an IP packet in multiple frames, without incurring into MTU problems?  ",
              "createdAt": "2024-10-09T14:27:24Z",
              "updatedAt": "2024-10-09T14:27:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786Mgq1g",
          "commit": {
            "abbreviatedOid": "aec94ef"
          },
          "author": "shitz",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-09T14:41:35Z",
          "updatedAt": "2024-10-09T14:41:35Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "I cannot remember what lead to the decision to create a custom framing protocol. There are certainly some requirements/properties that we wanted, e.g., non-reliable transport, independence of SCION MTU (because that can increase and decrease over time), fast detection of packet loss and subsequent recovery of decapsulation for packets that weren't lost, support for multiple streams within a framing session such that the streams can be distributed to separate cores.\r\nI'm not sure if there was an investigation whether an existing framing protocol would have all of these properties or if it simply wasn't done, but at least there is some justification why the framing protocol is the way it is.",
              "createdAt": "2024-10-09T14:41:35Z",
              "updatedAt": "2024-10-09T14:41:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MtwrC",
          "commit": {
            "abbreviatedOid": "eca44dc"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-10T15:57:20Z",
          "updatedAt": "2024-10-10T15:57:20Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "My notes, before I start forgetting... the code is tough read:\r\n\r\n* Sessions are unidirectional and initiated by senders upon discovering other gateways.\r\n* Gateway are discovered only in remote IAs that are statically configured.\r\n* The initiator gateway allocates one session per (receiverGateway, sessionPolicy) pair.\r\n* All initiated sessions have a unique ID that is simply incremented from 0. The numbering is re-done every time the set of remote gateways changes. To keep the numbers ~stable, the sessions are ordered by (policy>IA). I haven't searched for the effects of session re-IDing.\r\n* Since there are only 256 session IDs they are not necessarily unique, but they are unique within a given (initiator, receiver) pair, as long as there aren't 256+ session policies for a given remote IA.\r\n* From a given initiator to a given receiver, the traffic of all endpoint pairs is multiplexed on the same session.\r\n* All paths between two gateways can be used by any given one session.\r\n* All paths, regardless of session get their own sender, queue, and ~random streamID.\r\n* The receiver side just follows these. It will accept any connection (I haven't checked if sending IAs are checked against the static config).\r\n* The receiver side has one worker for each incoming session, that is each (sender gateway, sessionID) pair. It is created on the fly as needed.\r\n* Each worker keeps a different reassembly queue for each streamID, also created on-demand (but streams share the same worker task, unlike on the sending side).\r\n\r\nConclusion, regarding sessionID and StreamID. Each (sessionID, streamID) pair gets its own re-assembly queue. The pairs are ~unique within the context where it matters (one gateway->gateway pair) by virtue of sessionID being unique, but only approximately: there can be streamID collisions with P=O(10^-9) as long as there aren't too many paths. It might hurt a bit when that happens.\r\n",
              "createdAt": "2024-10-10T15:57:20Z",
              "updatedAt": "2024-10-10T16:01:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786M0zW2",
          "commit": {
            "abbreviatedOid": "aec94ef"
          },
          "author": "shitz",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-10-11T12:05:06Z",
          "updatedAt": "2024-10-11T13:18:48Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "tunnelled -> tunneled",
              "createdAt": "2024-10-11T12:05:07Z",
              "updatedAt": "2024-10-11T13:18:48Z"
            },
            {
              "originalPosition": 36,
              "body": "> TODO: how are the sessions established? Is a session mapped to a single path?\r\n\r\nThe sessions are unidirectionally established by the sender. There is no session negotiation going on. \r\nWhether a session is mapped to a single path or not is an implementation detail. Streams can be used within a session to distinguish different packet flows. A single stream has a single reassembly queue and should be processed by a single core. Packets in a stream should not be distributed over multiple paths because that will lead to reordering and performance will drop.",
              "createdAt": "2024-10-11T12:56:03Z",
              "updatedAt": "2024-10-11T13:18:48Z"
            },
            {
              "originalPosition": 80,
              "body": "This is completely implementation specific. Just because the open-source implementation has a reassembly window of a single fragment doesn't mean that you could easily have implementations that for exmaple allow for up to N out-of-order fragments because they keep them in a buffer and reassemble the packet once all fragments have been received. I would not put this in the draft and state that it's implementation specific. This is even a completely local decision for each SIG.",
              "createdAt": "2024-10-11T13:00:43Z",
              "updatedAt": "2024-10-11T13:18:48Z"
            },
            {
              "originalPosition": 87,
              "body": "> how is the session established and torn down?\r\nAs stated above, there is no real session establishment. The sender chooses session ID, stream ID unilateraly. \r\n\r\n> How is the stream ID set randomly? Is it negotiated? Is it associated with a session? Does it have to be unique within a session? Is it unidirectional?\r\n\r\n1. Chosen unilaterally by the sender however it sees fit\r\n2. no\r\n3. (session id, stream id) tuple needs to be unique\r\n4. yes\r\n5. yes ",
              "createdAt": "2024-10-11T13:14:48Z",
              "updatedAt": "2024-10-11T13:18:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786NLGGc",
          "commit": {
            "abbreviatedOid": "17bf3d5"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T08:07:34Z",
          "updatedAt": "2024-10-15T08:15:49Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\nIP packets are encapsulated over SCION/UDP into SIG frames. Whilst in principle, a pair of SIGs may use other tunneling protocols, existing deployments use SIG framing as described here. This is to provide independence from the underlying SCION path MTU which can increase and decrease over time, to provide fast detection of packet loss and subsequent recovery of decapsulation for packets that weren't lost, and support for multiple streams within a framing session such that the streams can be distributed to separate cores.\r\n```",
              "createdAt": "2024-10-15T08:07:34Z",
              "updatedAt": "2024-10-15T08:15:49Z"
            },
            {
              "originalPosition": 35,
              "body": "```suggestion\r\nA source SIG unidirectionally establishes a SIG tunneling session with a destination SIG. A session may be mapped to one or multiple SCION paths, depending on implementors.\r\n```",
              "createdAt": "2024-10-15T08:13:17Z",
              "updatedAt": "2024-10-15T08:15:49Z"
            },
            {
              "originalPosition": 37,
              "body": "```suggestion\r\nStreams can be used within a session to distinguish between different packet flows. A single stream has a single reassembly queue and SHOULD be processed by a single core. Packets in a stream SHOULD NOT be distributed over multiple SCION paths to avoid reordering and therefore lower performance.\r\n```",
              "createdAt": "2024-10-15T08:14:56Z",
              "updatedAt": "2024-10-15T08:15:49Z"
            },
            {
              "originalPosition": 36,
              "body": "THanks a lot, @knmeynell added a derivative of this text to the draft",
              "createdAt": "2024-10-15T08:15:49Z",
              "updatedAt": "2024-10-15T08:15:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786NLVJy",
          "commit": {
            "abbreviatedOid": "17bf3d5"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "I left a couple of comments, I think after this this is good to merge  (sorry, one more suggestion for you @jiceatscion \ud83e\udd72 )\r\n",
          "createdAt": "2024-10-15T08:33:02Z",
          "updatedAt": "2024-10-15T08:37:18Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "```suggestion\r\n- `Sequence Number` (64 bits) indicates the position of the frame within a stream. Consecutive frames are used to reassemble IP packets split among multiple frames.\r\n\r\nSIGs MAY reorder received frames within a stream. Choice of frame reassembly window is left to implementations.\r\n```",
              "createdAt": "2024-10-15T08:33:02Z",
              "updatedAt": "2024-10-15T08:34:25Z"
            }
          ]
        }
      ]
    },
    {
      "number": 69,
      "id": "PR_kwDOKYa77859-FO6",
      "title": "Intro: clarify relation with other drafts, deprecate overview draft, reference to SCIONLab",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/69",
      "state": "MERGED",
      "author": "knmeynell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-08T15:48:26Z",
      "updatedAt": "2024-10-09T17:09:06Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "4354eadde8ebd666f5342a1bd8adee2c1de1e23b",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "Intro_notes",
      "headRefOid": "24f05808c95062417338b7ccbd587df232979b90",
      "closedAt": "2024-10-09T16:48:42Z",
      "mergedAt": "2024-10-09T16:48:42Z",
      "mergedBy": "knmeynell",
      "mergeCommit": {
        "oid": "114aa3f5cd12ba8f6fd491d30a25f757e90797fc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786McVLB",
          "commit": {
            "abbreviatedOid": "c3ee9fa"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-09T07:05:19Z",
          "updatedAt": "2024-10-09T07:05:19Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Move to informative",
              "createdAt": "2024-10-09T07:05:19Z",
              "updatedAt": "2024-10-09T07:05:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MfaPj",
          "commit": {
            "abbreviatedOid": "34c16d7"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-09T12:43:40Z",
          "updatedAt": "2024-10-09T12:43:40Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "JFYI the opverview is informative (just additional context), the PKI and CP are normative (They must be read to understand this draft)",
              "createdAt": "2024-10-09T12:43:40Z",
              "updatedAt": "2024-10-09T12:43:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786MgVN1",
          "commit": {
            "abbreviatedOid": "34c16d7"
          },
          "author": "knmeynell",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-09T14:10:01Z",
          "updatedAt": "2024-10-09T14:10:01Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Yes, but I understood that you asked me to move them there when we discussed this. PKI and CP were indeed normative IMO.",
              "createdAt": "2024-10-09T14:10:01Z",
              "updatedAt": "2024-10-09T14:10:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786Mfh0Z",
          "commit": {
            "abbreviatedOid": "eefa82b"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-09T12:55:59Z",
          "updatedAt": "2024-10-09T15:06:08Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n```",
              "createdAt": "2024-10-09T12:55:59Z",
              "updatedAt": "2024-10-09T15:06:08Z"
            },
            {
              "originalPosition": 3,
              "body": "```suggestion\r\nnormative:\r\n  I-D.dekater-scion-controlplane:\r\n  I-D.dekater-scion-pki:\r\n```",
              "createdAt": "2024-10-09T12:56:20Z",
              "updatedAt": "2024-10-09T15:06:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786Mh0kw",
          "commit": {
            "abbreviatedOid": "24f0580"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM (I made a few changes). If they also look good to you, please merge @knmeynell \r\n",
          "createdAt": "2024-10-09T16:38:44Z",
          "updatedAt": "2024-10-09T16:39:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 70,
      "id": "PR_kwDOKYa7785-GqIK",
      "title": "Checksum rewording",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/70",
      "state": "MERGED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Resolves #47 ",
      "createdAt": "2024-10-09T16:18:23Z",
      "updatedAt": "2024-10-09T20:29:45Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "4354eadde8ebd666f5342a1bd8adee2c1de1e23b",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "checksum",
      "headRefOid": "498cba622dad5e7025e7e1a694edcd9391337e0e",
      "closedAt": "2024-10-09T20:29:41Z",
      "mergedAt": "2024-10-09T20:29:41Z",
      "mergedBy": "knmeynell",
      "mergeCommit": {
        "oid": "61b84bae9c6531767d3b0807dfb29b73f9a7ab01"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786MiVwg",
          "commit": {
            "abbreviatedOid": "498cba6"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Suggestion non-binding; as usual.",
          "createdAt": "2024-10-09T17:47:31Z",
          "updatedAt": "2024-10-09T17:48:01Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I would suggest a slightly different turn of phrase, just for grammar:\r\nThis pseudo-header is used in current implementations of UDP on top of SCION. However, as checksums across layers are not recommended, this should be re-evaluated in future revisions.\r\n",
              "createdAt": "2024-10-09T17:47:31Z",
              "updatedAt": "2024-10-09T17:48:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 71,
      "id": "PR_kwDOKYa7785-G-L9",
      "title": "Clarify claims about communication between IPs",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/71",
      "state": "MERGED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Resolves #43 ",
      "createdAt": "2024-10-09T17:07:48Z",
      "updatedAt": "2024-10-09T17:26:19Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "114aa3f5cd12ba8f6fd491d30a25f757e90797fc",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "comms-ips",
      "headRefOid": "1b32a8b23bc8fcc10ce70be7d4abd70f132b7488",
      "closedAt": "2024-10-09T17:26:14Z",
      "mergedAt": "2024-10-09T17:26:14Z",
      "mergedBy": "knmeynell",
      "mergeCommit": {
        "oid": "589e8438f3de44ac6015109148621f3a8291051a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786MiLzK",
          "commit": {
            "abbreviatedOid": "1b32a8b"
          },
          "author": "knmeynell",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-09T17:26:03Z",
          "updatedAt": "2024-10-09T17:26:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 72,
      "id": "PR_kwDOKYa7785-IP7T",
      "title": "Incorporated minor change to pseudo header description.",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/72",
      "state": "MERGED",
      "author": "knmeynell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Follow up to #70 \r\nContributes to #47 ",
      "createdAt": "2024-10-09T20:34:31Z",
      "updatedAt": "2024-10-10T13:42:18Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "61b84bae9c6531767d3b0807dfb29b73f9a7ab01",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "pseudo-header-patch",
      "headRefOid": "316a5b967a7f013b084cce565defdcf4568c17e1",
      "closedAt": "2024-10-10T12:58:29Z",
      "mergedAt": "2024-10-10T12:58:29Z",
      "mergedBy": "knmeynell",
      "mergeCommit": {
        "oid": "a5a2d7939b6fb929714c0ae490e3a4c673a2b13e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786MqsSD",
          "commit": {
            "abbreviatedOid": "316a5b9"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-10T11:21:00Z",
          "updatedAt": "2024-10-10T11:21:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 74,
      "id": "PR_kwDOKYa7785-o-Yk",
      "title": "remove mention of multiple ISDs",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/74",
      "state": "MERGED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Resolves #73 ",
      "createdAt": "2024-10-15T08:41:11Z",
      "updatedAt": "2024-10-15T10:15:47Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "a5a2d7939b6fb929714c0ae490e3a4c673a2b13e",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "multiple_ISD",
      "headRefOid": "dd620f4bc10370bf701d36e77c987100b6f08f45",
      "closedAt": "2024-10-15T10:15:44Z",
      "mergedAt": "2024-10-15T10:15:44Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "2002bac75a804032803ffbfe540452ee58feae51"
      },
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Coming from here: \r\n<img width=\"360\" alt=\"Screenshot 2024-10-15 at 11 42 25\" src=\"https://github.com/user-attachments/assets/d6466e92-939d-4574-bd96-17cac287edd0\">\r\n",
          "createdAt": "2024-10-15T09:42:59Z",
          "updatedAt": "2024-10-15T09:42:59Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786NLjNH",
          "commit": {
            "abbreviatedOid": "be9abac"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "...some readers who pay attention might ask how it happens that two segments in different ISDs intersect at one AS... If you accept leaving the response as an exercise to the reader, then all right.\r\n",
          "createdAt": "2024-10-15T08:55:39Z",
          "updatedAt": "2024-10-15T08:55:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKYa7786NMFrh",
          "commit": {
            "abbreviatedOid": "be9abac"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T09:45:34Z",
          "updatedAt": "2024-10-15T09:45:38Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n- **AS shortcut** (Cases 4a and 4b): The up and down segments intersect at a non-core AS below the ISD core, thus creating a shortcut. In this case, a shorter path is made possible by removing the extraneous part of the path to the core. Note that the up and down segments do not need to originate from the same core AS.\r\n```",
              "createdAt": "2024-10-15T09:45:34Z",
              "updatedAt": "2024-10-15T09:47:30Z"
            }
          ]
        }
      ]
    },
    {
      "number": 75,
      "id": "PR_kwDOKYa7785-r87T",
      "title": "sig: clarify what's required for compatibility and what is unspecified",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/75",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #40 ",
      "createdAt": "2024-10-15T14:35:58Z",
      "updatedAt": "2025-01-07T16:12:56Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "2002bac75a804032803ffbfe540452ee58feae51",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "more_sig",
      "headRefOid": "f4c3f410a5edcd0fa1e2c609da4585c22f893061",
      "closedAt": "2024-10-16T15:06:39Z",
      "mergedAt": "2024-10-16T15:06:38Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "148adfb6229f252844a3aa567c82e1ed8da1cbf6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786NWQmk",
          "commit": {
            "abbreviatedOid": "eae4486"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "Thanks a lot, I left a few suggestions. \r\nI don't understand what \"priority grouping\" means, maybe we can quickly discuss",
          "createdAt": "2024-10-16T07:19:51Z",
          "updatedAt": "2024-10-16T07:41:28Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nThe ingress SIG initiates unidirectional packet streams with the egress SIG simply by sending the corresponding SIG frames. There is no handshake. The egress SIG, should it accept the traffic, instanciates the necessary resources on-demand to process each stream. Each such  stream consists of an independent sequence of packets ordered by an incrementing sequence number. Between a given SIG ingress/egress pair, a (session ID, stream ID) pair uniquely identifies a stream.\r\n```\r\nI think your version uses a lot the word \"flow\" to talk about a stream. How about we just talk about streams? \r\nAlso., I'd prefer handshake rather than p**R**eamble",
              "createdAt": "2024-10-16T07:19:51Z",
              "updatedAt": "2024-10-16T07:41:28Z"
            },
            {
              "originalPosition": 28,
              "body": ">  IP packets encapsulated in a single stream SHOULD NOT be re-ordered. \r\n\r\nThis sentence is a bit ambiguous, it feels like the destination SIG should not do any reordering\r\n\r\n ```suggestion\r\nTo preserve performance,  SIGs SHOULD take the following measures to minimize chances of re-ordering:\r\n```",
              "createdAt": "2024-10-16T07:23:57Z",
              "updatedAt": "2024-10-16T07:41:28Z"
            },
            {
              "originalPosition": 33,
              "body": "```suggestion\r\n- The ingress SIG SHOULD encapsulate IP packets that cannot be proven independent (e.g., with the same  IP 6-tuple) in the same stream.\r\n- The ingress SIG SHOULD encapsulate IP packets to a given stream in the order in which they were received.\r\n- The ingress SIG SHOULD send all frames of a given stream over the same SCION path.\r\n- The egress SIG SHOULD reassemble and forward packets from each stream, ordered by frame sequence number and packet within each frame.\r\n```\r\nWe don't describe what traffic class we are referring to (the SCION header traffic class? The IP header one?). Id therefore remove the mention of traffic class",
              "createdAt": "2024-10-16T07:26:24Z",
              "updatedAt": "2024-10-16T07:41:28Z"
            },
            {
              "originalPosition": 36,
              "body": "> to indicate traffic priority grouping \r\n\r\nI find priority grouping a bit ambiguous. Also, couldn't two streams have different priorities? ",
              "createdAt": "2024-10-16T07:31:50Z",
              "updatedAt": "2024-10-16T07:41:28Z"
            },
            {
              "originalPosition": 50,
              "body": "```suggestion\r\nA SIG MAY drop frames. Reordering by the egress SIG is optional. The egress SIG SHOULD drop frames from a stream if unable to perform the sequence re-assembly.\r\n```",
              "createdAt": "2024-10-16T07:40:16Z",
              "updatedAt": "2024-10-16T07:41:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786NWh4w",
          "commit": {
            "abbreviatedOid": "c4d413a"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T07:47:12Z",
          "updatedAt": "2024-10-16T07:47:12Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "@jiceatscion JFYI Eliot recommended to mention multicast tunneling is not in scope. I added this",
              "createdAt": "2024-10-16T07:47:12Z",
              "updatedAt": "2024-10-16T07:47:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786NW-Af",
          "commit": {
            "abbreviatedOid": "c4d413a"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T08:27:40Z",
          "updatedAt": "2024-10-16T08:27:40Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "lgtm",
              "createdAt": "2024-10-16T08:27:40Z",
              "updatedAt": "2024-10-16T08:27:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786NXBoE",
          "commit": {
            "abbreviatedOid": "eae4486"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T08:33:11Z",
          "updatedAt": "2024-10-16T08:33:11Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "My reason for this phrasing is to avoid ambiguity. Frames do have an order, defined by the sequence number. I want to be clear that the \"re-ordering\" we're talking about is to process them into *that* order and not changing it. Apparently that doesn't work. But I am not satisfied with just saying \"reordering\" I think it is not precise and relies on the audience guessing the meaning. May be the more specific \"buffering frames received out-of-order is optional\" would work?",
              "createdAt": "2024-10-16T08:33:11Z",
              "updatedAt": "2024-10-16T08:33:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786NXJT0",
          "commit": {
            "abbreviatedOid": "eae4486"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T08:44:03Z",
          "updatedAt": "2024-10-16T08:44:04Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Actually the grouping does not guarantee any effective priority. The egress SIG has no idea what the various sessions are for. All it does is to give each session its own task, thereby preventing head-of-line blocking. The priorities arise from the relative loads placed by the sender on the sessions. In the OS impl, streams within a session have separate queues but they do not have separate tasks. That is the *only* effect of sessions that I could find in the impl, so I thought I'd use it as a way to explain why the protocol has an explicit ID pair to identify a stream: it enables this kind of hint from the ingress to the egress stream. Depending on implementation it may have an impact (e.g. in the OS impl) or not (e.g. if the egress SIG gives a core to every stream or has a single core running them all). This is basically the protocol enabling some subtle QoS behaviours without being too complicated. I am not sure how to explain that. If I don't people will ask what the two-level stream ID is for. I agree that \"priority grouping\" is crappy. Suggestions welcome for an alternate term.",
              "createdAt": "2024-10-16T08:44:03Z",
              "updatedAt": "2024-10-16T08:44:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786NXM16",
          "commit": {
            "abbreviatedOid": "eae4486"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T08:49:24Z",
          "updatedAt": "2024-10-16T08:49:25Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I was quite deliberate in avoiding the term \"stream\" until I defined it. That is because the protocol identifies what we have to call a stream by \"session ID\" and \"stream ID\". So we have the so common and irritating case of a stream ID not being the ID of a stream. My phrasing was attempt at containing the issue.",
              "createdAt": "2024-10-16T08:49:24Z",
              "updatedAt": "2024-10-16T08:49:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786NXR8q",
          "commit": {
            "abbreviatedOid": "eae4486"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T08:56:24Z",
          "updatedAt": "2024-10-16T08:56:24Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "I disagree both with your assessment and your suggestion. I am pretty clear that it is IP packets that must not be re-ordered. I say nothing of the SIG frames in that sentence. Your phrasing removes that distinction which makes things even more ambiguous. How about: \"IP packets encapsulated in a single stream SHOULD leave the egress SIG in the order in which they entered the ingress SIG\"?",
              "createdAt": "2024-10-16T08:56:24Z",
              "updatedAt": "2024-10-16T08:56:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786NZwnL",
          "commit": {
            "abbreviatedOid": "eae4486"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T12:37:46Z",
          "updatedAt": "2024-10-16T12:37:46Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I do agree with your suggestion of replacing \"preamble\" with \"handshake\".",
              "createdAt": "2024-10-16T12:37:46Z",
              "updatedAt": "2024-10-16T12:37:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786NbSb-",
          "commit": {
            "abbreviatedOid": "eae4486"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T14:47:21Z",
          "updatedAt": "2024-10-16T14:47:21Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Ok replaced with handshake",
              "createdAt": "2024-10-16T14:47:21Z",
              "updatedAt": "2024-10-16T14:47:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786NbTnB",
          "commit": {
            "abbreviatedOid": "eae4486"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T14:49:04Z",
          "updatedAt": "2024-10-16T14:49:04Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Ok I like your wording, added it\r\n\r\n> To preserve performance, IP packets encapsulated in a single stream SHOULD leave the egress SIG in the order in which they entered it. To that end:\r\n ",
              "createdAt": "2024-10-16T14:49:04Z",
              "updatedAt": "2024-10-16T14:49:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786NbU2H",
          "commit": {
            "abbreviatedOid": "eae4486"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T14:50:53Z",
          "updatedAt": "2024-10-16T14:50:54Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Sounds good, went for \r\n>  Buffering frames received out-of-order by the egress SIG is optional. ",
              "createdAt": "2024-10-16T14:50:54Z",
              "updatedAt": "2024-10-16T14:50:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786Nbhai",
          "commit": {
            "abbreviatedOid": "f4c3f41"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-16T15:06:18Z",
          "updatedAt": "2024-10-16T15:06:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 76,
      "id": "PR_kwDOKYa7785-uTk3",
      "title": "Suggested change to remove specific reference to CPU cores",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/76",
      "state": "CLOSED",
      "author": "knmeynell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is less implementation specific.",
      "createdAt": "2024-10-15T19:46:25Z",
      "updatedAt": "2024-10-16T07:43:05Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "more_sig",
      "baseRefOid": "eae4486647cccce8a652d22e1d486aa4ceb83aed",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "De-core-SIG",
      "headRefOid": "5dfead29fa244f127fdf5c6087add6869b0ed97d",
      "closedAt": "2024-10-16T07:43:01Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Conflicts with #75, let's review that one first and then see how we remove mentions of CPUs (I think JC already did it)",
          "createdAt": "2024-10-16T07:33:22Z",
          "updatedAt": "2024-10-16T07:33:22Z"
        },
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "Similar changes are already in https://github.com/scionassociation/scion-dp_I-D/pull/75 , closing",
          "createdAt": "2024-10-16T07:43:01Z",
          "updatedAt": "2024-10-16T07:43:01Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 79,
      "id": "PR_kwDOKYa7785-3g5a",
      "title": "Removed SIG protocol description",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/79",
      "state": "MERGED",
      "author": "knmeynell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Now contains brief SIG description and note that IP tunnelling is out-of-scope of the draft. \r\nResolves #78 ",
      "createdAt": "2024-10-16T17:47:57Z",
      "updatedAt": "2024-10-18T13:18:06Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "148adfb6229f252844a3aa567c82e1ed8da1cbf6",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "De-SIGisation",
      "headRefOid": "a999a4aef36683711dd90f299500f28bb2d38b25",
      "closedAt": "2024-10-17T17:26:57Z",
      "mergedAt": "2024-10-17T17:26:57Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "69ca0001dde3b40e25d1e7c47830b83f6471315a"
      },
      "comments": [
        {
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "body": "JFYI I updated the definition of endpoint also in the CP draft to not mention SIG in https://github.com/scionassociation/scion-cp_I-D/pull/60 \r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2024-10-16T20:49:21Z",
          "updatedAt": "2024-10-16T20:49:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786NevX8",
          "commit": {
            "abbreviatedOid": "02f25a6"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "The text sounds good, however, do you think it could fit as a subsection? I think it would fit nicely below MTU & fragmentation: \r\n```\r\n 3.  Life of a SCION Data Packet\r\n     3.1.  Description\r\n     3.2.  Creating an End-to-End SCION Forwarding Path\r\n     3.3.  Step-by-Step Explanation\r\n     3.4.  MTU\r\n     3.5.  Packet Fragmentation\r\n ```\r\n \r\n However, both the fragmentation and MTU sections are not really part of life of a packet. Maybe we can create a new section # Deployment considerations (including MTU, fragmentation, SIG)? \r\n\r\nP.S. I learned a new word, outwith ",
          "createdAt": "2024-10-16T20:43:32Z",
          "updatedAt": "2024-10-16T21:01:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKYa7786NlM9d",
          "commit": {
            "abbreviatedOid": "a999a4a"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-17T13:59:34Z",
          "updatedAt": "2024-10-17T13:59:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 80,
      "id": "PR_kwDOKYa7785-4pvm",
      "title": "Add header overview figure in intro",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/80",
      "state": "MERGED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Resolves #77",
      "createdAt": "2024-10-16T20:28:41Z",
      "updatedAt": "2024-10-18T14:26:43Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "148adfb6229f252844a3aa567c82e1ed8da1cbf6",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "header-overview",
      "headRefOid": "71b3bc4ee3439644f14367a0ea574e7fd7c6b668",
      "closedAt": "2024-10-17T13:52:49Z",
      "mergedAt": "2024-10-17T13:52:49Z",
      "mergedBy": "knmeynell",
      "mergeCommit": {
        "oid": "8ffe19c5b6dc2720ca79570547b684c4cb4d71f4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786NlH6q",
          "commit": {
            "abbreviatedOid": "71b3bc4"
          },
          "author": "knmeynell",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "All looks good to me.",
          "createdAt": "2024-10-17T13:52:35Z",
          "updatedAt": "2024-10-17T13:52:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 81,
      "id": "PR_kwDOKYa7785_GqFa",
      "title": "fix ref to ISD-AS assignments",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/81",
      "state": "MERGED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Last quick edits before submission",
      "createdAt": "2024-10-18T13:25:08Z",
      "updatedAt": "2024-10-18T14:26:23Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "69ca0001dde3b40e25d1e7c47830b83f6471315a",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "nic_refs",
      "headRefOid": "10fcb3497e3f81ccd8b850dd0e1752219cb51dc1",
      "closedAt": "2024-10-18T14:26:20Z",
      "mergedAt": "2024-10-18T14:26:20Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "95ef2b2049630ac2f1063a0319835b5f6f83e403"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 82,
      "id": "PR_kwDOKYa7785_LIzg",
      "title": "Final tweaks",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/82",
      "state": "MERGED",
      "author": "knmeynell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-19T12:31:48Z",
      "updatedAt": "2024-10-19T13:21:21Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "95ef2b2049630ac2f1063a0319835b5f6f83e403",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "Final_tweaks",
      "headRefOid": "26fa95ed218185f19a805eab1f9bfeaf279285bb",
      "closedAt": "2024-10-19T13:21:15Z",
      "mergedAt": "2024-10-19T13:21:15Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "ea5bc04282d74fbf8ad0869f7527964a05d0c46b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786N00HR",
          "commit": {
            "abbreviatedOid": "26fa95e"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-19T13:21:08Z",
          "updatedAt": "2024-10-19T13:21:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 83,
      "id": "PR_kwDOKYa7785_LTma",
      "title": "dummy change",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/83",
      "state": "MERGED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-19T13:42:54Z",
      "updatedAt": "2024-10-19T13:43:10Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "ea5bc04282d74fbf8ad0869f7527964a05d0c46b",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "dummy-change",
      "headRefOid": "ed25b9a092f675e16134a7041fc136fa2b5e949b",
      "closedAt": "2024-10-19T13:43:08Z",
      "mergedAt": "2024-10-19T13:43:08Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "1da0d36e757bae9d8e6fc2bb9528a414c01aecad"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 87,
      "id": "PR_kwDOKYa7786Boh8u",
      "title": "scmp: export SCMP to controlplane draft",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/87",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Also, in passing:\r\n* fix the description of the hopfield expiration time field\r\n* delete left-over text fragment \"(see [])\".\r\n\r\nResolves: #84 \r\nResolves: #86 \r\n",
      "createdAt": "2024-11-12T13:21:21Z",
      "updatedAt": "2024-12-16T17:13:00Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "1da0d36e757bae9d8e6fc2bb9528a414c01aecad",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "scmp_to_cp",
      "headRefOid": "562708105257cb8d2ee957a4fcbf5f892960cdb0",
      "closedAt": "2024-12-16T17:12:06Z",
      "mergedAt": "2024-12-16T17:12:06Z",
      "mergedBy": "jiceatscion",
      "mergeCommit": {
        "oid": "30fc7d0bb168d215f62094cd13fb2ea53aac443a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786Ta9IQ",
          "commit": {
            "abbreviatedOid": "5627081"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "~LGTM (I fixed a couple of minor things)~",
          "createdAt": "2024-12-02T16:56:25Z",
          "updatedAt": "2024-12-02T17:33:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKYa7786TbYQ_",
          "commit": {
            "abbreviatedOid": "5627081"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Should this section go to the CP? \r\n",
          "createdAt": "2024-12-02T17:32:52Z",
          "updatedAt": "2024-12-02T17:32:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKYa7786TbYvR",
          "commit": {
            "abbreviatedOid": "5627081"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-02T17:33:45Z",
          "updatedAt": "2024-12-02T17:33:49Z",
          "comments": [
            {
              "originalPosition": 467,
              "body": "Should this section go to the CP?",
              "createdAt": "2024-12-02T17:33:46Z",
              "updatedAt": "2024-12-02T17:33:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786VatJJ",
          "commit": {
            "abbreviatedOid": "5627081"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-16T17:11:53Z",
          "updatedAt": "2024-12-16T17:11:53Z",
          "comments": [
            {
              "originalPosition": 467,
              "body": "I don't think so. Just because the control plane provides the SCMP service (by some definition of provides, anyway), doesn't mean that everything that makes use of it becomes part of the control service, does it?\r\n\r\nAs you seem to let me make that choice, I'm merging.\r\n",
              "createdAt": "2024-12-16T17:11:53Z",
              "updatedAt": "2024-12-16T17:11:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 88,
      "id": "PR_kwDOKYa7786DK6K-",
      "title": "Clarifies the aim of the document.",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/88",
      "state": "MERGED",
      "author": "knmeynell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Contributes to #10",
      "createdAt": "2024-11-26T11:02:38Z",
      "updatedAt": "2024-12-11T09:27:54Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "1da0d36e757bae9d8e6fc2bb9528a414c01aecad",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "This-is-not-a-standard",
      "headRefOid": "62ed97684933fc4ac7d331727a97f9e33191a9d6",
      "closedAt": "2024-12-11T09:27:49Z",
      "mergedAt": "2024-12-11T09:27:49Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "dd01fe293644db5a89e645f280422e4bd32d272b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786Ta53p",
          "commit": {
            "abbreviatedOid": "07aced6"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-02T16:51:32Z",
          "updatedAt": "2024-12-02T16:51:37Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "@knmeynell I feel we can do a bit better on this point. IN one of the feedback received, I heard we could say something like: \r\n\r\n> We are doing this because:  existing IP had struggle with routing security. THis work intended to change the nature of how we secure data path. \r\n\r\nI tried to reword the security section, let me know your thoughts. It might need some more wordsmithing.\r\n\r\n",
              "createdAt": "2024-12-02T16:51:32Z",
              "updatedAt": "2024-12-02T16:51:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786TnP5U",
          "commit": {
            "abbreviatedOid": "07aced6"
          },
          "author": "knmeynell",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-03T18:51:06Z",
          "updatedAt": "2024-12-03T18:51:07Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Suggested a slight rewording. ",
              "createdAt": "2024-12-03T18:51:07Z",
              "updatedAt": "2024-12-03T18:51:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786UtQ69",
          "commit": {
            "abbreviatedOid": "b8fafc6"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-11T09:25:42Z",
          "updatedAt": "2024-12-11T09:25:46Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nThe SCION architecture was initially developed outside of the IETF by ETH Zurich with significant contributions from Anapaya Systems. It is deployed in the Swiss finance sector to provide resilient connectivity between financial institutions. The aim of this document is to document the existing protocol specification as deployed, to encourage interoperability among implementations, and to introduce new concepts that can potentially be further improved to address particular problems with the current Internet architecture.  This document is not an Internet Standards Track specification; it is published for informational purposes.\r\n```",
              "createdAt": "2024-12-11T09:25:42Z",
              "updatedAt": "2024-12-11T09:25:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 89,
      "id": "PR_kwDOKYa7786Fqs1h",
      "title": "Clarify possible use of failed link scmp messages.",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/89",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #84 ",
      "createdAt": "2024-12-18T15:44:04Z",
      "updatedAt": "2025-01-07T16:13:14Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "30fc7d0bb168d215f62094cd13fb2ea53aac443a",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "netgative_cache",
      "headRefOid": "23f708c63ca3cfb8efc599a15509ba2060fa9fc4",
      "closedAt": "2024-12-24T11:56:41Z",
      "mergedAt": "2024-12-24T11:56:41Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "aa20c8532a9919ce75e674acf782ec95a170da1a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786VxtFh",
          "commit": {
            "abbreviatedOid": "42bd888"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Just some minor wording change, then feel free to merge",
          "createdAt": "2024-12-18T20:49:48Z",
          "updatedAt": "2024-12-18T20:50:07Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nIn SCION, an intermediate router cannot change the path followed by a packet, only the source endpoint can chose a different path. Therefore, to enable fast recovery, a router SHOULD signal forwarding failures to the source, via a SCMP notification (see {{I-D.dekater-scion-controlplane}} section \"SCMP/Error Messages\"). This allows the source endpoint to quickly switch to a different path. To that end, the source endpoint SHOULD disqualify the broken path. Current implementations use a negative cache with entries retained for 10s.\r\n```",
              "createdAt": "2024-12-18T20:49:48Z",
              "updatedAt": "2024-12-18T20:50:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786V2VUY",
          "commit": {
            "abbreviatedOid": "42bd888"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-19T10:45:34Z",
          "updatedAt": "2024-12-19T10:45:34Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "No; I disagree. We say that SCMP errors are optional, which means that disqualifying broken paths is unavoidably optional. So, there is no SHOULD. It is true that *in order to* stop using the path, the endpoint *should*. But that's lower case. Since lower-case \"should\" or \"must\" are pretty-much forbidden in RFCs.... also, even disqualify is too strong a term (one could just lower its preference score; or whatever makes more sense per the implementation).\r\n\r\nHow about: \"To that end, the source endpoint needs to give lower preference to the broken path. Current implementations use...\"",
              "createdAt": "2024-12-19T10:45:34Z",
              "updatedAt": "2024-12-19T10:45:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786WBS2h",
          "commit": {
            "abbreviatedOid": "42bd888"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-20T07:20:13Z",
          "updatedAt": "2024-12-20T07:20:13Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "How about using MAY? leaving \"needs to\" will cause confusion\r\n\r\nOr alternatively \"To that end, the source endpoint SHOULD to give lower preference to the broken path.\"",
              "createdAt": "2024-12-20T07:20:13Z",
              "updatedAt": "2024-12-20T07:21:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786WCGdx",
          "commit": {
            "abbreviatedOid": "42bd888"
          },
          "author": "jiceatscion",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-20T09:31:18Z",
          "updatedAt": "2024-12-20T09:31:18Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Ok, SHOULD is back. Let's not mince hair forever.\r\n",
              "createdAt": "2024-12-20T09:31:18Z",
              "updatedAt": "2024-12-20T09:31:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKYa7786WUNdu",
          "commit": {
            "abbreviatedOid": "23f708c"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-24T11:56:36Z",
          "updatedAt": "2024-12-24T11:56:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 90,
      "id": "PR_kwDOKYa7786F7J-B",
      "title": "Added reference to the SIG documentation.",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/90",
      "state": "MERGED",
      "author": "jiceatscion",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #85 \r\n\r\nIt would be best to merge this after https://github.com/scionproto/scion/pull/4641\r\n",
      "createdAt": "2024-12-20T15:12:13Z",
      "updatedAt": "2024-12-24T11:55:35Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "30fc7d0bb168d215f62094cd13fb2ea53aac443a",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "sig_ref",
      "headRefOid": "74cd457e5702e7695c7870586c61b1cfbb2b21bd",
      "closedAt": "2024-12-24T11:55:31Z",
      "mergedAt": "2024-12-24T11:55:31Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "2c7712ac9bf5c8e10972d0ffb80fc284a3a25544"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKYa7786WUNNK",
          "commit": {
            "abbreviatedOid": "74cd457"
          },
          "author": "nicorusti",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-24T11:55:26Z",
          "updatedAt": "2024-12-24T11:55:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 91,
      "id": "PR_kwDOKYa7786GKkai",
      "title": "not a standard wording, remove note about splitting document",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/91",
      "state": "MERGED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Contributes to #48 ",
      "createdAt": "2024-12-24T12:22:48Z",
      "updatedAt": "2024-12-24T12:24:15Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "aa20c8532a9919ce75e674acf782ec95a170da1a",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "intro_nic",
      "headRefOid": "310c5c8269f0233c25c33487ed703c071ad999f3",
      "closedAt": "2024-12-24T12:23:55Z",
      "mergedAt": "2024-12-24T12:23:55Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "4d827e98f42fd9db95e0cf7e05bfb68ddd07bd96"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 92,
      "id": "PR_kwDOKYa7786H2PBw",
      "title": "Added disclaimer to Abstract",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/92",
      "state": "OPEN",
      "author": "knmeynell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-15T12:56:12Z",
      "updatedAt": "2025-01-15T12:56:13Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "4d827e98f42fd9db95e0cf7e05bfb68ddd07bd96",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "Disclaimer",
      "headRefOid": "b4cbb899cad5d9355784b23416f413b148d9ded6",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 93,
      "id": "PR_kwDOKYa7786J9G-c",
      "title": "Update actions",
      "url": "https://github.com/scionassociation/scion-dp_I-D/pull/93",
      "state": "MERGED",
      "author": "nicorusti",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-02-04T08:33:45Z",
      "updatedAt": "2025-02-04T08:35:29Z",
      "baseRepository": "scionassociation/scion-dp_I-D",
      "baseRefName": "main",
      "baseRefOid": "4d827e98f42fd9db95e0cf7e05bfb68ddd07bd96",
      "headRepository": "scionassociation/scion-dp_I-D",
      "headRefName": "update-actions",
      "headRefOid": "4c54dfe2687bbd7a13b4808f39a4e7bb9a9459cd",
      "closedAt": "2025-02-04T08:35:26Z",
      "mergedAt": "2025-02-04T08:35:26Z",
      "mergedBy": "nicorusti",
      "mergeCommit": {
        "oid": "c486f1cab900022c45c75432e8cc868c7bad512f"
      },
      "comments": [],
      "reviews": []
    }
  ]
}